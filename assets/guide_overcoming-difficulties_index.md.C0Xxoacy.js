import{_ as E,C as d,c as o,o as t,a2 as p,b as l,j as n,w as i,a,G as h,a3 as r}from"./chunks/framework.BvXV5w7a.js";const F=JSON.parse('{"title":"RxJS困難点克服","description":"TypeScriptと業務経験のある開発者がRxJSで直面する困難とその克服方法を解説します。Observable vs Promise、Cold vs Hot、オペレーター選択、ライフサイクル管理など、RxJS特有の難所を体系的に理解しましょう。","frontmatter":{"description":"TypeScriptと業務経験のある開発者がRxJSで直面する困難とその克服方法を解説します。Observable vs Promise、Cold vs Hot、オペレーター選択、ライフサイクル管理など、RxJS特有の難所を体系的に理解しましょう。"},"headers":[],"relativePath":"guide/overcoming-difficulties/index.md","filePath":"guide/overcoming-difficulties/index.md"}'),k={name:"guide/overcoming-difficulties/index.md"};function c(g,s,A,B,u,b){const e=d("Mermaid");return t(),o("div",null,[s[3]||(s[3]=p(`<h1 id="rxjs困難点克服" tabindex="-1">RxJS困難点克服 <a class="header-anchor" href="#rxjs困難点克服" aria-label="Permalink to &quot;RxJS困難点克服&quot;">​</a></h1><p>TypeScriptと業務経験がある開発者でも、RxJSの実践では多くの困難に直面します。このセクションでは、RxJS特有の難所とその克服方法を体系的に解説します。</p><h2 id="なぜrxjsは難しいのか" tabindex="-1">なぜRxJSは難しいのか <a class="header-anchor" href="#なぜrxjsは難しいのか" aria-label="Permalink to &quot;なぜRxJSは難しいのか&quot;">​</a></h2><p>RxJSの難しさは、<strong>概念の抽象度の高さ</strong>と<strong>パラダイムシフトの必要性</strong>にあります。</p><h3 id="既存の知識が通用しない" tabindex="-1">既存の知識が通用しない <a class="header-anchor" href="#既存の知識が通用しない" aria-label="Permalink to &quot;既存の知識が通用しない&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ❌ Promise的な思考：値を直接取得したい</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// これは何も返さない</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ RxJS的な思考：ストリームを変換する</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> doubled$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> observable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="important custom-block github-alert"><p class="custom-block-title">問題点</p><p></p><ul><li>命令的プログラミング（Promiseのthen/await）の思考が通用しない</li><li>値ではなく「ストリームの変換」を考える必要がある</li><li>subscribe内で処理を完結させようとすると、アンチパターンに陥る</li></ul></div><h3 id="時間軸の概念が追加される" tabindex="-1">時間軸の概念が追加される <a class="header-anchor" href="#時間軸の概念が追加される" aria-label="Permalink to &quot;時間軸の概念が追加される&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Promise: 1回だけ値が返る</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Observable: 時間軸に沿って複数の値が流れる</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> clicks$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(button, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//                     時間軸</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// clicks$:  ------click----click--click----------&gt;</span></span></code></pre></div><div class="important custom-block github-alert"><p class="custom-block-title">問題点</p><p></p><ul><li>「いつ値が流れるのか」を常に意識する必要がある</li><li>同期/非同期の違いが動作に影響する</li><li>Marble Diagramの読解が必須になる</li></ul></div><h3 id="_100種類以上のオペレーターから選択" tabindex="-1">100種類以上のオペレーターから選択 <a class="header-anchor" href="#_100種類以上のオペレーターから選択" aria-label="Permalink to &quot;100種類以上のオペレーターから選択&quot;">​</a></h3><div class="important custom-block github-alert"><p class="custom-block-title">よくある悩み</p><p></p><ul><li>&quot;map, mergeMap, switchMap, concatMap... 違いがわからない&quot;</li><li>&quot;debounceTime と throttleTime、どっちを使えば？&quot;</li><li>&quot;combineLatest と zip、何が違う？&quot;</li></ul></div><p>→ Chapter 11では、<strong>実践的な選択基準</strong>を提供します。</p><h2 id="主な困難点一覧" tabindex="-1">主な困難点一覧 <a class="header-anchor" href="#主な困難点一覧" aria-label="Permalink to &quot;主な困難点一覧&quot;">​</a></h2><p>このセクションでは、以下の7つの困難点を扱います。</p><table tabindex="0"><thead><tr><th>困難点</th><th>内容</th><th>よくある症状</th></tr></thead><tbody><tr><td><strong><a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/conceptual-understanding.html">概念理解の壁</a></strong></td><td>Observable vs Promise、Cold vs Hot</td><td>&quot;Promiseと何が違うの？&quot;</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/lifecycle-management.html">ライフサイクル管理</a></strong></td><td>subscribe/unsubscribe、メモリリーク</td><td>&quot;いつunsubscribeすべき？&quot;</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/operator-selection.html">オペレーター選択</a></strong></td><td>100+のオペレーターから選ぶ基準</td><td>&quot;どのオペレーターを使えば？&quot;</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/timing-and-order.html">タイミングと順序</a></strong></td><td>いつ値が流れるのか、同期vs非同期</td><td>&quot;なぜ値が出ない？&quot;</td></tr><tr><td><strong>状態管理</strong>（準備中）</td><td>Subject、share/shareReplay</td><td>&quot;状態を共有したい&quot;</td></tr><tr><td><strong>複数ストリーム組み合わせ</strong>（準備中）</td><td>combineLatest、zip、withLatestFrom</td><td>&quot;2つのAPIの結果を合わせたい&quot;</td></tr><tr><td><strong>デバッグ</strong>（準備中）</td><td>値が流れない、期待と違う値</td><td>&quot;何が起きているか分からない&quot;</td></tr></tbody></table><h2 id="各セクションの使い方" tabindex="-1">各セクションの使い方 <a class="header-anchor" href="#各セクションの使い方" aria-label="Permalink to &quot;各セクションの使い方&quot;">​</a></h2><h3 id="_1-自分の困難点を特定する" tabindex="-1">1. 自分の困難点を特定する <a class="header-anchor" href="#_1-自分の困難点を特定する" aria-label="Permalink to &quot;1. 自分の困難点を特定する&quot;">​</a></h3><p>上記の表から、<strong>現在直面している困難</strong>に該当するセクションを選んでください。</p><p><strong>例：</strong></p><ul><li>API呼び出しで値が取れない → <a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/timing-and-order.html">タイミングと順序</a></li><li>メモリリークが心配 → <a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/lifecycle-management.html">ライフサイクル管理</a></li><li>mergeMapとswitchMapで迷う → <a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/operator-selection.html">オペレーター選択</a></li></ul><h3 id="_2-悪い例→良い例で理解する" tabindex="-1">2. 悪い例→良い例で理解する <a class="header-anchor" href="#_2-悪い例→良い例で理解する" aria-label="Permalink to &quot;2. 悪い例→良い例で理解する&quot;">​</a></h3><p>各セクションは以下の構成になっています。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>❌ 悪い例（陥りがちなパターン）</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>✅ 良い例（推奨パターン）</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>💡 解説（なぜ悪いのか、なぜ良いのか）</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>🎯 練習問題（理解度チェック）</span></span></code></pre></div><h3 id="_3-starter-kitで実験する" tabindex="-1">3. Starter Kitで実験する <a class="header-anchor" href="#_3-starter-kitで実験する" aria-label="Permalink to &quot;3. Starter Kitで実験する&quot;">​</a></h3><p>すべてのコード例は、<a href="/RxJS-with-TypeScript/guide/starter-kid.html">学習用の実行環境</a>で実際に動かせます。</p><h4 id="推奨学習フロー" tabindex="-1">推奨学習フロー <a class="header-anchor" href="#推奨学習フロー" aria-label="Permalink to &quot;推奨学習フロー&quot;">​</a></h4><ol><li>悪い例をコピーして実行 → 問題を体験</li><li>良い例をコピーして実行 → 違いを実感</li><li>自分のコードに応用 → 定着</li></ol><h2 id="学習ロードマップ" tabindex="-1">学習ロードマップ <a class="header-anchor" href="#学習ロードマップ" aria-label="Permalink to &quot;学習ロードマップ&quot;">​</a></h2><h3 id="初めてrxjsを学ぶ場合" tabindex="-1">初めてRxJSを学ぶ場合 <a class="header-anchor" href="#初めてrxjsを学ぶ場合" aria-label="Permalink to &quot;初めてRxJSを学ぶ場合&quot;">​</a></h3>`,30)),(t(),l(r,null,{default:i(()=>[h(e,{id:"mermaid-260",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5BChapter%201-2%3A%20%E5%9F%BA%E7%A4%8E%5D%20--%3E%20B%5BChapter%203-4%3A%20Creation%2FOperators%5D%0A%20%20%20%20B%20--%3E%20C%5B%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3%E3%81%AE%E5%A3%81%5D%0A%20%20%20%20C%20--%3E%20D%5B%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB%E7%AE%A1%E7%90%86%5D%0A%20%20%20%20D%20--%3E%20E%5BChapter%205-6%3A%20Subject%2FError%5D%0A%20%20%20%20E%20--%3E%20F%5B%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%BF%E3%83%BC%E9%81%B8%E6%8A%9E%5D%0A%20%20%20%20F%20--%3E%20G%5B%E3%82%BF%E3%82%A4%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%A8%E9%A0%86%E5%BA%8F%5D%0A%20%20%20%20G%20--%3E%20H%5BChapter%2013%3A%20%E5%AE%9F%E8%B7%B5%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%5D%0A"})]),fallback:i(()=>s[0]||(s[0]=[a(" Loading... ")])),_:1})),s[4]||(s[4]=n("h3",{id:"基礎は理解しているが実践で困っている場合",tabindex:"-1"},[a("基礎は理解しているが実践で困っている場合 "),n("a",{class:"header-anchor",href:"#基礎は理解しているが実践で困っている場合","aria-label":'Permalink to "基礎は理解しているが実践で困っている場合"'},"​")],-1)),(t(),l(r,null,{default:i(()=>[h(e,{id:"mermaid-264",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%E7%8F%BE%E5%9C%A8%E3%81%AE%E5%9B%B0%E9%9B%A3%E7%82%B9%E3%82%92%E7%89%B9%E5%AE%9A%5D%20--%3E%20B%7B%E5%9B%B0%E9%9B%A3%E7%82%B9%E3%81%AF%EF%BC%9F%7D%0A%20%20%20%20B%20--%3E%7C%E5%80%A4%E3%81%8C%E6%B5%81%E3%82%8C%E3%81%AA%E3%81%84%7C%20C%5B%E3%82%BF%E3%82%A4%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%A8%E9%A0%86%E5%BA%8F%5D%0A%20%20%20%20B%20--%3E%7C%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%BF%E3%83%BC%E9%81%B8%E6%8A%9E%7C%20D%5B%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%BF%E3%83%BC%E9%81%B8%E6%8A%9E%5D%0A%20%20%20%20B%20--%3E%7C%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%AF%7C%20E%5B%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB%5D%0A%20%20%20%20B%20--%3E%7C%E7%8A%B6%E6%85%8B%E5%85%B1%E6%9C%89%7C%20F%5B%E7%8A%B6%E6%85%8B%E7%AE%A1%E7%90%86%20%E6%BA%96%E5%82%99%E4%B8%AD%5D%0A%20%20%20%20B%20--%3E%7C%E8%A4%87%E6%95%B0API%7C%20G%5B%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%20%E6%BA%96%E5%82%99%E4%B8%AD%5D%0A%20%20%20%20C%20--%3E%20H%5BChapter%2013%3A%20%E5%AE%9F%E8%B7%B5%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%5D%0A%20%20%20%20D%20--%3E%20H%0A%20%20%20%20E%20--%3E%20H%0A%20%20%20%20F%20--%3E%20H%0A%20%20%20%20G%20--%3E%20H%0A"})]),fallback:i(()=>s[1]||(s[1]=[a(" Loading... ")])),_:1})),s[5]||(s[5]=n("h3",{id:"アンチパターンに陥っている場合",tabindex:"-1"},[a("アンチパターンに陥っている場合 "),n("a",{class:"header-anchor",href:"#アンチパターンに陥っている場合","aria-label":'Permalink to "アンチパターンに陥っている場合"'},"​")],-1)),(t(),l(r,null,{default:i(()=>[h(e,{id:"mermaid-268",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5BChapter%2010%3A%20%E3%82%A2%E3%83%B3%E3%83%81%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E9%9B%86%5D%20--%3E%20B%5B%E8%A9%B2%E5%BD%93%E3%81%99%E3%82%8B%E5%95%8F%E9%A1%8C%E3%82%92%E7%A2%BA%E8%AA%8D%5D%0A%20%20%20%20B%20--%3E%20C%7B%E3%81%AA%E3%81%9C%E3%81%9D%E3%81%86%E3%81%AA%E3%81%A3%E3%81%9F%EF%BC%9F%7D%0A%20%20%20%20C%20--%3E%7C%E6%A6%82%E5%BF%B5%E3%81%AE%E8%AA%A4%E8%A7%A3%7C%20D%5B%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3%5D%0A%20%20%20%20C%20--%3E%7C%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%BF%E3%83%BC%E9%81%B8%E6%8A%9E%E3%83%9F%E3%82%B9%7C%20E%5B%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%BF%E3%83%BC%E9%81%B8%E6%8A%9E%5D%0A%20%20%20%20C%20--%3E%7Csubscribe%E5%9C%B0%E7%8D%84%7C%20F%5BChapter%2013%3A%20%E5%AE%9F%E8%B7%B5%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%5D%0A%20%20%20%20D%20--%3E%20G%5B%E4%BF%AE%E6%AD%A3%E5%BE%8C%E3%80%81Chapter%2013%E3%81%A7%E5%AE%9F%E8%B7%B5%5D%0A%20%20%20%20E%20--%3E%20G%0A%20%20%20%20F%20--%3E%20G%0A"})]),fallback:i(()=>s[2]||(s[2]=[a(" Loading... ")])),_:1})),s[6]||(s[6]=p(`<h2 id="関連セクション" tabindex="-1">関連セクション <a class="header-anchor" href="#関連セクション" aria-label="Permalink to &quot;関連セクション&quot;">​</a></h2><p>このChapterは、以下のセクションと密接に関連しています。</p><ul><li><strong><a href="/RxJS-with-TypeScript/guide/anti-patterns/">Chapter 10: RxJSアンチパターン集</a></strong> - 「何が悪いか」を学ぶ</li><li><strong><a href="/RxJS-with-TypeScript/guide/">Chapter 13: 実践パターン集</a></strong> - 「どう書くべきか」を学ぶ（準備中）</li><li><strong><a href="/RxJS-with-TypeScript/guide/debugging/">Chapter 8: RxJSのデバッグ手法</a></strong> - 「問題を見つける方法」を学ぶ</li></ul><h4 id="学習の流れ" tabindex="-1">学習の流れ <a class="header-anchor" href="#学習の流れ" aria-label="Permalink to &quot;学習の流れ&quot;">​</a></h4><ol><li><strong>Chapter 11（本章）</strong> - RxJSの困難点を理解する</li><li><strong>Chapter 10</strong> - 具体的なアンチパターンを知る</li><li><strong>Chapter 13</strong> - 正しい実装パターンを習得する</li></ol><h2 id="理解度チェックリスト" tabindex="-1">理解度チェックリスト <a class="header-anchor" href="#理解度チェックリスト" aria-label="Permalink to &quot;理解度チェックリスト&quot;">​</a></h2><p>各セクションを読み終えたら、以下を確認してください。</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 概念理解</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] ObservableとPromiseの違いを説明できる</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] ColdとHotの違いを実例で説明できる</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] 宣言的プログラミングのメリットを理解している</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 実践スキル</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] 適切なタイミングでsubscribe/unsubscribeできる</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] 目的に合ったオペレーターを選択できる</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] Marble Diagramを読んで動作を予測できる</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## デバッグ</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] tapを使ってストリームをデバッグできる</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] 値が流れない原因を特定できる</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] メモリリークの兆候を見つけられる</span></span></code></pre></div><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p><strong>まず最初に読むべきページ：</strong></p><p>→ <strong><a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/conceptual-understanding.html">概念理解の壁</a></strong> - RxJSの本質的な考え方を理解する</p><p>ここから始めて、自分の困難点に応じて他のセクションに進んでください。</p>`,12))])}const m=E(k,[["render",c]]);export{F as __pageData,m as default};
