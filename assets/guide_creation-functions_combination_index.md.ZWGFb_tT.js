import{_ as s,c as a,o as t,a2 as n}from"./chunks/framework.BvXV5w7a.js";const c=JSON.parse('{"title":"結合系 Creation Functions","description":"複数のObservableを1つに結合するCreation Functionsについて解説します。concat、merge、combineLatest、zip、forkJoinの使い分けと実践例を学びます。","frontmatter":{"description":"複数のObservableを1つに結合するCreation Functionsについて解説します。concat、merge、combineLatest、zip、forkJoinの使い分けと実践例を学びます。"},"headers":[],"relativePath":"guide/creation-functions/combination/index.md","filePath":"guide/creation-functions/combination/index.md"}'),e={name:"guide/creation-functions/combination/index.md"};function h(l,i,p,k,r,o){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="結合系-creation-functions" tabindex="-1">結合系 Creation Functions <a class="header-anchor" href="#結合系-creation-functions" aria-label="Permalink to &quot;結合系 Creation Functions&quot;">​</a></h1><p>複数のObservableを1つのObservableに結合するための主要なCreation Functionsです。</p><h2 id="結合系-creation-functions-とは" tabindex="-1">結合系 Creation Functions とは <a class="header-anchor" href="#結合系-creation-functions-とは" aria-label="Permalink to &quot;結合系 Creation Functions とは&quot;">​</a></h2><p>結合系のCreation Functionsは、複数のObservableを受け取り、それらを1つのObservableストリームにまとめます。結合方法によって、値の発行タイミングや順序が異なります。</p><p>以下の表で、各Creation Functionの特徴と使い分けを確認してください。</p><h2 id="主要な結合系-creation-functions" tabindex="-1">主要な結合系 Creation Functions <a class="header-anchor" href="#主要な結合系-creation-functions" aria-label="Permalink to &quot;主要な結合系 Creation Functions&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Function</th><th>説明</th><th>ユースケース</th></tr></thead><tbody><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/combination/concat.html">concat</a></strong></td><td>順次結合（前が完了後、次が開始）</td><td>ステップバイステップ処理</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/combination/merge.html">merge</a></strong></td><td>並行結合（同時購読、発行順に出力）</td><td>複数イベントの統合</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/combination/combineLatest.html">combineLatest</a></strong></td><td>最新値を組み合わせ</td><td>フォーム入力の同期</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/combination/zip.html">zip</a></strong></td><td>対応する値をペア化</td><td>リクエストとレスポンスの対応</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/combination/forkJoin.html">forkJoin</a></strong></td><td>すべての完了を待って最終値を結合</td><td>並列API呼び出しの完了待ち</td></tr></tbody></table><h2 id="使い分けの基準" tabindex="-1">使い分けの基準 <a class="header-anchor" href="#使い分けの基準" aria-label="Permalink to &quot;使い分けの基準&quot;">​</a></h2><p>結合系Creation Functionsの選択は、以下の観点で判断します。</p><h3 id="_1-実行タイミング" tabindex="-1">1. 実行タイミング <a class="header-anchor" href="#_1-実行タイミング" aria-label="Permalink to &quot;1. 実行タイミング&quot;">​</a></h3><ul><li><strong>順次実行</strong>: <code>concat</code> - 前のObservableが完了してから次を開始</li><li><strong>並行実行</strong>: <code>merge</code>, <code>combineLatest</code>, <code>zip</code>, <code>forkJoin</code> - すべてのObservableを同時に購読</li></ul><h3 id="_2-値の発行方法" tabindex="-1">2. 値の発行方法 <a class="header-anchor" href="#_2-値の発行方法" aria-label="Permalink to &quot;2. 値の発行方法&quot;">​</a></h3><ul><li><strong>すべての値を発行</strong>: <code>concat</code>, <code>merge</code> - 各Observableから発行されたすべての値を出力</li><li><strong>最新値を組み合わせ</strong>: <code>combineLatest</code> - いずれかが値を発行するたびに、すべての最新値を組み合わせて発行</li><li><strong>対応する値をペア化</strong>: <code>zip</code> - 各Observableの対応する位置の値をペア化して発行</li><li><strong>最終値のみ</strong>: <code>forkJoin</code> - すべてのObservableが完了した時点で、各最終値を配列で発行</li></ul><h3 id="_3-完了のタイミング" tabindex="-1">3. 完了のタイミング <a class="header-anchor" href="#_3-完了のタイミング" aria-label="Permalink to &quot;3. 完了のタイミング&quot;">​</a></h3><ul><li><strong>すべて完了後</strong>: <code>concat</code>, <code>forkJoin</code> - すべてのObservableが完了するまで待つ</li><li><strong>いずれか完了時</strong>: <code>zip</code> - いずれか1つが完了したら完了</li><li><strong>完了しない</strong>: <code>merge</code>, <code>combineLatest</code> - いずれかが完了しても、他が継続していれば完了しない</li></ul><h2 id="cold-から-hot-への変換" tabindex="-1">Cold から Hot への変換 <a class="header-anchor" href="#cold-から-hot-への変換" aria-label="Permalink to &quot;Cold から Hot への変換&quot;">​</a></h2><p>上記の表に示した通り、<strong>全ての結合系Creation Functionsは Cold Observable を生成します</strong>。購読するたびに独立した実行が開始されます。</p><p>しかし、マルチキャスト系オペレーター（<code>share()</code>, <code>shareReplay()</code>, <code>publish()</code> など）を使用することで、<strong>Cold Observable を Hot Observable に変換</strong>できます。</p><h3 id="実践例-httpリクエストの共有" tabindex="-1">実践例：HTTPリクエストの共有 <a class="header-anchor" href="#実践例-httpリクエストの共有" aria-label="Permalink to &quot;実践例：HTTPリクエストの共有&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { merge, interval } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { map, take, share } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ❄️ Cold - 購読ごとに独立したHTTPリクエスト</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> coldApi$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Source A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Source B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">coldApi$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;購読者1:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">coldApi$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;購読者2:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// → 各購読者が独立した interval を実行（2倍のリクエスト）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 🔥 Hot - 購読者間で実行を共有</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hotApi$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Source A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Source B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">share</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hotApi$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;購読者1:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hotApi$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;購読者2:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// → 1つの interval を共有（リクエストは1回のみ）</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p><strong>Hot化が必要なケース</strong>:</p><ul><li>複数のコンポーネントで同じAPI結果を共有</li><li><code>forkJoin</code> で並列リクエストした結果を複数箇所で使用</li><li><code>combineLatest</code> で状態を管理し、複数の購読者に配信</li></ul><p>詳しくは <a href="/RxJS-with-TypeScript/guide/creation-functions/basic/#cold-から-hot-への変換">基本作成系 - Cold から Hot への変換</a> を参照してください。</p></div><h2 id="pipeable-operator-との対応関係" tabindex="-1">Pipeable Operator との対応関係 <a class="header-anchor" href="#pipeable-operator-との対応関係" aria-label="Permalink to &quot;Pipeable Operator との対応関係&quot;">​</a></h2><p>結合系Creation Functionsには、対応するPipeable Operatorが存在します。パイプラインの中で使用する場合は、<code>~With</code>系のオペレーターを使います。</p><table tabindex="0"><thead><tr><th>Creation Function</th><th>Pipeable Operator</th></tr></thead><tbody><tr><td><code>concat(a$, b$)</code></td><td><code>a$.pipe(concatWith(b$))</code></td></tr><tr><td><code>merge(a$, b$)</code></td><td><code>a$.pipe(mergeWith(b$))</code></td></tr><tr><td><code>zip(a$, b$)</code></td><td><code>a$.pipe(zipWith(b$))</code></td></tr><tr><td><code>combineLatest([a$, b$])</code></td><td><code>a$.pipe(combineLatestWith(b$))</code></td></tr></tbody></table><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>各Creation Functionの詳細な動作と実践例を学ぶには、上記の表からリンクをクリックしてください。</p><p>また、<a href="/RxJS-with-TypeScript/guide/creation-functions/selection/">選択・分割系 Creation Functions</a>や<a href="/RxJS-with-TypeScript/guide/creation-functions/conditional/">条件分岐系 Creation Functions</a>も併せて学習することで、Creation Functionsの全体像を理解できます。</p>`,27)]))}const E=s(e,[["render",h]]);export{c as __pageData,E as default};
