import{_ as h,C as n,c as l,o as i,a2 as a,b as r,w as t,a as p,G as k,a3 as d}from"./chunks/framework.BvXV5w7a.js";const u=JSON.parse('{"title":"RxJSとは何か？","description":"RxJSはリアクティブプログラミングを実現するためのJavaScriptライブラリで、非同期データをObservableとして扱います。","frontmatter":{"description":"RxJSはリアクティブプログラミングを実現するためのJavaScriptライブラリで、非同期データをObservableとして扱います。"},"headers":[],"relativePath":"guide/basics/what-is-rxjs.md","filePath":"guide/basics/what-is-rxjs.md"}'),o={name:"guide/basics/what-is-rxjs.md"};function E(c,s,g,y,b,F){const e=n("Mermaid");return i(),l("div",null,[s[1]||(s[1]=a(`<h1 id="rxjsとは何か" tabindex="-1">RxJSとは何か？ <a class="header-anchor" href="#rxjsとは何か" aria-label="Permalink to &quot;RxJSとは何か？&quot;">​</a></h1><h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h2><p><a href="https://rxjs.dev" target="_blank" rel="noreferrer">RxJS（Reactive Extensions for JavaScript）</a>とは、「リアクティブプログラミング」を JavaScript で行うためのライブラリです。</p><blockquote><h3 id="リアクティブプログラミングとは" tabindex="-1">リアクティブプログラミングとは？ <a class="header-anchor" href="#リアクティブプログラミングとは" aria-label="Permalink to &quot;リアクティブプログラミングとは？&quot;">​</a></h3><p>リアクティブプログラミングは、データの変化に応じて自動的に更新されるプログラムの作成方法です。 イベント駆動型プログラミングの一種であり、特に非同期なデータストリームの扱いに焦点を当てています。 データの流れ（ストリーム）を中心に考え、その流れに対して反応（リアクション）する方式でプログラムを構築します。</p></blockquote><p>つまり、RxJSはイベントや非同期データの流れ（ストリーム）を、関数型スタイルで扱うためのライブラリです。Observableパターンを利用して、非同期データストリームを扱うための強力なツールを提供します。</p><blockquote><p>Observableとは、イベントや非同期データの流れ（ストリーム）を表現するRxJSの中核的な構成要素です。値が「流れてくる」源であり、購読（subscribe）によって値を受け取ることができます。Observableとは、時間の経過とともに値を発行する「データの流れ（ストリーム）」です。購読（subscribe）することで、その値を受け取ることができます。</p></blockquote><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>「ストリームってそもそも何？」という方は、<a href="/RxJS-with-TypeScript/guide/basics/what-is-a-stream.html">ストリームとは？</a> も参照してみてください。</p></div><h2 id="簡単な使用例" tabindex="-1">簡単な使用例 <a class="header-anchor" href="#簡単な使用例" aria-label="Permalink to &quot;簡単な使用例&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fromEvent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;クリックされました:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="rxjsの基本構成要素" tabindex="-1">RxJSの基本構成要素 <a class="header-anchor" href="#rxjsの基本構成要素" aria-label="Permalink to &quot;RxJSの基本構成要素&quot;">​</a></h2><p>RxJSを使いこなすには、以下の中核的な構成要素を理解することが重要です。</p><table tabindex="0"><thead><tr><th>構成要素</th><th>概要</th></tr></thead><tbody><tr><td><a href="./../observables/what-is-observable.html"><code>Observable</code></a></td><td>非同期または時間に沿って発生するデータを表すストリームの源です。</td></tr><tr><td><a href="./../observables/observable-lifecycle.html#observer"><code>Observer</code></a></td><td>Observableからデータを購読して受け取る側の存在です。</td></tr><tr><td><a href="./../observables/observable-lifecycle.html#subscription"><code>Subscription</code></a></td><td>Observableの購読と解除の管理を行います。</td></tr><tr><td><a href="./../creation-functions/"><code>Creation Functions</code></a></td><td>新しいObservableを作成・結合するための関数群です。</td></tr><tr><td><a href="./../operators/"><code>Operator</code></a></td><td>既存のObservableを変換・制御するための関数群です。</td></tr><tr><td><a href="./../subjects/what-is-subject.html"><code>Subject</code></a><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></td><td>ObservableとObserverの両方の性質を持つ中継器です。</td></tr><tr><td><a href="./../schedulers/async-control.html"><code>Scheduler</code></a><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></td><td>Observableの実行タイミングを制御する仕組みです。</td></tr></tbody></table><p>これらはそれぞれ独立した機能を持ちながらも連携して動作します。 たとえば、Creation Functionsで複数のObservableを結合し、Operatorで変換し、Observerが購読し、Schedulerで制御する、といった形で、全体としてストリーム処理を構成します。</p><p>※ 各構成要素の詳細な使い方や例については、それぞれの専用章で個別に解説します。</p><h3 id="構成クラス図" tabindex="-1">構成クラス図 <a class="header-anchor" href="#構成クラス図" aria-label="Permalink to &quot;構成クラス図&quot;">​</a></h3>`,15)),(i(),r(d,null,{default:t(()=>[k(e,{id:"mermaid-119",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20Observable~T~%20%7B%0A%20%20%20%20%20%20%20%20%2Bsubscribe(observer)%0A%20%20%20%20%20%20%20%20%2Bpipe(...operators)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20class%20Observer~T~%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%20%20%20%20%2Bnext(value)%0A%20%20%20%20%20%20%20%20%2Berror(err)%0A%20%20%20%20%20%20%20%20%2Bcomplete()%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20class%20Subscription%20%7B%0A%20%20%20%20%20%20%20%20%2Bunsubscribe()%0A%20%20%20%20%20%20%20%20%2Badd(subscription)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20class%20Subscriber~T~%20%7B%0A%20%20%20%20%20%20%20%20%2Bnext(value)%0A%20%20%20%20%20%20%20%20%2Berror(err)%0A%20%20%20%20%20%20%20%20%2Bcomplete()%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20class%20OperatorFunction~T%2CR~%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%20%20%20%20%2Bfunction(source%3A%20Observable~T~)%3A%20Observable~R~%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20class%20Subject~T~%20%7B%0A%20%20%20%20%20%20%20%20%2Bnext(value)%0A%20%20%20%20%20%20%20%20%2Berror(err)%0A%20%20%20%20%20%20%20%20%2Bcomplete()%0A%20%20%20%20%20%20%20%20%2Bsubscribe()%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20Observable~T~%20--%3E%20OperatorFunction%20%3A%20transformed%20by%0A%20%20%20%20Observable%20--%3E%20Observer%20%3A%20notifies%0A%20%20%20%20Subject~T~%20--%7C%3E%20Observable~T~%20%3A%20extends%0A%20%20%20%20Subject~T~%20..%7C%3E%20Observer~T~%20%3A%20implements%0A%20%20%20%20Subscriber%20--%7C%3E%20Subscription%20%3A%20extends%0A%20%20%20%20Subscriber%20..%7C%3E%20Observer%20%3A%20implements%0A"})]),fallback:t(()=>s[0]||(s[0]=[p(" Loading... ")])),_:1})),s[2]||(s[2]=a(`<h2 id="rxjsの利点" tabindex="-1">RxJSの利点 <a class="header-anchor" href="#rxjsの利点" aria-label="Permalink to &quot;RxJSの利点&quot;">​</a></h2><table tabindex="0"><thead><tr><th>利点</th><th>内容</th></tr></thead><tbody><tr><td>宣言的コード<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></td><td><code>map</code>, <code>filter</code> などで「何をしたいか」を記述し、forループなどの手続き的記述を避けられる</td></tr><tr><td>非同期処理の単純化</td><td><code>Promise</code> やコールバックのネストを避け、直感的な流れで書ける</td></tr><tr><td>エラー処理</td><td><code>.pipe(catchError(...))</code> などでストリーム中のエラーを統一的に処理可能</td></tr><tr><td>キャンセル可能</td><td><code>Subscription.unsubscribe()</code> によりストリームの中断が可能</td></tr><tr><td>多様なオペレーター</td><td><code>debounceTime</code>, <code>mergeMap</code>, <code>combineLatest</code> など多数の演算子で変換や合成が可能</td></tr></tbody></table><h2 id="ユースケース" tabindex="-1">ユースケース <a class="header-anchor" href="#ユースケース" aria-label="Permalink to &quot;ユースケース&quot;">​</a></h2><p>RxJSは「時間とともに変化するデータ」を扱うあらゆる場面で活躍します。以下に主要な活用分野を紹介します。</p><h3 id="リアルタイム通信・ストリーミング" tabindex="-1">リアルタイム通信・ストリーミング <a class="header-anchor" href="#リアルタイム通信・ストリーミング" aria-label="Permalink to &quot;リアルタイム通信・ストリーミング&quot;">​</a></h3><p>WebSocketやServer-Sent Events(SSE)などのリアルタイム通信を扱う場合、RxJSは特に強力です。</p><table tabindex="0"><thead><tr><th>用途</th><th>説明</th><th>主要なオペレーター</th></tr></thead><tbody><tr><td>WebSocket通信</td><td>チャット、通知、株価更新など</td><td><a href="./../operators/"><code>webSocket</code></a>, <a href="./../operators/filtering/filter.html"><code>filter</code></a>, <a href="./../operators/transformation/map.html"><code>map</code></a></td></tr><tr><td>Server-Sent Events</td><td>サーバーからのプッシュ通知</td><td><a href="./../observables/events.html"><code>fromEvent</code></a>, <a href="./../operators/utility/retry.html"><code>retry</code></a></td></tr><tr><td>IoTセンサー監視</td><td>連続的なセンサーデータの処理</td><td><a href="./../operators/filtering/debounceTime.html"><code>debounceTime</code></a>, <a href="./../operators/filtering/distinctUntilChanged.html"><code>distinctUntilChanged</code></a></td></tr></tbody></table><h4 id="簡単な例" tabindex="-1">簡単な例 <a class="header-anchor" href="#簡単な例" aria-label="Permalink to &quot;簡単な例&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { webSocket } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs/webSocket&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { filter } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs/operators&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> socket$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> webSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wss://example.com/chat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;新着:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg.text));</span></span></code></pre></div><h3 id="ui-状態管理・フォーム制御" tabindex="-1">UI/状態管理・フォーム制御 <a class="header-anchor" href="#ui-状態管理・フォーム制御" aria-label="Permalink to &quot;UI/状態管理・フォーム制御&quot;">​</a></h3><p>ユーザー入力や状態の変化をリアクティブに扱うことができます。</p><table tabindex="0"><thead><tr><th>用途</th><th>説明</th><th>主要なオペレーター</th></tr></thead><tbody><tr><td>入力フォームの制御</td><td>検索補完、リアルタイムバリデーション</td><td><a href="./../operators/filtering/debounceTime.html"><code>debounceTime</code></a>, <a href="./../operators/filtering/distinctUntilChanged.html"><code>distinctUntilChanged</code></a>, <a href="./../operators/transformation/switchMap.html"><code>switchMap</code></a></td></tr><tr><td>複数フォーム項目の連携</td><td>依存する入力項目の更新</td><td><a href="./../creation-functions/combineLatest.html"><code>combineLatest</code></a>, <a href="./../operators/combination/withLatestFrom.html"><code>withLatestFrom</code></a></td></tr><tr><td>コンポーネント間通信</td><td>イベントバスやカスタム状態管理</td><td><a href="./../subjects/what-is-subject.html"><code>Subject</code></a>, <a href="./../operators/multicasting/share.html"><code>share</code></a></td></tr><tr><td>UIイベント処理</td><td>クリック、スクロール、ドラッグ&amp;ドロップ</td><td><a href="./../observables/events.html"><code>fromEvent</code></a>, <a href="./../operators/utility/takeUntil.html"><code>takeUntil</code></a></td></tr></tbody></table><h4 id="簡単な例-1" tabindex="-1">簡単な例 <a class="header-anchor" href="#簡単な例-1" aria-label="Permalink to &quot;簡単な例&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fromEvent, combineLatest } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { debounceTime, map, switchMap } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs/operators&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> searchInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#search&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sortSelect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#sort&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> search$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(searchInput, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sort$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sortSelect, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;change&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLSelectElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">combineLatest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([search$, sort$]).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  debounceTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  switchMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(([</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`/api/search?q=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">query</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&amp;sort=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">order</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">results</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(results));</span></span></code></pre></div><h3 id="オフライン対応・pwa" tabindex="-1">オフライン対応・PWA <a class="header-anchor" href="#オフライン対応・pwa" aria-label="Permalink to &quot;オフライン対応・PWA&quot;">​</a></h3><p>Progressive Web App（PWA）でのオフライン対応やネットワーク状態管理に活用できます。</p><table tabindex="0"><thead><tr><th>用途</th><th>説明</th><th>主要なオペレーター</th></tr></thead><tbody><tr><td>ネットワーク状態監視</td><td>オンライン/オフライン検出</td><td><a href="./../observables/events.html"><code>fromEvent</code></a>, <a href="./../creation-functions/merge.html"><code>merge</code></a></td></tr><tr><td>オフライン時の再試行</td><td>接続復帰時の自動再同期</td><td><a href="./../operators/utility/retry.html"><code>retry</code></a>, <a href="./../error-handling/retry-catch.html"><code>retryWhen</code></a></td></tr><tr><td>キャッシュ制御</td><td>Service Workerとの連携</td><td><a href="./../operators/transformation/switchMap.html"><code>switchMap</code></a>, <a href="./../error-handling/retry-catch.html"><code>catchError</code></a></td></tr></tbody></table><h4 id="簡単な例-2" tabindex="-1">簡単な例 <a class="header-anchor" href="#簡単な例-2" aria-label="Permalink to &quot;簡単な例&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fromEvent, merge } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { map, startWith } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs/operators&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> online$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;online&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> offline$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;offline&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(online$, offline$).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  startWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navigator.onLine)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">isOnline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isOnline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;オンライン&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;オフライン&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="ai-ストリーミングapi" tabindex="-1">AI/ストリーミングAPI <a class="header-anchor" href="#ai-ストリーミングapi" aria-label="Permalink to &quot;AI/ストリーミングAPI&quot;">​</a></h3><p>OpenAIなどのストリーミングAPIレスポンスを扱う場合にも最適です。</p><table tabindex="0"><thead><tr><th>用途</th><th>説明</th><th>主要なオペレーター</th></tr></thead><tbody><tr><td>トークン逐次出力</td><td>AIレスポンスのリアルタイム表示</td><td><a href="./../operators/transformation/concatMap.html"><code>concatMap</code></a>, <a href="./../operators/transformation/scan.html"><code>scan</code></a></td></tr><tr><td>ストリーミング処理</td><td>Server-Sent Eventsの処理</td><td><a href="./../observables/events.html"><code>fromEvent</code></a>, <a href="./../operators/transformation/map.html"><code>map</code></a></td></tr><tr><td>バックエンド統合</td><td>NestJS（RxJS標準搭載）での利用</td><td>各種オペレーター</td></tr></tbody></table><h3 id="http通信とエラー処理" tabindex="-1">HTTP通信とエラー処理 <a class="header-anchor" href="#http通信とエラー処理" aria-label="Permalink to &quot;HTTP通信とエラー処理&quot;">​</a></h3><p>非同期HTTP通信をエレガントに扱えます。</p><table tabindex="0"><thead><tr><th>用途</th><th>説明</th><th>主要なオペレーター</th></tr></thead><tbody><tr><td>APIリクエスト</td><td>RESTful APIとの通信</td><td><a href="./../operators/transformation/switchMap.html"><code>switchMap</code></a>, <a href="./../operators/transformation/mergeMap.html"><code>mergeMap</code></a></td></tr><tr><td>エラーハンドリング</td><td>リトライやフォールバック</td><td><a href="./../error-handling/retry-catch.html"><code>catchError</code></a>, <a href="./../operators/utility/retry.html"><code>retry</code></a></td></tr><tr><td>タイムアウト制御</td><td>応答時間の制限</td><td><a href="./../operators/utility/timeout.html"><code>timeout</code></a></td></tr><tr><td>キャンセル</td><td>不要なリクエストの中断</td><td><a href="./../operators/utility/takeUntil.html"><code>takeUntil</code></a>, <code>unsubscribe()</code></td></tr></tbody></table><h3 id="状態管理・アーキテクチャ" tabindex="-1">状態管理・アーキテクチャ <a class="header-anchor" href="#状態管理・アーキテクチャ" aria-label="Permalink to &quot;状態管理・アーキテクチャ&quot;">​</a></h3><p>アプリケーション全体のアーキテクチャ設計にも活用できます。</p><table tabindex="0"><thead><tr><th>用途</th><th>説明</th><th>主要なオペレーター</th></tr></thead><tbody><tr><td>状態管理ライブラリ</td><td>NgRx、Redux-Observableなど</td><td><a href="./../operators/transformation/scan.html"><code>scan</code></a>, <a href="./../operators/multicasting/share.html"><code>share</code></a></td></tr><tr><td>イベントフロー管理</td><td>DDD（ドメイン駆動設計）での活用</td><td><a href="./../subjects/what-is-subject.html"><code>Subject</code></a>, <a href="./../operators/multicasting/shareReplay.html"><code>shareReplay</code></a></td></tr><tr><td>データレイヤー分離</td><td>クリーンアーキテクチャ</td><td>各種オペレーター</td></tr></tbody></table><hr><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>PromiseとRxJSの使い分けについては、<a href="./promise-vs-rxjs.html">PromiseとRxJSの違い</a>も参照してください。</p></div><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><p>RxJSは、非同期およびイベントベースのプログラミングに対する強力なアプローチを提供します。Observableを中心としたデータストリームの考え方は、複雑な非同期処理を扱う際に特に役立ちます。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Subjectは、値を発行するObservableであると同時に、値を受け取るObserverとしても振る舞える特殊な存在です。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>Schedulerは、非同期処理の実行タイミングやコンテキストを制御するために使われ、デバッグやパフォーマンス管理にも役立ちます。 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><blockquote><ul><li>宣言的コード: 「どういう結果が欲しいのか」を素直に書くコード</li><li>手続き的コード: 「どういう計算を行っていけば欲しい結果が手に入るのか」を書くコード</li></ul></blockquote><a href="#fnref3" class="footnote-backref">↩︎</a></li></ol></section>`,34))])}const f=h(o,[["render",E]]);export{u as __pageData,f as default};
