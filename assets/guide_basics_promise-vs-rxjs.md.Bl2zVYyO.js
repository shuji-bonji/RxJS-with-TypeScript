import{_ as s,c as i,o as t,a2 as e}from"./chunks/framework.BvXV5w7a.js";const v=JSON.parse('{"title":"PromiseとRxJSの違い","description":"PromiseとRxJSの違いを理解し、適切な使い分けを学びます。単一の非同期処理にはPromise、複雑なストリーム処理にはRxJSが適しています。","frontmatter":{"description":"PromiseとRxJSの違いを理解し、適切な使い分けを学びます。単一の非同期処理にはPromise、複雑なストリーム処理にはRxJSが適しています。"},"headers":[],"relativePath":"guide/basics/promise-vs-rxjs.md","filePath":"guide/basics/promise-vs-rxjs.md"}'),n={name:"guide/basics/promise-vs-rxjs.md"};function h(d,a,l,k,p,b){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="promiseとrxjsの違い" tabindex="-1" data-v-227e338b>PromiseとRxJSの違い <a class="header-anchor" href="#promiseとrxjsの違い" aria-label="Permalink to &quot;PromiseとRxJSの違い&quot;" data-v-227e338b>​</a></h1><h2 id="概要" tabindex="-1" data-v-227e338b>概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;" data-v-227e338b>​</a></h2><p data-v-227e338b>JavaScript/TypeScriptにおける非同期処理を扱う主要なツールとして、 <strong data-v-227e338b>Promise</strong>と<strong data-v-227e338b>RxJS（Observable）</strong> があります。両者は似た目的で使用されることがありますが、設計思想とユースケースが大きく異なります。</p><p data-v-227e338b>このページでは、PromiseとRxJSの違いを理解し、どちらを使うべきかを判断するための情報を提供します。</p><h2 id="基本的な違い" tabindex="-1" data-v-227e338b>基本的な違い <a class="header-anchor" href="#基本的な違い" aria-label="Permalink to &quot;基本的な違い&quot;" data-v-227e338b>​</a></h2><table tabindex="0" data-v-227e338b><thead data-v-227e338b><tr data-v-227e338b><th data-v-227e338b>項目</th><th data-v-227e338b>Promise</th><th data-v-227e338b>RxJS (Observable)</th></tr></thead><tbody data-v-227e338b><tr data-v-227e338b><td data-v-227e338b><strong data-v-227e338b>標準化</strong></td><td data-v-227e338b>JavaScript標準（ES6/ES2015）</td><td data-v-227e338b>サードパーティライブラリ</td></tr><tr data-v-227e338b><td data-v-227e338b><strong data-v-227e338b>発行する値</strong></td><td data-v-227e338b>単一の値</td><td data-v-227e338b>0個以上の複数の値</td></tr><tr data-v-227e338b><td data-v-227e338b><strong data-v-227e338b>評価</strong></td><td data-v-227e338b>Eager（作成時に即実行）</td><td data-v-227e338b>Lazy（購読時に実行）</td></tr><tr data-v-227e338b><td data-v-227e338b><strong data-v-227e338b>キャンセル</strong></td><td data-v-227e338b>不可<sup class="footnote-ref" data-v-227e338b><a href="#fn1" id="fnref1" data-v-227e338b>[1]</a></sup></td><td data-v-227e338b>可（<code data-v-227e338b>unsubscribe()</code>）</td></tr><tr data-v-227e338b><td data-v-227e338b><strong data-v-227e338b>再利用</strong></td><td data-v-227e338b>不可（結果は1度だけ）</td><td data-v-227e338b>可（何度でも購読可能）</td></tr><tr data-v-227e338b><td data-v-227e338b><strong data-v-227e338b>学習コスト</strong></td><td data-v-227e338b>低い</td><td data-v-227e338b>高い（オペレーターの理解が必要）</td></tr><tr data-v-227e338b><td data-v-227e338b><strong data-v-227e338b>ユースケース</strong></td><td data-v-227e338b>単一の非同期処理</td><td data-v-227e338b>複雑なストリーム処理</td></tr></tbody></table><h2 id="コード比較" tabindex="-1" data-v-227e338b>コード比較 <a class="header-anchor" href="#コード比較" aria-label="Permalink to &quot;コード比較&quot;" data-v-227e338b>​</a></h2><h3 id="単一の非同期処理" tabindex="-1" data-v-227e338b>単一の非同期処理 <a class="header-anchor" href="#単一の非同期処理" aria-label="Permalink to &quot;単一の非同期処理&quot;" data-v-227e338b>​</a></h3><h4 id="promise" tabindex="-1" data-v-227e338b>Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;" data-v-227e338b>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-227e338b><button title="Copy Code" class="copy" data-v-227e338b></button><span class="lang" data-v-227e338b>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-227e338b><code data-v-227e338b><span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// Promiseは作成時に即実行される（Eager）</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>)</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>())</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(data))</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(error));</span></span></code></pre></div><h4 id="rxjs" tabindex="-1" data-v-227e338b>RxJS <a class="header-anchor" href="#rxjs" aria-label="Permalink to &quot;RxJS&quot;" data-v-227e338b>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-227e338b><button title="Copy Code" class="copy" data-v-227e338b></button><span class="lang" data-v-227e338b>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-227e338b><code data-v-227e338b><span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> { from } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>;</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> { map, catchError } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>;</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> { of } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>;</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// Observableは購読するまで実行されない（Lazy）</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> observable$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>()),</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  catchError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(error);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  })</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// 購読して初めて実行される</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>observable$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(data));</span></span></code></pre></div><h3 id="複数の値を扱う場合" tabindex="-1" data-v-227e338b>複数の値を扱う場合 <a class="header-anchor" href="#複数の値を扱う場合" aria-label="Permalink to &quot;複数の値を扱う場合&quot;" data-v-227e338b>​</a></h3><h4 id="promiseでは不可能" tabindex="-1" data-v-227e338b>Promiseでは不可能 <a class="header-anchor" href="#promiseでは不可能" aria-label="Permalink to &quot;Promiseでは不可能&quot;" data-v-227e338b>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-227e338b><button title="Copy Code" class="copy" data-v-227e338b></button><span class="lang" data-v-227e338b>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-227e338b><code data-v-227e338b><span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// Promiseは単一の値しか返せない</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// この値は無視される</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// この値も無視される</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>});</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>promise.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(value));</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// 出力: 1（最初の値のみ）</span></span></code></pre></div><h4 id="rxjsでは可能" tabindex="-1" data-v-227e338b>RxJSでは可能 <a class="header-anchor" href="#rxjsでは可能" aria-label="Permalink to &quot;RxJSでは可能&quot;" data-v-227e338b>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-227e338b><button title="Copy Code" class="copy" data-v-227e338b></button><span class="lang" data-v-227e338b>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-227e338b><code data-v-227e338b><span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> { Observable } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>;</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// Observableは複数の値を発行できる</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> observable$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> Observable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>subscriber</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>complete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>();</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>});</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>observable$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(value));</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// 出力: 1, 2, 3</span></span></code></pre></div><h2 id="キャンセルの比較" tabindex="-1" data-v-227e338b>キャンセルの比較 <a class="header-anchor" href="#キャンセルの比較" aria-label="Permalink to &quot;キャンセルの比較&quot;" data-v-227e338b>​</a></h2><h3 id="promise-キャンセル不可" tabindex="-1" data-v-227e338b>Promise（キャンセル不可） <a class="header-anchor" href="#promise-キャンセル不可" aria-label="Permalink to &quot;Promise（キャンセル不可）&quot;" data-v-227e338b>​</a></h3><div class="language-ts vp-adaptive-theme" data-v-227e338b><button title="Copy Code" class="copy" data-v-227e338b></button><span class="lang" data-v-227e338b>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-227e338b><code data-v-227e338b><span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;完了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>});</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>promise.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(result));</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// この処理をキャンセルする標準的な方法はない</span></span></code></pre></div><h3 id="rxjs-キャンセル可能" tabindex="-1" data-v-227e338b>RxJS（キャンセル可能） <a class="header-anchor" href="#rxjs-キャンセル可能" aria-label="Permalink to &quot;RxJS（キャンセル可能）&quot;" data-v-227e338b>​</a></h3><div class="language-ts vp-adaptive-theme" data-v-227e338b><button title="Copy Code" class="copy" data-v-227e338b></button><span class="lang" data-v-227e338b>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-227e338b><code data-v-227e338b><span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> { timer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>;</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> subscription</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> timer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;完了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>)</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// 1秒後にキャンセル</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  subscription.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// キャンセル</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;キャンセルしました&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// 出力: キャンセルしました（「完了」は出力されない）</span></span></code></pre></div><h2 id="どちらを選ぶべきか" tabindex="-1" data-v-227e338b>どちらを選ぶべきか <a class="header-anchor" href="#どちらを選ぶべきか" aria-label="Permalink to &quot;どちらを選ぶべきか&quot;" data-v-227e338b>​</a></h2><h3 id="promiseを選ぶべき場合" tabindex="-1" data-v-227e338b>Promiseを選ぶべき場合 <a class="header-anchor" href="#promiseを選ぶべき場合" aria-label="Permalink to &quot;Promiseを選ぶべき場合&quot;" data-v-227e338b>​</a></h3><p data-v-227e338b>以下の条件に当てはまる場合は、Promiseが適しています。</p><table tabindex="0" data-v-227e338b><thead data-v-227e338b><tr data-v-227e338b><th data-v-227e338b>条件</th><th data-v-227e338b>理由</th></tr></thead><tbody data-v-227e338b><tr data-v-227e338b><td data-v-227e338b>単一の非同期処理</td><td data-v-227e338b>APIリクエスト1回、ファイル読み込み1回など</td></tr><tr data-v-227e338b><td data-v-227e338b>シンプルなワークフロー</td><td data-v-227e338b><code data-v-227e338b>Promise.all</code>, <code data-v-227e338b>Promise.race</code>で十分</td></tr><tr data-v-227e338b><td data-v-227e338b>小規模プロジェクト</td><td data-v-227e338b>依存関係を最小限にしたい</td></tr><tr data-v-227e338b><td data-v-227e338b>標準APIのみ使用</td><td data-v-227e338b>外部ライブラリを避けたい</td></tr><tr data-v-227e338b><td data-v-227e338b>初心者向けコード</td><td data-v-227e338b>学習コストを抑えたい</td></tr></tbody></table><h4 id="具体例" tabindex="-1" data-v-227e338b>具体例 <a class="header-anchor" href="#具体例" aria-label="Permalink to &quot;具体例&quot;" data-v-227e338b>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-227e338b><button title="Copy Code" class="copy" data-v-227e338b></button><span class="lang" data-v-227e338b>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-227e338b><code data-v-227e338b><span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// 単一のAPIリクエスト</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> getUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>userId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>&gt; {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>\`/api/users/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>userId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>response.ok) {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;ユーザーデータの取得に失敗しました&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  }</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>();</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>}</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// 複数の非同期処理を並列実行</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> loadAllData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>&lt;[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>[], </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>Post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>[]]&gt; {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>users</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>posts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>([</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>    fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;/api/users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>()),</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>    fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;/api/posts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>())</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  ]);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> [users, posts];</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>}</span></span></code></pre></div><h3 id="rxjsを選ぶべき場合" tabindex="-1" data-v-227e338b>RxJSを選ぶべき場合 <a class="header-anchor" href="#rxjsを選ぶべき場合" aria-label="Permalink to &quot;RxJSを選ぶべき場合&quot;" data-v-227e338b>​</a></h3><p data-v-227e338b>以下の条件に当てはまる場合は、RxJSが適しています。</p><table tabindex="0" data-v-227e338b><thead data-v-227e338b><tr data-v-227e338b><th data-v-227e338b>条件</th><th data-v-227e338b>理由</th></tr></thead><tbody data-v-227e338b><tr data-v-227e338b><td data-v-227e338b>連続的なイベント処理</td><td data-v-227e338b>マウス移動、キーボード入力、WebSocketなど</td></tr><tr data-v-227e338b><td data-v-227e338b>複雑なストリーム処理</td><td data-v-227e338b>複数のイベントソースの結合や変換</td></tr><tr data-v-227e338b><td data-v-227e338b>キャンセルが必要</td><td data-v-227e338b>リソース管理を細かく制御したい</td></tr><tr data-v-227e338b><td data-v-227e338b>リトライ・タイムアウト</td><td data-v-227e338b>エラー処理を柔軟に行いたい</td></tr><tr data-v-227e338b><td data-v-227e338b>Angularプロジェクト</td><td data-v-227e338b>RxJSがフレームワークに統合されている</td></tr><tr data-v-227e338b><td data-v-227e338b>リアルタイムデータ</td><td data-v-227e338b>データが継続的に更新される</td></tr></tbody></table><h4 id="具体例-1" tabindex="-1" data-v-227e338b>具体例 <a class="header-anchor" href="#具体例-1" aria-label="Permalink to &quot;具体例&quot;" data-v-227e338b>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-227e338b><button title="Copy Code" class="copy" data-v-227e338b></button><span class="lang" data-v-227e338b>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-227e338b><code data-v-227e338b><span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> { fromEvent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>;</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> { debounceTime, map, distinctUntilChanged, switchMap } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>;</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// リアルタイム検索（オートコンプリート）</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// ※ この例では事前に&lt;input id=&quot;search&quot;&gt;要素がHTMLに存在することを前提としています</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> searchInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;#search&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>searchInput) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;検索入力欄が見つかりません&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(searchInput, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> (event.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>).value),</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  debounceTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>),              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// 300ms待ってから処理</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  distinctUntilChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(),         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// 値が変わった時だけ処理</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  switchMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>              // 最新のリクエストのみ実行</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>    fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>\`/api/search?q=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>query</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>())</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  )</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>results</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;検索結果:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>, results);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>});</span></span></code></pre></div><p data-v-227e338b>この処理をPromiseだけで実装するのは非常に困難です。</p><h2 id="promiseとrxjsの相互運用" tabindex="-1" data-v-227e338b>PromiseとRxJSの相互運用 <a class="header-anchor" href="#promiseとrxjsの相互運用" aria-label="Permalink to &quot;PromiseとRxJSの相互運用&quot;" data-v-227e338b>​</a></h2><p data-v-227e338b>PromiseとRxJSは相互に変換できます。</p><h3 id="promiseをobservableに変換" tabindex="-1" data-v-227e338b>PromiseをObservableに変換 <a class="header-anchor" href="#promiseをobservableに変換" aria-label="Permalink to &quot;PromiseをObservableに変換&quot;" data-v-227e338b>​</a></h3><div class="language-ts vp-adaptive-theme" data-v-227e338b><button title="Copy Code" class="copy" data-v-227e338b></button><span class="lang" data-v-227e338b>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-227e338b><code data-v-227e338b><span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> { from } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>;</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// Promiseを作成</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>)</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>());</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// from()でObservableに変換</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> observable$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(promise);</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>observable$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>({</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;データ:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>, data),</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;エラー:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>, error),</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  complete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;完了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>)</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>});</span></span></code></pre></div><h3 id="observableをpromiseに変換" tabindex="-1" data-v-227e338b>ObservableをPromiseに変換 <a class="header-anchor" href="#observableをpromiseに変換" aria-label="Permalink to &quot;ObservableをPromiseに変換&quot;" data-v-227e338b>​</a></h3><div class="language-ts vp-adaptive-theme" data-v-227e338b><button title="Copy Code" class="copy" data-v-227e338b></button><span class="lang" data-v-227e338b>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-227e338b><code data-v-227e338b><span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> { of, firstValueFrom, lastValueFrom } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>;</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> { delay } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>;</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> observable$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>));</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// 最初の値をPromiseとして取得</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> firstValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> firstValueFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(observable$);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(firstValue); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// 1</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// 最後の値をPromiseとして取得</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> lastValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> lastValueFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(observable$);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(lastValue); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// 3</span></span></code></pre></div><div class="warning custom-block github-alert" data-v-227e338b><p class="custom-block-title" data-v-227e338b>WARNING</p><p data-v-227e338b><code data-v-227e338b>toPromise()</code>は非推奨です。代わりに<code data-v-227e338b>firstValueFrom()</code>または<code data-v-227e338b>lastValueFrom()</code>を使用してください。</p></div><h2 id="実践例-両者を組み合わせる" tabindex="-1" data-v-227e338b>実践例：両者を組み合わせる <a class="header-anchor" href="#実践例-両者を組み合わせる" aria-label="Permalink to &quot;実践例：両者を組み合わせる&quot;" data-v-227e338b>​</a></h2><p data-v-227e338b>実際のアプリケーションでは、PromiseとRxJSを組み合わせて使用することが一般的です。</p><div class="language-ts vp-adaptive-theme" data-v-227e338b><button title="Copy Code" class="copy" data-v-227e338b></button><span class="lang" data-v-227e338b>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-227e338b><code data-v-227e338b><span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> { fromEvent, from } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>;</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> { debounceTime, switchMap, catchError } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>;</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> { of } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>;</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> SearchResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>  items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>[];</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>}</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// Promise ベースのAPI関数</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> searchAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>SearchResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>&gt; {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>\`/api/search?q=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>query</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>response.ok) {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;検索に失敗しました&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  }</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>();</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>}</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// RxJSでイベントストリームを管理</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// ※ この例では事前に&lt;input id=&quot;search&quot;&gt;要素がHTMLに存在することを前提としています</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> searchInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;#search&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>searchInput) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;検索入力欄が見つかりません&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>);</span></span>
<span class="line" data-v-227e338b></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(searchInput, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  debounceTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b>300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>),</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  switchMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-227e338b> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> (event.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>).value;</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>    // Promise関数をObservableに変換</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>searchAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(query));</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  }),</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>  catchError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(error);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b>    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>({ items: [] }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-227e338b>// エラー時は空の結果を返す</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  })</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-227e338b>result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-227e338b> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b> {</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-227e338b>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-227e338b>&#39;検索結果:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>, result.items);</span></span>
<span class="line" data-v-227e338b><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-227e338b>});</span></span></code></pre></div><h4 id="この例では" tabindex="-1" data-v-227e338b>この例では <a class="header-anchor" href="#この例では" aria-label="Permalink to &quot;この例では&quot;" data-v-227e338b>​</a></h4><ul data-v-227e338b><li data-v-227e338b>RxJSがユーザー入力イベントの制御を担当（debounce、switchMapなど）</li><li data-v-227e338b>Promise（async/await）がHTTPリクエストを担当</li><li data-v-227e338b><code data-v-227e338b>from()</code>で両者を橋渡し</li></ul><h2 id="メリットとデメリット" tabindex="-1" data-v-227e338b>メリットとデメリット <a class="header-anchor" href="#メリットとデメリット" aria-label="Permalink to &quot;メリットとデメリット&quot;" data-v-227e338b>​</a></h2><h3 id="promise-1" tabindex="-1" data-v-227e338b>Promise <a class="header-anchor" href="#promise-1" aria-label="Permalink to &quot;Promise&quot;" data-v-227e338b>​</a></h3><div class="comparison-cards" data-v-227e338b><div class="tip custom-block" data-v-227e338b><p class="custom-block-title" data-v-227e338b>メリット</p><ul data-v-227e338b><li data-v-227e338b>JavaScript標準のため依存関係不要</li><li data-v-227e338b><code data-v-227e338b>async/await</code>により直感的で読みやすいコード</li><li data-v-227e338b>学習コストが低い</li><li data-v-227e338b>単一タスクの処理がシンプル</li></ul></div><div class="danger custom-block" data-v-227e338b><p class="custom-block-title" data-v-227e338b>デメリット</p><ul data-v-227e338b><li data-v-227e338b>複数の値を扱えない</li><li data-v-227e338b>キャンセル機能がない</li><li data-v-227e338b>連続的なストリーム処理には不向き</li><li data-v-227e338b>複雑なイベント処理が困難</li></ul></div></div><h3 id="rxjs-1" tabindex="-1" data-v-227e338b>RxJS <a class="header-anchor" href="#rxjs-1" aria-label="Permalink to &quot;RxJS&quot;" data-v-227e338b>​</a></h3><div class="comparison-cards" data-v-227e338b><div class="tip custom-block" data-v-227e338b><p class="custom-block-title" data-v-227e338b>メリット</p><ul data-v-227e338b><li data-v-227e338b>複数の値を時系列で扱える</li><li data-v-227e338b>豊富なオペレーターで複雑な処理が可能</li><li data-v-227e338b>キャンセル（<code data-v-227e338b>unsubscribe</code>）が簡単</li><li data-v-227e338b>エラー処理やリトライを柔軟に実装可能</li><li data-v-227e338b>宣言的でテストしやすい</li></ul></div><div class="danger custom-block" data-v-227e338b><p class="custom-block-title" data-v-227e338b>デメリット</p><ul data-v-227e338b><li data-v-227e338b>学習コストが高い</li><li data-v-227e338b>ライブラリへの依存が必要</li><li data-v-227e338b>オーバーヘッドがある（小規模プロジェクトでは過剰）</li><li data-v-227e338b>デバッグが難しい場合がある</li></ul></div></div><h2 id="rxjsが特に活躍する分野" tabindex="-1" data-v-227e338b>RxJSが特に活躍する分野 <a class="header-anchor" href="#rxjsが特に活躍する分野" aria-label="Permalink to &quot;RxJSが特に活躍する分野&quot;" data-v-227e338b>​</a></h2><p data-v-227e338b>RxJSは以下のような分野で特に強力です。Promiseだけでは実現が困難な複雑な要件を、エレガントに解決できます。</p><table tabindex="0" data-v-227e338b><thead data-v-227e338b><tr data-v-227e338b><th data-v-227e338b>分野</th><th data-v-227e338b>具体例</th><th data-v-227e338b>Promiseとの比較</th></tr></thead><tbody data-v-227e338b><tr data-v-227e338b><td data-v-227e338b><strong data-v-227e338b>リアルタイム通信</strong></td><td data-v-227e338b>WebSocket、SSE、チャット、株価更新</td><td data-v-227e338b>Promiseは単発の通信のみ。連続的なメッセージ処理には不向き</td></tr><tr data-v-227e338b><td data-v-227e338b><strong data-v-227e338b>ユーザー入力制御</strong></td><td data-v-227e338b>検索オートコンプリート、フォームバリデーション</td><td data-v-227e338b>debounce、distinctUntilChangedなどが標準装備</td></tr><tr data-v-227e338b><td data-v-227e338b><strong data-v-227e338b>複数ソースの結合</strong></td><td data-v-227e338b>検索条件×ソート順×フィルタの組み合わせ</td><td data-v-227e338b>combineLatest、withLatestFromで簡潔に記述可能</td></tr><tr data-v-227e338b><td data-v-227e338b><strong data-v-227e338b>オフライン対応</strong></td><td data-v-227e338b>PWA、ネットワーク状態監視、自動再同期</td><td data-v-227e338b>retry、retryWhenで柔軟なリトライ制御</td></tr><tr data-v-227e338b><td data-v-227e338b><strong data-v-227e338b>ストリーミングAPI</strong></td><td data-v-227e338b>OpenAI、AI応答のトークン逐次出力</td><td data-v-227e338b>連続データをリアルタイムで処理可能</td></tr><tr data-v-227e338b><td data-v-227e338b><strong data-v-227e338b>キャンセル制御</strong></td><td data-v-227e338b>長時間処理の中断、古いリクエストの破棄</td><td data-v-227e338b>unsubscribe()で即座にキャンセル可能</td></tr></tbody></table><div class="note custom-block github-alert" data-v-227e338b><p class="custom-block-title" data-v-227e338b>NOTE</p><p data-v-227e338b>RxJSの活用分野の詳細は、<a href="./what-is-rxjs.html#ユースケース" data-v-227e338b>RxJSとは何か - ユースケース</a>も参照してください。</p></div><h2 id="まとめ" tabindex="-1" data-v-227e338b>まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;" data-v-227e338b>​</a></h2><table tabindex="0" data-v-227e338b><thead data-v-227e338b><tr data-v-227e338b><th data-v-227e338b>目的</th><th data-v-227e338b>推奨</th></tr></thead><tbody data-v-227e338b><tr data-v-227e338b><td data-v-227e338b>単一のHTTPリクエスト</td><td data-v-227e338b>Promise（<code data-v-227e338b>async/await</code>）</td></tr><tr data-v-227e338b><td data-v-227e338b>ユーザー入力イベントの処理</td><td data-v-227e338b>RxJS</td></tr><tr data-v-227e338b><td data-v-227e338b>リアルタイムデータ（WebSocket）</td><td data-v-227e338b>RxJS</td></tr><tr data-v-227e338b><td data-v-227e338b>複数の非同期処理の並列実行</td><td data-v-227e338b>Promise（<code data-v-227e338b>Promise.all</code>）</td></tr><tr data-v-227e338b><td data-v-227e338b>連続的なイベントストリーム</td><td data-v-227e338b>RxJS</td></tr><tr data-v-227e338b><td data-v-227e338b>キャンセル可能な処理</td><td data-v-227e338b>RxJS</td></tr><tr data-v-227e338b><td data-v-227e338b>シンプルなアプリケーション</td><td data-v-227e338b>Promise</td></tr><tr data-v-227e338b><td data-v-227e338b>Angularアプリケーション</td><td data-v-227e338b>RxJS</td></tr></tbody></table><h3 id="基本方針" tabindex="-1" data-v-227e338b>基本方針 <a class="header-anchor" href="#基本方針" aria-label="Permalink to &quot;基本方針&quot;" data-v-227e338b>​</a></h3><ul data-v-227e338b><li data-v-227e338b><strong data-v-227e338b>シンプルに済むならPromise</strong>を使う</li><li data-v-227e338b><strong data-v-227e338b>複雑なストリーム処理が必要ならRxJS</strong>を使う</li><li data-v-227e338b><strong data-v-227e338b>両方を組み合わせる</strong>のも有効（<code data-v-227e338b>from()</code>で橋渡し）</li></ul><p data-v-227e338b>RxJSは強力ですが、すべての非同期処理にRxJSを使う必要はありません。適切なツールを適切な場面で使い分けることが重要です。</p><hr class="footnotes-sep" data-v-227e338b><section class="footnotes" data-v-227e338b><ol class="footnotes-list" data-v-227e338b><li id="fn1" class="footnote-item" data-v-227e338b><p data-v-227e338b>AbortControllerを使えばPromiseベースの処理（fetchなど）のキャンセルは可能ですが、Promise自体の仕様にキャンセル機能はありません。 <a href="#fnref1" class="footnote-backref" data-v-227e338b>↩︎</a></p></li></ol></section>`,62)]))}const E=s(n,[["render",h],["__scopeId","data-v-227e338b"]]);export{v as __pageData,E as default};
