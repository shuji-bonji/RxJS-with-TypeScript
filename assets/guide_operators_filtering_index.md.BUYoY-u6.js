import{_ as e,c as l,o as a,a2 as d}from"./chunks/framework.BvXV5w7a.js";const o=JSON.parse('{"title":"フィルタリングオペレーター","description":"RxJSのフィルタリングオペレーターは、条件や時間をもとにストリームから必要なデータのみを抽出するために使用され、パフォーマンス向上に貢献します。","frontmatter":{"description":"RxJSのフィルタリングオペレーターは、条件や時間をもとにストリームから必要なデータのみを抽出するために使用され、パフォーマンス向上に貢献します。"},"headers":[],"relativePath":"guide/operators/filtering/index.md","filePath":"guide/operators/filtering/index.md"}'),i={name:"guide/operators/filtering/index.md"};function r(n,t,s,h,f,x){return a(),l("div",null,t[0]||(t[0]=[d('<h1 id="フィルタリングオペレーター" tabindex="-1">フィルタリングオペレーター <a class="header-anchor" href="#フィルタリングオペレーター" aria-label="Permalink to &quot;フィルタリングオペレーター&quot;">​</a></h1><p>RxJSのフィルタリングオペレーターは、ストリームから必要なデータだけを選び取り、不要なデータを流さないための重要なツールです。<br> これにより、アプリケーションの効率やパフォーマンスが大幅に向上します。</p><p>フィルタリングオペレーターは、ストリーム内の値を選別して、特定の条件を満たすもののみを通過させるRxJSの演算子群です。<br> データの流れを制御し、必要な値だけを処理することで、効率的なデータ処理パイプラインを構築できます。</p><h2 id="演算子一覧" tabindex="-1">演算子一覧 <a class="header-anchor" href="#演算子一覧" aria-label="Permalink to &quot;演算子一覧&quot;">​</a></h2><h3 id="◾-基本的なフィルタリングオペレーター" tabindex="-1">◾ 基本的なフィルタリングオペレーター <a class="header-anchor" href="#◾-基本的なフィルタリングオペレーター" aria-label="Permalink to &quot;◾ 基本的なフィルタリングオペレーター&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">オペレーター</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./filter.html">filter</a></td><td style="text-align:left;">条件に合致する値だけを通過させる</td></tr><tr><td style="text-align:left;"><a href="./take.html">take</a></td><td style="text-align:left;">最初の指定数の値だけを取得する</td></tr><tr><td style="text-align:left;"><a href="./takeLast.html">takeLast</a></td><td style="text-align:left;">最後の指定数の値を取得する</td></tr><tr><td style="text-align:left;"><a href="./takeWhile.html">takeWhile</a></td><td style="text-align:left;">条件を満たす間値を取得する</td></tr><tr><td style="text-align:left;"><a href="./skip.html">skip</a></td><td style="text-align:left;">最初の指定数の値をスキップする</td></tr><tr><td style="text-align:left;"><a href="./skipLast.html">skipLast</a></td><td style="text-align:left;">最後の指定数の値をスキップする</td></tr><tr><td style="text-align:left;"><a href="./skipWhile.html">skipWhile</a></td><td style="text-align:left;">条件を満たす間値をスキップする</td></tr><tr><td style="text-align:left;"><a href="./skipUntil.html">skipUntil</a></td><td style="text-align:left;">別のObservableが発火するまで値をスキップする</td></tr><tr><td style="text-align:left;"><a href="./first.html">first</a></td><td style="text-align:left;">最初の値、または条件を満たす最初の値を取得する</td></tr><tr><td style="text-align:left;"><a href="./last.html">last</a></td><td style="text-align:left;">最後の値、または条件を満たす最後の値を取得する</td></tr><tr><td style="text-align:left;"><a href="./elementAt.html">elementAt</a></td><td style="text-align:left;">指定されたインデックスの値を取得する</td></tr><tr><td style="text-align:left;"><a href="./find.html">find</a></td><td style="text-align:left;">条件を満たす最初の値を見つける</td></tr><tr><td style="text-align:left;"><a href="./findIndex.html">findIndex</a></td><td style="text-align:left;">条件を満たす最初の値のインデックスを取得する</td></tr><tr><td style="text-align:left;"><a href="./ignoreElements.html">ignoreElements</a></td><td style="text-align:left;">すべての値を無視して完了/エラーのみ通す</td></tr></tbody></table><h3 id="◾-時間ベースのフィルタリングオペレーター" tabindex="-1">◾ 時間ベースのフィルタリングオペレーター <a class="header-anchor" href="#◾-時間ベースのフィルタリングオペレーター" aria-label="Permalink to &quot;◾ 時間ベースのフィルタリングオペレーター&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">オペレーター</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./debounceTime.html">debounceTime</a></td><td style="text-align:left;">指定時間入力がない場合に最後の値を発行する</td></tr><tr><td style="text-align:left;"><a href="./throttleTime.html">throttleTime</a></td><td style="text-align:left;">最初の値を通し、指定時間は新しい値を無視する</td></tr><tr><td style="text-align:left;"><a href="./auditTime.html">auditTime</a></td><td style="text-align:left;">指定時間後に最後の値を発行する</td></tr><tr><td style="text-align:left;"><a href="./audit.html">audit</a></td><td style="text-align:left;">カスタムObservableで期間を制御して最後の値を発行する</td></tr><tr><td style="text-align:left;"><a href="./sampleTime.html">sampleTime</a></td><td style="text-align:left;">指定時間間隔で最新値をサンプリングする</td></tr></tbody></table><h3 id="◾-条件ベースのフィルタリングオペレーター" tabindex="-1">◾ 条件ベースのフィルタリングオペレーター <a class="header-anchor" href="#◾-条件ベースのフィルタリングオペレーター" aria-label="Permalink to &quot;◾ 条件ベースのフィルタリングオペレーター&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">オペレーター</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./distinct.html">distinct</a></td><td style="text-align:left;">すべての重複値を除去する（ユニークな値のみ出力）</td></tr><tr><td style="text-align:left;"><a href="./distinctUntilChanged.html">distinctUntilChanged</a></td><td style="text-align:left;">連続した重複値を除去する</td></tr><tr><td style="text-align:left;"><a href="./distinctUntilKeyChanged.html">distinctUntilKeyChanged</a></td><td style="text-align:left;">特定プロパティの変更のみ検出する</td></tr></tbody></table><h2 id="実践的なユースケース" tabindex="-1">実践的なユースケース <a class="header-anchor" href="#実践的なユースケース" aria-label="Permalink to &quot;実践的なユースケース&quot;">​</a></h2><ul><li><a href="./practical-use-cases.html">実用的なユースケース</a>では、複数のフィルタリングオペレーターを組み合わせた実践例（リアルタイム検索、無限スクロールなど）を紹介しています。</li></ul>',12)]))}const y=e(i,[["render",r]]);export{o as __pageData,y as default};
