import{_ as s,c as a,o as t,a2 as n}from"./chunks/framework.BvXV5w7a.js";const c=JSON.parse('{"title":"Creation Functions","description":"RxJSのCreation Functions（Observable作成関数）について、Pipeable Operatorとの違い、基本的な使い方、7つのカテゴリ（基本作成系・ループ生成系・HTTP通信系・結合系・選択分割系・条件分岐系・制御系）を網羅的に解説します。","frontmatter":{"description":"RxJSのCreation Functions（Observable作成関数）について、Pipeable Operatorとの違い、基本的な使い方、7つのカテゴリ（基本作成系・ループ生成系・HTTP通信系・結合系・選択分割系・条件分岐系・制御系）を網羅的に解説します。"},"headers":[],"relativePath":"guide/creation-functions/index.md","filePath":"guide/creation-functions/index.md"}'),e={name:"guide/creation-functions/index.md"};function h(r,i,p,l,o,k){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="creation-functions" tabindex="-1">Creation Functions <a class="header-anchor" href="#creation-functions" aria-label="Permalink to &quot;Creation Functions&quot;">​</a></h1><p>RxJSでは、Observableを作成するための<strong>Creation Functions</strong>と、既存のObservableを変換する<strong>Pipeable Operators</strong>という2つの異なる形式があります。</p><p>このページでは、Creation Functionsの基本概念と、3つの主要なカテゴリについて解説します。</p><h2 id="creation-functions-とは" tabindex="-1">Creation Functions とは <a class="header-anchor" href="#creation-functions-とは" aria-label="Permalink to &quot;Creation Functions とは&quot;">​</a></h2><p><strong>Creation Functions</strong>は、新しいObservableを作成するための関数です。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { of, from, interval } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creation Functionとして使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs1$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs2$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs3$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>これらは<code>rxjs</code>パッケージから直接インポートし、関数として呼び出してObservableを生成します。</p><h2 id="pipeable-operator-との違い" tabindex="-1">Pipeable Operator との違い <a class="header-anchor" href="#pipeable-operator-との違い" aria-label="Permalink to &quot;Pipeable Operator との違い&quot;">​</a></h2><p>Creation FunctionsとPipeable Operatorsは、用途と使い方が異なります。以下の表で両者の違いを確認してください。</p><table tabindex="0"><thead><tr><th>特徴</th><th>Creation Function</th><th>Pipeable Operator</th></tr></thead><tbody><tr><td><strong>用途</strong></td><td>新しいObservableを作成</td><td>既存のObservableを変換</td></tr><tr><td><strong>インポート元</strong></td><td><code>rxjs</code></td><td><code>rxjs/operators</code></td></tr><tr><td><strong>使用方法</strong></td><td>関数として直接呼び出し</td><td><code>.pipe()</code> 内で使用</td></tr><tr><td><strong>例</strong></td><td><code>concat(obs1$, obs2$)</code></td><td><code>obs1$.pipe(concatWith(obs2$))</code></td></tr></tbody></table><h3 id="creation-function-の例" tabindex="-1">Creation Function の例 <a class="header-anchor" href="#creation-function-の例" aria-label="Permalink to &quot;Creation Function の例&quot;">​</a></h3><p>Creation Functionは、複数のObservableを直接結合する際に使用します。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { concat, of } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs1$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs2$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creation Function として使用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obs1$, obs2$).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: 1, 2, 3, 4, 5, 6</span></span></code></pre></div><h3 id="pipeable-operator-の例" tabindex="-1">Pipeable Operator の例 <a class="header-anchor" href="#pipeable-operator-の例" aria-label="Permalink to &quot;Pipeable Operator の例&quot;">​</a></h3><p>Pipeable Operatorは、既存のObservableに対して変換処理を追加する際に使用します。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { of } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { concatWith } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs1$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs2$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Pipeable Operator として使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs1$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  concatWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obs2$)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: 1, 2, 3, 4, 5, 6</span></span></code></pre></div><h2 id="使い分けの基準" tabindex="-1">使い分けの基準 <a class="header-anchor" href="#使い分けの基準" aria-label="Permalink to &quot;使い分けの基準&quot;">​</a></h2><p>Creation FunctionとPipeable Operatorの選択は、以下の基準で判断します。</p><h3 id="creation-function-を使うべき場合" tabindex="-1">Creation Function を使うべき場合 <a class="header-anchor" href="#creation-function-を使うべき場合" aria-label="Permalink to &quot;Creation Function を使うべき場合&quot;">​</a></h3><p>Creation Functionは、複数のObservableを同じレベルで操作する場合や、最初からObservableを作成する場合に適しています。</p><ul><li><p><strong>複数のObservableを同じレベルで結合する場合</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obs1$, obs2$, obs3$)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(click$, hover$, scroll$)</span></span></code></pre></div></li><li><p><strong>最初からObservableを作成する場合</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul><h3 id="pipeable-operator-を使うべき場合" tabindex="-1">Pipeable Operator を使うべき場合 <a class="header-anchor" href="#pipeable-operator-を使うべき場合" aria-label="Permalink to &quot;Pipeable Operator を使うべき場合&quot;">​</a></h3><p>Pipeable Operatorは、既存のObservableに処理を追加する場合や、複数の操作を連鎖させる場合に適しています。</p><ul><li><p><strong>既存のObservableに処理を追加する場合</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs1$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  concatWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obs2$),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><strong>パイプラインとして複数の操作を連鎖させる場合</strong></p></li></ul><h2 id="creation-functions-のカテゴリ" tabindex="-1">Creation Functions のカテゴリ <a class="header-anchor" href="#creation-functions-のカテゴリ" aria-label="Permalink to &quot;Creation Functions のカテゴリ&quot;">​</a></h2><p>この章では、Creation Functionsを7つのカテゴリに分けて学習します。</p><h3 id="全カテゴリ一覧" tabindex="-1">全カテゴリ一覧 <a class="header-anchor" href="#全カテゴリ一覧" aria-label="Permalink to &quot;全カテゴリ一覧&quot;">​</a></h3><p>以下の表で、すべてのカテゴリと含まれる関数を確認できます。各関数名をクリックすると詳細ページに移動します。</p><table tabindex="0"><thead><tr><th>カテゴリ</th><th>説明</th><th>主要な関数</th><th>代表的なユースケース</th></tr></thead><tbody><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/basic/">基本作成系</a></strong></td><td>最も基本的で頻繁に使用される関数。データ、配列、イベント、時間ベースのObservableを作成</td><td><a href="/RxJS-with-TypeScript/guide/creation-functions/basic/of.html">of</a>, <a href="/RxJS-with-TypeScript/guide/creation-functions/basic/from.html">from</a>, <a href="/RxJS-with-TypeScript/guide/creation-functions/basic/fromEvent.html">fromEvent</a>, <a href="/RxJS-with-TypeScript/guide/creation-functions/basic/interval.html">interval</a>, <a href="/RxJS-with-TypeScript/guide/creation-functions/basic/timer.html">timer</a></td><td>固定値のテスト、既存データのストリーム化、DOMイベント処理、ポーリング、遅延実行</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/loop/">ループ生成系</a></strong></td><td>for文やwhile文のようなループ処理をObservableで表現</td><td><a href="/RxJS-with-TypeScript/guide/creation-functions/loop/range.html">range</a>, <a href="/RxJS-with-TypeScript/guide/creation-functions/loop/generate.html">generate</a></td><td>連番生成、バッチ処理、複雑な状態遷移、数学的計算</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/http-communication/">HTTP通信系</a></strong></td><td>HTTP通信をObservableとして扱う</td><td><a href="/RxJS-with-TypeScript/guide/creation-functions/http-communication/ajax.html">ajax</a>, <a href="/RxJS-with-TypeScript/guide/creation-functions/http-communication/fromFetch.html">fromFetch</a></td><td>XMLHttpRequestベースのHTTP通信、Fetch APIベースのHTTP通信、REST API呼び出し</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/combination/">結合系</a></strong></td><td>複数のObservableを1つに結合。結合方法によって発行タイミングや順序が異なる</td><td><a href="/RxJS-with-TypeScript/guide/creation-functions/combination/concat.html">concat</a>, <a href="/RxJS-with-TypeScript/guide/creation-functions/combination/merge.html">merge</a>, <a href="/RxJS-with-TypeScript/guide/creation-functions/combination/combineLatest.html">combineLatest</a>, <a href="/RxJS-with-TypeScript/guide/creation-functions/combination/zip.html">zip</a>, <a href="/RxJS-with-TypeScript/guide/creation-functions/combination/forkJoin.html">forkJoin</a></td><td>ステップバイステップ処理、複数イベントの統合、フォーム入力の同期、並列API呼び出しの完了待ち</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/selection/">選択・分割系</a></strong></td><td>複数のObservableから1つを選択、または1つのObservableを複数に分割</td><td><a href="/RxJS-with-TypeScript/guide/creation-functions/selection/race.html">race</a>, <a href="/RxJS-with-TypeScript/guide/creation-functions/selection/partition.html">partition</a></td><td>複数データソースの競争、成功/失敗の分岐処理</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/conditional/">条件分岐系</a></strong></td><td>条件に基づいてObservableを選択、または購読時に動的に生成</td><td><a href="/RxJS-with-TypeScript/guide/creation-functions/conditional/iif.html">iif</a>, <a href="/RxJS-with-TypeScript/guide/creation-functions/conditional/defer.html">defer</a></td><td>ログイン状態による処理分岐、動的なObservable作成、遅延評価</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/control/">制御系</a></strong></td><td>Observableの実行タイミングやリソース管理を制御</td><td><a href="/RxJS-with-TypeScript/guide/creation-functions/control/scheduled.html">scheduled</a>, <a href="/RxJS-with-TypeScript/guide/creation-functions/control/using.html">using</a></td><td>スケジューラーによる実行タイミング制御、リソースのライフサイクル管理、メモリリーク防止</td></tr></tbody></table><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p><strong>学習の順序</strong></p><p>初学者は以下の順序で学習することをお勧めします。</p><ol><li><strong>基本作成系</strong> - RxJSの基本となる関数</li><li><strong>結合系</strong> - 複数のストリームを扱う基礎</li><li><strong>HTTP通信系</strong> - 実践的なAPI連携</li><li>その他のカテゴリ - 必要に応じて学習</li></ol></div><h2 id="pipeable-operator-との対応関係" tabindex="-1">Pipeable Operator との対応関係 <a class="header-anchor" href="#pipeable-operator-との対応関係" aria-label="Permalink to &quot;Pipeable Operator との対応関係&quot;">​</a></h2><p>多くのCreation Functionsには、対応するPipeable Operatorが存在します。パイプラインの中で使用する場合は、<code>~With</code>系のオペレーターを使います。</p><table tabindex="0"><thead><tr><th>Creation Function</th><th>Pipeable Operator</th><th>備考</th></tr></thead><tbody><tr><td><code>concat(a$, b$)</code></td><td><code>a$.pipe(</code><strong><a href="/RxJS-with-TypeScript/guide/operators/combination/concatWith.html">concatWith</a></strong><code>(b$))</code></td><td>RxJS 7+</td></tr><tr><td><code>merge(a$, b$)</code></td><td><code>a$.pipe(</code><strong><a href="/RxJS-with-TypeScript/guide/operators/combination/mergeWith.html">mergeWith</a></strong><code>(b$))</code></td><td>RxJS 7+</td></tr><tr><td><code>zip(a$, b$)</code></td><td><code>a$.pipe(</code><strong><a href="/RxJS-with-TypeScript/guide/operators/combination/zipWith.html">zipWith</a></strong><code>(b$))</code></td><td>RxJS 7+</td></tr><tr><td><code>combineLatest([a$, b$])</code></td><td><code>a$.pipe(</code><strong><a href="/RxJS-with-TypeScript/guide/operators/combination/combineLatestWith.html">combineLatestWith</a></strong><code>(b$))</code></td><td>RxJS 7+</td></tr><tr><td><code>race(a$, b$)</code></td><td><code>a$.pipe(</code><strong><a href="/RxJS-with-TypeScript/guide/operators/combination/raceWith.html">raceWith</a></strong><code>(b$))</code></td><td>RxJS 7+</td></tr></tbody></table><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>RxJS 7以降、<strong><a href="/RxJS-with-TypeScript/guide/operators/combination/concatWith.html">concatWith</a></strong>, <strong><a href="/RxJS-with-TypeScript/guide/operators/combination/mergeWith.html">mergeWith</a></strong>, <strong><a href="/RxJS-with-TypeScript/guide/operators/combination/zipWith.html">zipWith</a></strong>, <strong><a href="/RxJS-with-TypeScript/guide/operators/combination/combineLatestWith.html">combineLatestWith</a></strong>, <strong><a href="/RxJS-with-TypeScript/guide/operators/combination/raceWith.html">raceWith</a></strong> などの<code>~With</code>系オペレーターが追加され、Pipeable Operatorとしても使いやすくなりました。</p></div><h2 id="どちらを使うべきか" tabindex="-1">どちらを使うべきか？ <a class="header-anchor" href="#どちらを使うべきか" aria-label="Permalink to &quot;どちらを使うべきか？&quot;">​</a></h2><p>Creation FunctionとPipeable Operatorの選択は、コンテキストによって異なります。</p><h3 id="creation-function-を推奨" tabindex="-1">Creation Function を推奨 <a class="header-anchor" href="#creation-function-を推奨" aria-label="Permalink to &quot;Creation Function を推奨&quot;">​</a></h3><p>複数のObservableを同じレベルで操作する場合は、Creation Functionを使うことでコードが簡潔になります。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ 複数のObservableを同じレベルで結合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> combined$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(button1, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(button2, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(button3, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="pipeable-operator-を推奨" tabindex="-1">Pipeable Operator を推奨 <a class="header-anchor" href="#pipeable-operator-を推奨" aria-label="Permalink to &quot;Pipeable Operator を推奨&quot;">​</a></h3><p>パイプラインの一部として操作を追加する場合は、Pipeable Operatorを使うことで処理の流れが明確になります。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ パイプラインの一部として結合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mergeWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(other$),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><ul><li><strong>Creation Functions</strong>: Observableを作成したり、結合する関数</li><li><strong>Pipeable Operators</strong>: 既存のObservableを変換する関数</li><li>Creation Functionsは7つのカテゴリに分類される <ol><li><strong>基本作成系</strong>: データ、配列、イベント、時間ベースのObservableを作成</li><li><strong>ループ生成系</strong>: 繰り返し処理をObservableで表現</li><li><strong>HTTP通信系</strong>: HTTP通信をObservableとして扱う</li><li><strong>結合系</strong>: 複数を1つにまとめる</li><li><strong>選択・分割系</strong>: 選択または分割する</li><li><strong>条件分岐系</strong>: 条件に応じて動的に生成する</li><li><strong>制御系</strong>: 実行タイミングやリソース管理を制御</li></ol></li><li>パイプラインの中では<code>~With</code>系のPipeable Operatorを使う</li><li>各カテゴリには複数の関数が含まれ、用途に応じて使い分ける</li></ul><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>各カテゴリの詳細を学ぶには、以下のリンクから進んでください。</p><ol><li><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/basic/">基本作成系 Creation Functions</a></strong> - of, from, fromEvent, interval, timer</li><li><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/loop/">ループ生成系 Creation Functions</a></strong> - range, generate</li><li><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/http-communication/">HTTP通信系 Creation Functions</a></strong> - ajax, fromFetch</li><li><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/combination/">結合系 Creation Functions</a></strong> - concat, merge, combineLatest, zip, forkJoin</li><li><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/selection/">選択・分割系 Creation Functions</a></strong> - race, partition</li><li><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/conditional/">条件分岐系 Creation Functions</a></strong> - iif, defer</li><li><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/control/">制御系 Creation Functions</a></strong> - scheduled, using</li></ol><p>各ページで、Creation Functionの詳細な動作と実践例を学ぶことができます。</p><h2 id="参考リソース" tabindex="-1">参考リソース <a class="header-anchor" href="#参考リソース" aria-label="Permalink to &quot;参考リソース&quot;">​</a></h2><ul><li><a href="https://rxjs.dev/guide/operators#creation-operators-list" target="_blank" rel="noreferrer">RxJS公式ドキュメント - Creation Functions</a></li><li><a href="https://www.learnrxjs.io/learn-rxjs/operators/creation" target="_blank" rel="noreferrer">Learn RxJS - Creation Operators</a></li></ul>`,50)]))}const g=s(e,[["render",h]]);export{c as __pageData,g as default};
