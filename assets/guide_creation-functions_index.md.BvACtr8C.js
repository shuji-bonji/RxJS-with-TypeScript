import{_ as i,c as a,o as t,a2 as n}from"./chunks/framework.BvXV5w7a.js";const c=JSON.parse('{"title":"Creation Functions - Observableの作成と結合","description":"RxJSのCreation Functions（Observable作成関数）について、Pipeable Operatorとの違い、基本的な使い方、結合系Creation Functionsを網羅的に解説します。","frontmatter":{"description":"RxJSのCreation Functions（Observable作成関数）について、Pipeable Operatorとの違い、基本的な使い方、結合系Creation Functionsを網羅的に解説します。"},"headers":[],"relativePath":"guide/creation-functions/index.md","filePath":"guide/creation-functions/index.md"}'),e={name:"guide/creation-functions/index.md"};function h(p,s,l,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="creation-functions-observableの作成と結合" tabindex="-1">Creation Functions - Observableの作成と結合 <a class="header-anchor" href="#creation-functions-observableの作成と結合" aria-label="Permalink to &quot;Creation Functions - Observableの作成と結合&quot;">​</a></h1><p>RxJSでは、Observableを作成するための<strong>Creation Functions</strong>と、既存のObservableを変換する<strong>Pipeable Operators</strong>という2つの異なる形式があります。</p><p>このページでは、Creation Functionsの基本概念と、代表的な結合系Creation Functionsについて解説します。</p><h2 id="creation-functions-とは" tabindex="-1">Creation Functions とは <a class="header-anchor" href="#creation-functions-とは" aria-label="Permalink to &quot;Creation Functions とは&quot;">​</a></h2><p><strong>Creation Functions</strong>は、新しいObservableを作成するための関数です。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { of, from, interval } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creation Functionとして使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs1$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs2$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs3$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>これらは<code>rxjs</code>パッケージから直接インポートし、関数として呼び出してObservableを生成します。</p><h2 id="pipeable-operator-との違い" tabindex="-1">Pipeable Operator との違い <a class="header-anchor" href="#pipeable-operator-との違い" aria-label="Permalink to &quot;Pipeable Operator との違い&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特徴</th><th>Creation Function</th><th>Pipeable Operator</th></tr></thead><tbody><tr><td><strong>用途</strong></td><td>新しいObservableを作成</td><td>既存のObservableを変換</td></tr><tr><td><strong>インポート元</strong></td><td><code>rxjs</code></td><td><code>rxjs/operators</code></td></tr><tr><td><strong>使用方法</strong></td><td>関数として直接呼び出し</td><td><code>.pipe()</code> 内で使用</td></tr><tr><td><strong>例</strong></td><td><code>concat(obs1$, obs2$)</code></td><td><code>obs1$.pipe(concatWith(obs2$))</code></td></tr></tbody></table><h3 id="creation-function-の例" tabindex="-1">Creation Function の例 <a class="header-anchor" href="#creation-function-の例" aria-label="Permalink to &quot;Creation Function の例&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { concat, of } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs1$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs2$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creation Function として使用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obs1$, obs2$).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: 1, 2, 3, 4, 5, 6</span></span></code></pre></div><h3 id="pipeable-operator-の例" tabindex="-1">Pipeable Operator の例 <a class="header-anchor" href="#pipeable-operator-の例" aria-label="Permalink to &quot;Pipeable Operator の例&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { of } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { concatWith } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs/operators&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs1$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs2$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Pipeable Operator として使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs1$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  concatWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obs2$)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: 1, 2, 3, 4, 5, 6</span></span></code></pre></div><h2 id="使い分けの基準" tabindex="-1">使い分けの基準 <a class="header-anchor" href="#使い分けの基準" aria-label="Permalink to &quot;使い分けの基準&quot;">​</a></h2><h3 id="creation-function-を使うべき場合" tabindex="-1">Creation Function を使うべき場合 <a class="header-anchor" href="#creation-function-を使うべき場合" aria-label="Permalink to &quot;Creation Function を使うべき場合&quot;">​</a></h3><ul><li><p><strong>複数のObservableを同じレベルで結合する場合</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obs1$, obs2$, obs3$)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(click$, hover$, scroll$)</span></span></code></pre></div></li><li><p><strong>最初からObservableを作成する場合</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul><h3 id="pipeable-operator-を使うべき場合" tabindex="-1">Pipeable Operator を使うべき場合 <a class="header-anchor" href="#pipeable-operator-を使うべき場合" aria-label="Permalink to &quot;Pipeable Operator を使うべき場合&quot;">​</a></h3><ul><li><p><strong>既存のObservableに処理を追加する場合</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs1$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  concatWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obs2$),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><strong>パイプラインとして複数の操作を連鎖させる場合</strong></p></li></ul><h2 id="基本的な-creation-functions-復習" tabindex="-1">基本的な Creation Functions（復習） <a class="header-anchor" href="#基本的な-creation-functions-復習" aria-label="Permalink to &quot;基本的な Creation Functions（復習）&quot;">​</a></h2><p>2章で学んだ基本的なCreation Functionsを振り返ります。</p><table tabindex="0"><thead><tr><th>Function</th><th>説明</th><th>例</th></tr></thead><tbody><tr><td><code>of</code></td><td>指定した値を順番に発行</td><td><code>of(1, 2, 3)</code></td></tr><tr><td><code>from</code></td><td>配列、Promise等から変換</td><td><code>from([1, 2, 3])</code></td></tr><tr><td><code>interval</code></td><td>指定間隔で連続発行</td><td><code>interval(1000)</code></td></tr><tr><td><code>timer</code></td><td>遅延後に発行開始</td><td><code>timer(1000, 500)</code></td></tr></tbody></table><p>詳細は <a href="/RxJS-with-TypeScript/guide/observables/creation.html">Observableの作成方法</a> を参照してください。</p><h2 id="結合系-creation-functions" tabindex="-1">結合系 Creation Functions <a class="header-anchor" href="#結合系-creation-functions" aria-label="Permalink to &quot;結合系 Creation Functions&quot;">​</a></h2><p>複数のObservableを結合するための主要なCreation Functionsです。</p><table tabindex="0"><thead><tr><th>Function</th><th>説明</th><th>ユースケース</th></tr></thead><tbody><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/concat.html">concat</a></strong></td><td>順次結合（前が完了後、次が開始）</td><td>ステップバイステップ処理</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/merge.html">merge</a></strong></td><td>並行結合（同時購読、発行順に出力）</td><td>複数イベントの統合</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/combineLatest.html">combineLatest</a></strong></td><td>最新値を組み合わせ</td><td>フォーム入力の同期</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/zip.html">zip</a></strong></td><td>対応する値をペア化</td><td>リクエストとレスポンスの対応</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/race.html">race</a></strong></td><td>最初に発行したものを採用</td><td>複数データソースの競争</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/forkJoin.html">forkJoin</a></strong></td><td>すべての完了を待って最終値を結合</td><td>並列API呼び出しの完了待ち</td></tr><tr><td><strong>partition</strong></td><td>条件で2つに分割</td><td>成功/失敗の分岐処理</td></tr></tbody></table><p>各Creation Functionの詳細は、リンクをクリックして参照してください。</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><code>partition</code> のドキュメントは準備中です。</p></div><h2 id="pipeable-operator-との対応関係" tabindex="-1">Pipeable Operator との対応関係 <a class="header-anchor" href="#pipeable-operator-との対応関係" aria-label="Permalink to &quot;Pipeable Operator との対応関係&quot;">​</a></h2><p>多くの結合系Creation Functionsには、対応するPipeable Operatorが存在します。</p><table tabindex="0"><thead><tr><th>Creation Function</th><th>Pipeable Operator</th><th>備考</th></tr></thead><tbody><tr><td><code>concat(a$, b$)</code></td><td><code>a$.pipe(concatWith(b$))</code></td><td>RxJS 7+</td></tr><tr><td><code>merge(a$, b$)</code></td><td><code>a$.pipe(mergeWith(b$))</code></td><td>RxJS 7+</td></tr><tr><td><code>zip(a$, b$)</code></td><td><code>a$.pipe(zipWith(b$))</code></td><td>RxJS 7+</td></tr><tr><td><code>combineLatest([a$, b$])</code></td><td><code>a$.pipe(combineLatestWith(b$))</code></td><td>RxJS 7+</td></tr><tr><td><code>race(a$, b$)</code></td><td><code>a$.pipe(raceWith(b$))</code></td><td>RxJS 7+</td></tr></tbody></table><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>RxJS 7以降、<code>concatWith</code>, <code>mergeWith</code>, <code>zipWith</code>などの<code>~With</code>系オペレーターが追加され、Pipeable Operatorとしても使いやすくなりました。</p></div><h2 id="どちらを使うべきか" tabindex="-1">どちらを使うべきか？ <a class="header-anchor" href="#どちらを使うべきか" aria-label="Permalink to &quot;どちらを使うべきか？&quot;">​</a></h2><h3 id="creation-function-を推奨" tabindex="-1">Creation Function を推奨 <a class="header-anchor" href="#creation-function-を推奨" aria-label="Permalink to &quot;Creation Function を推奨&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ 複数のObservableを同じレベルで結合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> combined$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(button1, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(button2, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(button3, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="pipeable-operator-を推奨" tabindex="-1">Pipeable Operator を推奨 <a class="header-anchor" href="#pipeable-operator-を推奨" aria-label="Permalink to &quot;Pipeable Operator を推奨&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ パイプラインの一部として結合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mergeWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(other$),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><ul><li><strong>Creation Functions</strong>: 新しいObservableを作成する関数</li><li><strong>Pipeable Operators</strong>: 既存のObservableを変換する関数</li><li>結合系Creation Functionsは用途に応じて使い分ける</li><li>パイプラインの中では<code>~With</code>系のPipeable Operatorを使う</li></ul><p>次のセクションでは、各Creation Functionの詳細な使い方と実践例を学びます。</p>`,39)]))}const E=i(e,[["render",h]]);export{c as __pageData,E as default};
