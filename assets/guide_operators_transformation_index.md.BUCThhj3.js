import{_ as a,c as e,o as r,a2 as d}from"./chunks/framework.BvXV5w7a.js";const m=JSON.parse('{"title":"変換オペレーター","description":"RxJSの変換オペレーターを使ってストリーム内のデータを加工・変換する方法を解説します。map、scan、mergeMap、switchMap、concatMapなど単純変換から非同期変換、バッチ処理まで実践的なパターンを紹介します。","frontmatter":{"description":"RxJSの変換オペレーターを使ってストリーム内のデータを加工・変換する方法を解説します。map、scan、mergeMap、switchMap、concatMapなど単純変換から非同期変換、バッチ処理まで実践的なパターンを紹介します。"},"headers":[],"relativePath":"guide/operators/transformation/index.md","filePath":"guide/operators/transformation/index.md"}'),h={name:"guide/operators/transformation/index.md"};function l(i,t,o,n,s,b){return r(),e("div",null,t[0]||(t[0]=[d('<h1 id="変換オペレーター" tabindex="-1">変換オペレーター <a class="header-anchor" href="#変換オペレーター" aria-label="Permalink to &quot;変換オペレーター&quot;">​</a></h1><p>変換オペレーターは、RxJSのパイプライン内でデータを変形・加工するために使用されます。<br> 値を新しい形に変換することで、リアクティブなデータフローをより柔軟かつ強力に制御できるようになります。</p><h2 id="📦-演算子一覧" tabindex="-1">📦 演算子一覧 <a class="header-anchor" href="#📦-演算子一覧" aria-label="Permalink to &quot;📦 演算子一覧&quot;">​</a></h2><h3 id="◾-単純な値の変換" tabindex="-1">◾ 単純な値の変換 <a class="header-anchor" href="#◾-単純な値の変換" aria-label="Permalink to &quot;◾ 単純な値の変換&quot;">​</a></h3><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th></tr></thead><tbody><tr><td><a href="./map.html">map</a></td><td>各値に変換関数を適用</td></tr><tr><td><a href="./pluck.html">pluck</a></td><td>オブジェクトからプロパティを抽出</td></tr><tr><td><a href="./mapTo.html">mapTo</a></td><td>常に固定値を出力</td></tr></tbody></table><h3 id="◾-累積処理" tabindex="-1">◾ 累積処理 <a class="header-anchor" href="#◾-累積処理" aria-label="Permalink to &quot;◾ 累積処理&quot;">​</a></h3><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th></tr></thead><tbody><tr><td><a href="./scan.html">scan</a></td><td>累積的に値を生成</td></tr><tr><td><a href="./reduce.html">reduce</a></td><td>最終的な累積結果のみを出力</td></tr></tbody></table><h3 id="◾-ペア・グループ化処理" tabindex="-1">◾ ペア・グループ化処理 <a class="header-anchor" href="#◾-ペア・グループ化処理" aria-label="Permalink to &quot;◾ ペア・グループ化処理&quot;">​</a></h3><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th></tr></thead><tbody><tr><td><a href="./pairwise.html">pairwise</a></td><td>連続する2つの値をペアで処理</td></tr></tbody></table><h3 id="◾-非同期変換" tabindex="-1">◾ 非同期変換 <a class="header-anchor" href="#◾-非同期変換" aria-label="Permalink to &quot;◾ 非同期変換&quot;">​</a></h3><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th></tr></thead><tbody><tr><td><a href="./mergeMap.html">mergeMap</a></td><td>各値をObservableに変換し、並列で結合</td></tr><tr><td><a href="./switchMap.html">switchMap</a></td><td>最新のObservableに切り替え</td></tr><tr><td><a href="./concatMap.html">concatMap</a></td><td>各Observableを順番に実行</td></tr><tr><td><a href="./exhaustMap.html">exhaustMap</a></td><td>実行中は新しい入力を無視</td></tr></tbody></table><h3 id="◾-バッチ処理" tabindex="-1">◾ バッチ処理 <a class="header-anchor" href="#◾-バッチ処理" aria-label="Permalink to &quot;◾ バッチ処理&quot;">​</a></h3><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th></tr></thead><tbody><tr><td><a href="./buffer.html">buffer</a></td><td>別のObservableのタイミングで値をまとめる</td></tr><tr><td><a href="./bufferTime.html">bufferTime</a></td><td>一定時間ごとに値をまとめる</td></tr><tr><td><a href="./bufferCount.html">bufferCount</a></td><td>指定個数ごとにまとめる</td></tr><tr><td><a href="./windowTime.html">windowTime</a></td><td>一定時間ごとにサブObservableに分割</td></tr></tbody></table><h2 id="💡-実用的な変換パターン" tabindex="-1">💡 実用的な変換パターン <a class="header-anchor" href="#💡-実用的な変換パターン" aria-label="Permalink to &quot;💡 実用的な変換パターン&quot;">​</a></h2><p>現実のアプリケーションでは、変換オペレーターを組み合わせることで<br> 次のような処理が可能になります。</p><ul><li>入力バリデーションとフィードバック</li><li>非同期APIリクエストの最適制御</li><li>データの整形・集約・正規化</li><li>イベントストリームのバッチ処理やグループ化</li></ul><p>👉 詳しくは：<a href="./practical-use-cases.html">実用的な変換パターン</a> を参照してください。</p>',17)]))}const f=a(h,[["render",l]]);export{m as __pageData,f as default};
