import{_ as i,c as a,o as e,a2 as l}from"./chunks/framework.BvXV5w7a.js";const o=JSON.parse('{"title":"Observableとは","description":"","frontmatter":{},"headers":[],"relativePath":"guide/observables/what-is-observable.md","filePath":"guide/observables/what-is-observable.md"}'),h={name:"guide/observables/what-is-observable.md"};function n(t,s,k,p,r,d){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="observableとは" tabindex="-1">Observableとは <a class="header-anchor" href="#observableとは" aria-label="Permalink to &quot;Observableとは&quot;">​</a></h1><p>RxJSにおけるObservableとは、「時間の経過とともに発生するデータの流れ（ストリーム）」を表現する中核的な構成要素です。Observerパターンに基づいて設計されており、非同期処理やイベント駆動の処理を統一的に扱うことができます。</p><h2 id="observableの役割" tabindex="-1">Observableの役割 <a class="header-anchor" href="#observableの役割" aria-label="Permalink to &quot;Observableの役割&quot;">​</a></h2><p>Observableは、複数の値を時間の経過とともに発行する「データの生産者」として機能します。これに対して、Observerが「消費者」となり、<code>subscribe()</code> によって値を購読します。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Observable } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observable$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Observable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">subscriber</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">complete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observable$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;次の値:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;エラー:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  complete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;完了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 次の値: 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 次の値: 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 完了</span></span></code></pre></div><h2 id="通知の種類" tabindex="-1">通知の種類 <a class="header-anchor" href="#通知の種類" aria-label="Permalink to &quot;通知の種類&quot;">​</a></h2><p>Observableは以下の3種類の通知をObserverに送ります。</p><ul><li><code>next</code>: 値の通知</li><li><code>error</code>: エラー発生時の通知（以降の通知は行われない）</li><li><code>complete</code>: 正常終了の通知</li></ul><p>詳しくは、<a href="./observable-lifecycle.html#_2-observer-オブザーバー">「Observableのライフサイクル」の Observer（オブザーバー）</a>のセクションで解説します。</p><h2 id="observableとpromiseの違い" tabindex="-1">ObservableとPromiseの違い <a class="header-anchor" href="#observableとpromiseの違い" aria-label="Permalink to &quot;ObservableとPromiseの違い&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特徴</th><th>Observable</th><th>Promise</th></tr></thead><tbody><tr><td>複数の値</td><td>◯</td><td>×（1つのみ）</td></tr><tr><td>キャンセル可能</td><td>◯（<code>unsubscribe()</code>）</td><td>×</td></tr><tr><td>遅延実行</td><td>◯</td><td>◯</td></tr><tr><td>同期/非同期</td><td>両方</td><td>非同期のみ</td></tr></tbody></table><p>ObservableとPromiseの最大の違いは、「複数の値を扱えるかどうか」と「途中でキャンセルできるかどうか」です。<br> Promiseは1回限りの非同期処理に適していますが、Observableはイベントストリームのような「継続的に発生する非同期データ」に強みがあります。</p><p>また、Observableは<code>unsubscribe()</code>によって購読を途中で解除できるため、メモリリーク防止や不要な通信の停止など、リソース管理の観点でも重要です。</p><p>一方で、Promiseは標準APIに広く採用されており、<code>async/await</code>と組み合わせた直感的な書き方が可能です。用途に応じて使い分けることが望まれます。</p><h2 id="コールドとホットの区別" tabindex="-1">コールドとホットの区別 <a class="header-anchor" href="#コールドとホットの区別" aria-label="Permalink to &quot;コールドとホットの区別&quot;">​</a></h2><p>RxJSのObservableには「コールド」と「ホット」の2種類があります。</p><ul><li><strong>コールドObservable</strong>：各サブスクライバーが独自のデータストリームを持ち、購読したときに実行が開始されます。（例：<code>of()</code>, <code>from()</code>, <code>ajax()</code>）</li><li><strong>ホットObservable</strong>：サブスクライバーが同一のデータストリームを共有し、購読の有無に関わらずデータが流れ続けます。（例：<code>fromEvent()</code>, <code>Subject</code>）</li></ul><p>この区別はデータ共有とリソース効率に大きく影響します。<br> 詳しくは<a href="./cold-and-hot-observables.html">「コールドObservableとホットObservable」</a>のセクションで解説します。</p><h2 id="observableとパイプライン" tabindex="-1">Observableとパイプライン <a class="header-anchor" href="#observableとパイプライン" aria-label="Permalink to &quot;Observableとパイプライン&quot;">​</a></h2><p>Observableの真価は<code>pipe()</code>メソッドを使ってオペレーターと組み合わせることで発揮されます：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { of } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { map, filter } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs/operators&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> numbers$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 偶数のみ通過</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 10倍に変換</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: 20, 40</span></span></code></pre></div><h2 id="observableのライフサイクル" tabindex="-1">Observableのライフサイクル <a class="header-anchor" href="#observableのライフサイクル" aria-label="Permalink to &quot;Observableのライフサイクル&quot;">​</a></h2><p>Observableは以下のライフサイクルを持ちます。</p><ol><li><strong>作成</strong> - Observableインスタンスの生成</li><li><strong>購読</strong> - <code>subscribe()</code>によるデータ受信の開始</li><li><strong>実行</strong> - データの発行(<code>next</code>)、エラー(<code>error</code>)、または完了(<code>complete</code>)</li><li><strong>解除</strong> - <code>unsubscribe()</code>による購読の終了</li></ol><p>リソースリークを防ぐためには、不要になったObservableの購読を解除することが重要です。<br> 詳しくは<a href="./observable-lifecycle.html">「Observableのライフサイクル」</a>のセクションで解説します。</p><h2 id="observableの使いどころ" tabindex="-1">Observableの使いどころ <a class="header-anchor" href="#observableの使いどころ" aria-label="Permalink to &quot;Observableの使いどころ&quot;">​</a></h2><ul><li>UIイベント（クリック、スクロール、キーボード操作など）</li><li>HTTPリクエスト</li><li>時間ベースの処理（インターバルやタイマー）</li><li>WebSocketやリアルタイム通信</li><li>アプリケーション状態管理</li></ul><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><p>Observableは、非同期データの扱いを柔軟かつ統一的に行うための基盤です。ReactiveX（RxJS）の中心的な概念として、複雑な非同期処理やイベントストリームを簡潔に表現できます。</p>`,29)]))}const b=i(h,[["render",n]]);export{o as __pageData,b as default};
