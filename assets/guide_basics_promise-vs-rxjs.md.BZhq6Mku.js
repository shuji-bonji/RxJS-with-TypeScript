import{_ as s,c as i,o as d,a2 as t}from"./chunks/framework.BvXV5w7a.js";const E=JSON.parse('{"title":"PromiseとRxJSの違い","description":"PromiseとRxJSの違いを理解し、適切な使い分けを学びます。単一の非同期処理にはPromise、複雑なストリーム処理にはRxJSが適しています。","frontmatter":{"description":"PromiseとRxJSの違いを理解し、適切な使い分けを学びます。単一の非同期処理にはPromise、複雑なストリーム処理にはRxJSが適しています。"},"headers":[],"relativePath":"guide/basics/promise-vs-rxjs.md","filePath":"guide/basics/promise-vs-rxjs.md"}'),n={name:"guide/basics/promise-vs-rxjs.md"};function h(l,a,k,p,e,r){return d(),i("div",null,a[0]||(a[0]=[t(`<h1 id="promiseとrxjsの違い" tabindex="-1" data-v-6d78862a>PromiseとRxJSの違い <a class="header-anchor" href="#promiseとrxjsの違い" aria-label="Permalink to &quot;PromiseとRxJSの違い&quot;" data-v-6d78862a>​</a></h1><h2 id="概要" tabindex="-1" data-v-6d78862a>概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;" data-v-6d78862a>​</a></h2><p data-v-6d78862a>JavaScript/TypeScriptにおける非同期処理を扱う主要なツールとして、 <strong data-v-6d78862a>Promise</strong>と<strong data-v-6d78862a>RxJS（Observable）</strong> があります。両者は似た目的で使用されることがありますが、設計思想とユースケースが大きく異なります。</p><p data-v-6d78862a>このページでは、PromiseとRxJSの違いを理解し、どちらを使うべきかを判断するための情報を提供します。</p><h2 id="基本的な違い" tabindex="-1" data-v-6d78862a>基本的な違い <a class="header-anchor" href="#基本的な違い" aria-label="Permalink to &quot;基本的な違い&quot;" data-v-6d78862a>​</a></h2><table tabindex="0" data-v-6d78862a><thead data-v-6d78862a><tr data-v-6d78862a><th data-v-6d78862a>項目</th><th data-v-6d78862a>Promise</th><th data-v-6d78862a>RxJS (Observable)</th></tr></thead><tbody data-v-6d78862a><tr data-v-6d78862a><td data-v-6d78862a><strong data-v-6d78862a>標準化</strong></td><td data-v-6d78862a>JavaScript標準（ES6/ES2015）</td><td data-v-6d78862a>サードパーティライブラリ</td></tr><tr data-v-6d78862a><td data-v-6d78862a><strong data-v-6d78862a>発行する値</strong></td><td data-v-6d78862a>単一の値</td><td data-v-6d78862a>0個以上の複数の値</td></tr><tr data-v-6d78862a><td data-v-6d78862a><strong data-v-6d78862a>評価</strong></td><td data-v-6d78862a>Eager（作成時に即実行）</td><td data-v-6d78862a>Lazy（購読時に実行）</td></tr><tr data-v-6d78862a><td data-v-6d78862a><strong data-v-6d78862a>キャンセル</strong></td><td data-v-6d78862a>不可<sup class="footnote-ref" data-v-6d78862a><a href="#fn1" id="fnref1" data-v-6d78862a>[1]</a></sup></td><td data-v-6d78862a>可（<code data-v-6d78862a>unsubscribe()</code>）</td></tr><tr data-v-6d78862a><td data-v-6d78862a><strong data-v-6d78862a>再利用</strong></td><td data-v-6d78862a>不可（結果は1度だけ）</td><td data-v-6d78862a>可（何度でも購読可能）</td></tr><tr data-v-6d78862a><td data-v-6d78862a><strong data-v-6d78862a>学習コスト</strong></td><td data-v-6d78862a>低い</td><td data-v-6d78862a>高い（オペレーターの理解が必要）</td></tr><tr data-v-6d78862a><td data-v-6d78862a><strong data-v-6d78862a>ユースケース</strong></td><td data-v-6d78862a>単一の非同期処理</td><td data-v-6d78862a>複雑なストリーム処理</td></tr></tbody></table><h2 id="コード比較" tabindex="-1" data-v-6d78862a>コード比較 <a class="header-anchor" href="#コード比較" aria-label="Permalink to &quot;コード比較&quot;" data-v-6d78862a>​</a></h2><h3 id="単一の非同期処理" tabindex="-1" data-v-6d78862a>単一の非同期処理 <a class="header-anchor" href="#単一の非同期処理" aria-label="Permalink to &quot;単一の非同期処理&quot;" data-v-6d78862a>​</a></h3><h4 id="promise" tabindex="-1" data-v-6d78862a>Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;" data-v-6d78862a>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-6d78862a><button title="Copy Code" class="copy" data-v-6d78862a></button><span class="lang" data-v-6d78862a>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-6d78862a><code data-v-6d78862a><span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// Promiseは作成時に即実行される（Eager）</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>)</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>())</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(data))</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(error));</span></span></code></pre></div><h4 id="rxjs" tabindex="-1" data-v-6d78862a>RxJS <a class="header-anchor" href="#rxjs" aria-label="Permalink to &quot;RxJS&quot;" data-v-6d78862a>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-6d78862a><button title="Copy Code" class="copy" data-v-6d78862a></button><span class="lang" data-v-6d78862a>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-6d78862a><code data-v-6d78862a><span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> { from } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>;</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> { map, catchError } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>;</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> { of } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>;</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// Observableは購読するまで実行されない（Lazy）</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> observable$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>()),</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  catchError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(error);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  })</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// 購読して初めて実行される</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>observable$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(data));</span></span></code></pre></div><h3 id="複数の値を扱う場合" tabindex="-1" data-v-6d78862a>複数の値を扱う場合 <a class="header-anchor" href="#複数の値を扱う場合" aria-label="Permalink to &quot;複数の値を扱う場合&quot;" data-v-6d78862a>​</a></h3><h4 id="promiseでは不可能" tabindex="-1" data-v-6d78862a>Promiseでは不可能 <a class="header-anchor" href="#promiseでは不可能" aria-label="Permalink to &quot;Promiseでは不可能&quot;" data-v-6d78862a>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-6d78862a><button title="Copy Code" class="copy" data-v-6d78862a></button><span class="lang" data-v-6d78862a>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-6d78862a><code data-v-6d78862a><span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// Promiseは単一の値しか返せない</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// この値は無視される</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// この値も無視される</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>});</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>promise.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(value));</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// 出力: 1（最初の値のみ）</span></span></code></pre></div><h4 id="rxjsでは可能" tabindex="-1" data-v-6d78862a>RxJSでは可能 <a class="header-anchor" href="#rxjsでは可能" aria-label="Permalink to &quot;RxJSでは可能&quot;" data-v-6d78862a>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-6d78862a><button title="Copy Code" class="copy" data-v-6d78862a></button><span class="lang" data-v-6d78862a>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-6d78862a><code data-v-6d78862a><span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> { Observable } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>;</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// Observableは複数の値を発行できる</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> observable$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> Observable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>subscriber</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>complete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>();</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>});</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>observable$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(value));</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// 出力: 1, 2, 3</span></span></code></pre></div><h2 id="キャンセルの比較" tabindex="-1" data-v-6d78862a>キャンセルの比較 <a class="header-anchor" href="#キャンセルの比較" aria-label="Permalink to &quot;キャンセルの比較&quot;" data-v-6d78862a>​</a></h2><h3 id="promise-キャンセル不可" tabindex="-1" data-v-6d78862a>Promise（キャンセル不可） <a class="header-anchor" href="#promise-キャンセル不可" aria-label="Permalink to &quot;Promise（キャンセル不可）&quot;" data-v-6d78862a>​</a></h3><div class="language-ts vp-adaptive-theme" data-v-6d78862a><button title="Copy Code" class="copy" data-v-6d78862a></button><span class="lang" data-v-6d78862a>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-6d78862a><code data-v-6d78862a><span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;完了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>});</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>promise.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(result));</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// この処理をキャンセルする標準的な方法はない</span></span></code></pre></div><h3 id="rxjs-キャンセル可能" tabindex="-1" data-v-6d78862a>RxJS（キャンセル可能） <a class="header-anchor" href="#rxjs-キャンセル可能" aria-label="Permalink to &quot;RxJS（キャンセル可能）&quot;" data-v-6d78862a>​</a></h3><div class="language-ts vp-adaptive-theme" data-v-6d78862a><button title="Copy Code" class="copy" data-v-6d78862a></button><span class="lang" data-v-6d78862a>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-6d78862a><code data-v-6d78862a><span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> { timer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>;</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> subscription</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> timer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;完了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>)</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// 1秒後にキャンセル</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  subscription.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// キャンセル</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;キャンセルしました&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// 出力: キャンセルしました（「完了」は出力されない）</span></span></code></pre></div><h2 id="どちらを選ぶべきか" tabindex="-1" data-v-6d78862a>どちらを選ぶべきか <a class="header-anchor" href="#どちらを選ぶべきか" aria-label="Permalink to &quot;どちらを選ぶべきか&quot;" data-v-6d78862a>​</a></h2><h3 id="promiseを選ぶべき場合" tabindex="-1" data-v-6d78862a>Promiseを選ぶべき場合 <a class="header-anchor" href="#promiseを選ぶべき場合" aria-label="Permalink to &quot;Promiseを選ぶべき場合&quot;" data-v-6d78862a>​</a></h3><p data-v-6d78862a>以下の条件に当てはまる場合は、Promiseが適しています。</p><table tabindex="0" data-v-6d78862a><thead data-v-6d78862a><tr data-v-6d78862a><th data-v-6d78862a>条件</th><th data-v-6d78862a>理由</th></tr></thead><tbody data-v-6d78862a><tr data-v-6d78862a><td data-v-6d78862a>単一の非同期処理</td><td data-v-6d78862a>APIリクエスト1回、ファイル読み込み1回など</td></tr><tr data-v-6d78862a><td data-v-6d78862a>シンプルなワークフロー</td><td data-v-6d78862a><code data-v-6d78862a>Promise.all</code>, <code data-v-6d78862a>Promise.race</code>で十分</td></tr><tr data-v-6d78862a><td data-v-6d78862a>小規模プロジェクト</td><td data-v-6d78862a>依存関係を最小限にしたい</td></tr><tr data-v-6d78862a><td data-v-6d78862a>標準APIのみ使用</td><td data-v-6d78862a>外部ライブラリを避けたい</td></tr><tr data-v-6d78862a><td data-v-6d78862a>初心者向けコード</td><td data-v-6d78862a>学習コストを抑えたい</td></tr></tbody></table><h4 id="具体例" tabindex="-1" data-v-6d78862a>具体例 <a class="header-anchor" href="#具体例" aria-label="Permalink to &quot;具体例&quot;" data-v-6d78862a>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-6d78862a><button title="Copy Code" class="copy" data-v-6d78862a></button><span class="lang" data-v-6d78862a>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-6d78862a><code data-v-6d78862a><span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// 単一のAPIリクエスト</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> getUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>userId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>&gt; {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>\`/api/users/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>userId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>response.ok) {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;ユーザーデータの取得に失敗しました&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  }</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>();</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>}</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// 複数の非同期処理を並列実行</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> loadAllData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>&lt;[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>[], </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>Post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>[]]&gt; {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>users</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>posts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>([</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>    fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;/api/users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>()),</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>    fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;/api/posts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>())</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  ]);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> [users, posts];</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>}</span></span></code></pre></div><h3 id="rxjsを選ぶべき場合" tabindex="-1" data-v-6d78862a>RxJSを選ぶべき場合 <a class="header-anchor" href="#rxjsを選ぶべき場合" aria-label="Permalink to &quot;RxJSを選ぶべき場合&quot;" data-v-6d78862a>​</a></h3><p data-v-6d78862a>以下の条件に当てはまる場合は、RxJSが適しています。</p><table tabindex="0" data-v-6d78862a><thead data-v-6d78862a><tr data-v-6d78862a><th data-v-6d78862a>条件</th><th data-v-6d78862a>理由</th></tr></thead><tbody data-v-6d78862a><tr data-v-6d78862a><td data-v-6d78862a>連続的なイベント処理</td><td data-v-6d78862a>マウス移動、キーボード入力、WebSocketなど</td></tr><tr data-v-6d78862a><td data-v-6d78862a>複雑なストリーム処理</td><td data-v-6d78862a>複数のイベントソースの結合や変換</td></tr><tr data-v-6d78862a><td data-v-6d78862a>キャンセルが必要</td><td data-v-6d78862a>リソース管理を細かく制御したい</td></tr><tr data-v-6d78862a><td data-v-6d78862a>リトライ・タイムアウト</td><td data-v-6d78862a>エラー処理を柔軟に行いたい</td></tr><tr data-v-6d78862a><td data-v-6d78862a>Angularプロジェクト</td><td data-v-6d78862a>RxJSがフレームワークに統合されている</td></tr><tr data-v-6d78862a><td data-v-6d78862a>リアルタイムデータ</td><td data-v-6d78862a>データが継続的に更新される</td></tr></tbody></table><h4 id="具体例-1" tabindex="-1" data-v-6d78862a>具体例 <a class="header-anchor" href="#具体例-1" aria-label="Permalink to &quot;具体例&quot;" data-v-6d78862a>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-6d78862a><button title="Copy Code" class="copy" data-v-6d78862a></button><span class="lang" data-v-6d78862a>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-6d78862a><code data-v-6d78862a><span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> { fromEvent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>;</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> { debounceTime, map, distinctUntilChanged, switchMap } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>;</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// リアルタイム検索（オートコンプリート）</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// ※ この例では事前に&lt;input id=&quot;search&quot;&gt;要素がHTMLに存在することを前提としています</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> searchInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;#search&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>searchInput) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;検索入力欄が見つかりません&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(searchInput, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> (event.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>).value),</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  debounceTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>),              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// 300ms待ってから処理</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  distinctUntilChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(),         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// 値が変わった時だけ処理</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  switchMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>              // 最新のリクエストのみ実行</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>    fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>\`/api/search?q=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>query</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>())</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  )</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>results</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;検索結果:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>, results);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>});</span></span></code></pre></div><p data-v-6d78862a>この処理をPromiseだけで実装するのは非常に困難です。</p><h2 id="promiseとrxjsの相互運用" tabindex="-1" data-v-6d78862a>PromiseとRxJSの相互運用 <a class="header-anchor" href="#promiseとrxjsの相互運用" aria-label="Permalink to &quot;PromiseとRxJSの相互運用&quot;" data-v-6d78862a>​</a></h2><p data-v-6d78862a>PromiseとRxJSは相互に変換できます。</p><h3 id="promiseをobservableに変換" tabindex="-1" data-v-6d78862a>PromiseをObservableに変換 <a class="header-anchor" href="#promiseをobservableに変換" aria-label="Permalink to &quot;PromiseをObservableに変換&quot;" data-v-6d78862a>​</a></h3><div class="language-ts vp-adaptive-theme" data-v-6d78862a><button title="Copy Code" class="copy" data-v-6d78862a></button><span class="lang" data-v-6d78862a>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-6d78862a><code data-v-6d78862a><span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> { from } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>;</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// Promiseを作成</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>)</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>());</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// from()でObservableに変換</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> observable$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(promise);</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>observable$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>({</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;データ:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>, data),</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;エラー:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>, error),</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  complete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;完了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>)</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>});</span></span></code></pre></div><h3 id="observableをpromiseに変換" tabindex="-1" data-v-6d78862a>ObservableをPromiseに変換 <a class="header-anchor" href="#observableをpromiseに変換" aria-label="Permalink to &quot;ObservableをPromiseに変換&quot;" data-v-6d78862a>​</a></h3><div class="language-ts vp-adaptive-theme" data-v-6d78862a><button title="Copy Code" class="copy" data-v-6d78862a></button><span class="lang" data-v-6d78862a>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-6d78862a><code data-v-6d78862a><span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> { of, firstValueFrom, lastValueFrom } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>;</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> { delay } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>;</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> observable$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>));</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// 最初の値をPromiseとして取得</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> firstValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> firstValueFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(observable$);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(firstValue); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// 1</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// 最後の値をPromiseとして取得</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> lastValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> lastValueFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(observable$);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(lastValue); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// 3</span></span></code></pre></div><div class="warning custom-block github-alert" data-v-6d78862a><p class="custom-block-title" data-v-6d78862a>WARNING</p><p data-v-6d78862a><code data-v-6d78862a>toPromise()</code>は非推奨です。代わりに<code data-v-6d78862a>firstValueFrom()</code>または<code data-v-6d78862a>lastValueFrom()</code>を使用してください。</p></div><h2 id="実践例-両者を組み合わせる" tabindex="-1" data-v-6d78862a>実践例：両者を組み合わせる <a class="header-anchor" href="#実践例-両者を組み合わせる" aria-label="Permalink to &quot;実践例：両者を組み合わせる&quot;" data-v-6d78862a>​</a></h2><p data-v-6d78862a>実際のアプリケーションでは、PromiseとRxJSを組み合わせて使用することが一般的です。</p><div class="language-ts vp-adaptive-theme" data-v-6d78862a><button title="Copy Code" class="copy" data-v-6d78862a></button><span class="lang" data-v-6d78862a>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-6d78862a><code data-v-6d78862a><span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> { fromEvent, from } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>;</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> { debounceTime, switchMap, catchError } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>;</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> { of } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>;</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> SearchResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>  items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>[];</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>}</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// Promise ベースのAPI関数</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> searchAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>SearchResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>&gt; {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>\`/api/search?q=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>query</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>response.ok) {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;検索に失敗しました&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  }</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>();</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>}</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// RxJSでイベントストリームを管理</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// ※ この例では事前に&lt;input id=&quot;search&quot;&gt;要素がHTMLに存在することを前提としています</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> searchInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;#search&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>searchInput) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;検索入力欄が見つかりません&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>);</span></span>
<span class="line" data-v-6d78862a></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(searchInput, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  debounceTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a>300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>),</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  switchMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-6d78862a> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> (event.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>).value;</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>    // Promise関数をObservableに変換</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>searchAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(query));</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  }),</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>  catchError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(error);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a>    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>({ items: [] }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-6d78862a>// エラー時は空の結果を返す</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  })</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-6d78862a>result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-6d78862a> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a> {</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-6d78862a>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-6d78862a>&#39;検索結果:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>, result.items);</span></span>
<span class="line" data-v-6d78862a><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-6d78862a>});</span></span></code></pre></div><h4 id="この例では" tabindex="-1" data-v-6d78862a>この例では <a class="header-anchor" href="#この例では" aria-label="Permalink to &quot;この例では&quot;" data-v-6d78862a>​</a></h4><ul data-v-6d78862a><li data-v-6d78862a>RxJSがユーザー入力イベントの制御を担当（debounce、switchMapなど）</li><li data-v-6d78862a>Promise（async/await）がHTTPリクエストを担当</li><li data-v-6d78862a><code data-v-6d78862a>from()</code>で両者を橋渡し</li></ul><div class="warning custom-block github-alert" data-v-6d78862a><p class="custom-block-title" data-v-6d78862a>実務での注意事項</p><p data-v-6d78862a>PromiseとObservableの混在は、<strong data-v-6d78862a>設計の境界を明確にしないとアンチパターンに陥りやすい</strong>です。</p><p data-v-6d78862a><strong data-v-6d78862a>よくある問題：</strong></p><ul data-v-6d78862a><li data-v-6d78862a>キャンセル不能になる</li><li data-v-6d78862a>エラーハンドリングの分離</li><li data-v-6d78862a><code data-v-6d78862a>subscribe</code>内での<code data-v-6d78862a>await</code>（特に危険）</li><li data-v-6d78862a>同じデータを Promise と Observable で並行取得</li></ul><p data-v-6d78862a>詳しくは <strong data-v-6d78862a><a href="/RxJS-with-TypeScript/guide/anti-patterns/promise-observable-mixing.html" data-v-6d78862a>Chapter 10: PromiseとObservableの混在アンチパターン</a></strong> を参照してください。</p></div><h2 id="メリットとデメリット" tabindex="-1" data-v-6d78862a>メリットとデメリット <a class="header-anchor" href="#メリットとデメリット" aria-label="Permalink to &quot;メリットとデメリット&quot;" data-v-6d78862a>​</a></h2><h3 id="promise-1" tabindex="-1" data-v-6d78862a>Promise <a class="header-anchor" href="#promise-1" aria-label="Permalink to &quot;Promise&quot;" data-v-6d78862a>​</a></h3><div class="comparison-cards" data-v-6d78862a><div class="tip custom-block" data-v-6d78862a><p class="custom-block-title" data-v-6d78862a>メリット</p><ul data-v-6d78862a><li data-v-6d78862a>JavaScript標準のため依存関係不要</li><li data-v-6d78862a><code data-v-6d78862a>async/await</code>により直感的で読みやすいコード</li><li data-v-6d78862a>学習コストが低い</li><li data-v-6d78862a>単一タスクの処理がシンプル</li></ul></div><div class="danger custom-block" data-v-6d78862a><p class="custom-block-title" data-v-6d78862a>デメリット</p><ul data-v-6d78862a><li data-v-6d78862a>複数の値を扱えない</li><li data-v-6d78862a>キャンセル機能がない</li><li data-v-6d78862a>連続的なストリーム処理には不向き</li><li data-v-6d78862a>複雑なイベント処理が困難</li></ul></div></div><h3 id="rxjs-1" tabindex="-1" data-v-6d78862a>RxJS <a class="header-anchor" href="#rxjs-1" aria-label="Permalink to &quot;RxJS&quot;" data-v-6d78862a>​</a></h3><div class="comparison-cards" data-v-6d78862a><div class="tip custom-block" data-v-6d78862a><p class="custom-block-title" data-v-6d78862a>メリット</p><ul data-v-6d78862a><li data-v-6d78862a>複数の値を時系列で扱える</li><li data-v-6d78862a>豊富なオペレーターで複雑な処理が可能</li><li data-v-6d78862a>キャンセル（<code data-v-6d78862a>unsubscribe</code>）が簡単</li><li data-v-6d78862a>エラー処理やリトライを柔軟に実装可能</li><li data-v-6d78862a>宣言的でテストしやすい</li></ul></div><div class="danger custom-block" data-v-6d78862a><p class="custom-block-title" data-v-6d78862a>デメリット</p><ul data-v-6d78862a><li data-v-6d78862a>学習コストが高い</li><li data-v-6d78862a>ライブラリへの依存が必要</li><li data-v-6d78862a>オーバーヘッドがある（小規模プロジェクトでは過剰）</li><li data-v-6d78862a>デバッグが難しい場合がある</li></ul></div></div><h2 id="rxjsが特に活躍する分野" tabindex="-1" data-v-6d78862a>RxJSが特に活躍する分野 <a class="header-anchor" href="#rxjsが特に活躍する分野" aria-label="Permalink to &quot;RxJSが特に活躍する分野&quot;" data-v-6d78862a>​</a></h2><p data-v-6d78862a>RxJSは以下のような分野で特に強力です。Promiseだけでは実現が困難な複雑な要件を、エレガントに解決できます。</p><table tabindex="0" data-v-6d78862a><thead data-v-6d78862a><tr data-v-6d78862a><th data-v-6d78862a>分野</th><th data-v-6d78862a>具体例</th><th data-v-6d78862a>Promiseとの比較</th></tr></thead><tbody data-v-6d78862a><tr data-v-6d78862a><td data-v-6d78862a><strong data-v-6d78862a>リアルタイム通信</strong></td><td data-v-6d78862a>WebSocket、SSE、チャット、株価更新</td><td data-v-6d78862a>Promiseは単発の通信のみ。連続的なメッセージ処理には不向き</td></tr><tr data-v-6d78862a><td data-v-6d78862a><strong data-v-6d78862a>ユーザー入力制御</strong></td><td data-v-6d78862a>検索オートコンプリート、フォームバリデーション</td><td data-v-6d78862a>debounce、distinctUntilChangedなどが標準装備</td></tr><tr data-v-6d78862a><td data-v-6d78862a><strong data-v-6d78862a>複数ソースの結合</strong></td><td data-v-6d78862a>検索条件×ソート順×フィルタの組み合わせ</td><td data-v-6d78862a>combineLatest、withLatestFromで簡潔に記述可能</td></tr><tr data-v-6d78862a><td data-v-6d78862a><strong data-v-6d78862a>オフライン対応</strong></td><td data-v-6d78862a>PWA、ネットワーク状態監視、自動再同期</td><td data-v-6d78862a>retry、retryWhenで柔軟なリトライ制御</td></tr><tr data-v-6d78862a><td data-v-6d78862a><strong data-v-6d78862a>ストリーミングAPI</strong></td><td data-v-6d78862a>OpenAI、AI応答のトークン逐次出力</td><td data-v-6d78862a>連続データをリアルタイムで処理可能</td></tr><tr data-v-6d78862a><td data-v-6d78862a><strong data-v-6d78862a>キャンセル制御</strong></td><td data-v-6d78862a>長時間処理の中断、古いリクエストの破棄</td><td data-v-6d78862a>unsubscribe()で即座にキャンセル可能</td></tr></tbody></table><div class="note custom-block github-alert" data-v-6d78862a><p class="custom-block-title" data-v-6d78862a>NOTE</p><p data-v-6d78862a>RxJSの活用分野の詳細は、<a href="./what-is-rxjs.html#ユースケース" data-v-6d78862a>RxJSとは何か - ユースケース</a>も参照してください。</p></div><h2 id="まとめ" tabindex="-1" data-v-6d78862a>まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;" data-v-6d78862a>​</a></h2><table tabindex="0" data-v-6d78862a><thead data-v-6d78862a><tr data-v-6d78862a><th data-v-6d78862a>目的</th><th data-v-6d78862a>推奨</th></tr></thead><tbody data-v-6d78862a><tr data-v-6d78862a><td data-v-6d78862a>単一のHTTPリクエスト</td><td data-v-6d78862a>Promise（<code data-v-6d78862a>async/await</code>）</td></tr><tr data-v-6d78862a><td data-v-6d78862a>ユーザー入力イベントの処理</td><td data-v-6d78862a>RxJS</td></tr><tr data-v-6d78862a><td data-v-6d78862a>リアルタイムデータ（WebSocket）</td><td data-v-6d78862a>RxJS</td></tr><tr data-v-6d78862a><td data-v-6d78862a>複数の非同期処理の並列実行</td><td data-v-6d78862a>Promise（<code data-v-6d78862a>Promise.all</code>）</td></tr><tr data-v-6d78862a><td data-v-6d78862a>連続的なイベントストリーム</td><td data-v-6d78862a>RxJS</td></tr><tr data-v-6d78862a><td data-v-6d78862a>キャンセル可能な処理</td><td data-v-6d78862a>RxJS</td></tr><tr data-v-6d78862a><td data-v-6d78862a>シンプルなアプリケーション</td><td data-v-6d78862a>Promise</td></tr><tr data-v-6d78862a><td data-v-6d78862a>Angularアプリケーション</td><td data-v-6d78862a>RxJS</td></tr></tbody></table><h3 id="基本方針" tabindex="-1" data-v-6d78862a>基本方針 <a class="header-anchor" href="#基本方針" aria-label="Permalink to &quot;基本方針&quot;" data-v-6d78862a>​</a></h3><ul data-v-6d78862a><li data-v-6d78862a><strong data-v-6d78862a>シンプルに済むならPromise</strong>を使う</li><li data-v-6d78862a><strong data-v-6d78862a>複雑なストリーム処理が必要ならRxJS</strong>を使う</li><li data-v-6d78862a><strong data-v-6d78862a>両方を組み合わせる</strong>のも有効（<code data-v-6d78862a>from()</code>で橋渡し）</li></ul><p data-v-6d78862a>RxJSは強力ですが、すべての非同期処理にRxJSを使う必要はありません。適切なツールを適切な場面で使い分けることが重要です。</p><hr class="footnotes-sep" data-v-6d78862a><section class="footnotes" data-v-6d78862a><ol class="footnotes-list" data-v-6d78862a><li id="fn1" class="footnote-item" data-v-6d78862a><p data-v-6d78862a>AbortControllerを使えばPromiseベースの処理（fetchなど）のキャンセルは可能ですが、Promise自体の仕様にキャンセル機能はありません。 <a href="#fnref1" class="footnote-backref" data-v-6d78862a>↩︎</a></p></li></ol></section>`,63)]))}const g=s(n,[["render",h],["__scopeId","data-v-6d78862a"]]);export{E as __pageData,g as default};
