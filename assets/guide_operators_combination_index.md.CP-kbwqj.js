import{_ as a,c as e,o as r,a2 as o}from"./chunks/framework.BvXV5w7a.js";const m=JSON.parse('{"title":"結合オペレーター","description":"RxJSの結合オペレーターを使って複数のObservableを組み合わせ、複雑なストリームを構築する方法を解説します。concat、merge、combineLatest、zip、forkJoinなど代表的な演算子の使い分けと活用法を紹介します。","frontmatter":{"description":"RxJSの結合オペレーターを使って複数のObservableを組み合わせ、複雑なストリームを構築する方法を解説します。concat、merge、combineLatest、zip、forkJoinなど代表的な演算子の使い分けと活用法を紹介します。"},"headers":[],"relativePath":"guide/operators/combination/index.md","filePath":"guide/operators/combination/index.md"}'),d={name:"guide/operators/combination/index.md"};function i(h,t,n,l,b,s){return r(),e("div",null,t[0]||(t[0]=[o('<h1 id="結合オペレーター" tabindex="-1">結合オペレーター <a class="header-anchor" href="#結合オペレーター" aria-label="Permalink to &quot;結合オペレーター&quot;">​</a></h1><p>RxJS の結合（Combination）オペレーターは、複数の Observable を組み合わせて新しいストリームを作り出すための強力なツールです。<br> 非同期イベントの統合、複数の入力の同期処理、状態のマージなど、複雑なストリーム構造の制御に不可欠です。</p><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><p>結合オペレーターは、複数のObservableのストリームを組み合わせて一つの新しいストリームを生成するためのRxJSのオペレーター群です。<br> これにより、異なるデータソースを効果的に連携させることができます。</p><h2 id="演算子一覧" tabindex="-1">演算子一覧 <a class="header-anchor" href="#演算子一覧" aria-label="Permalink to &quot;演算子一覧&quot;">​</a></h2><h3 id="◾-基本的な結合オペレーター" tabindex="-1">◾ 基本的な結合オペレーター <a class="header-anchor" href="#◾-基本的な結合オペレーター" aria-label="Permalink to &quot;◾ 基本的な結合オペレーター&quot;">​</a></h3><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th></tr></thead><tbody><tr><td><a href="./concat.html">concat</a></td><td>順番にすべてのObservableを完了させながら結合します</td></tr><tr><td><a href="./merge.html">merge</a></td><td>複数のObservableを同時に進めながら結合します</td></tr><tr><td><a href="./combineLatest.html">combineLatest</a></td><td>最新の値同士を組み合わせて出力します</td></tr><tr><td><a href="./zip.html">zip</a></td><td>各Observableから順番にペアを作って出力します</td></tr></tbody></table><h3 id="◾-高度な結合オペレーター" tabindex="-1">◾ 高度な結合オペレーター <a class="header-anchor" href="#◾-高度な結合オペレーター" aria-label="Permalink to &quot;◾ 高度な結合オペレーター&quot;">​</a></h3><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th></tr></thead><tbody><tr><td><a href="./withLatestFrom.html">withLatestFrom</a></td><td>メインObservableの発行に応じて、最新の他ストリームの値を組み合わせます</td></tr><tr><td><a href="./forkJoin.html">forkJoin</a></td><td>すべてのObservableが完了した時点で、最後の値をまとめて出力します</td></tr><tr><td><a href="./race.html">race</a></td><td>最初に値を発行したObservableだけを生かします</td></tr></tbody></table><h2 id="さらに実践的に学びたい方へ" tabindex="-1">さらに実践的に学びたい方へ <a class="header-anchor" href="#さらに実践的に学びたい方へ" aria-label="Permalink to &quot;さらに実践的に学びたい方へ&quot;">​</a></h2><p>結合オペレーターを使ったリアルなシナリオ例は、<br><a href="./practical-use-cases.html">実用的なユースケース</a> にて詳しく紹介しています。</p>',11)]))}const f=a(d,[["render",i]]);export{m as __pageData,f as default};
