import{_ as s,c as i,o as t,a2 as e}from"./chunks/framework.BvXV5w7a.js";const v=JSON.parse('{"title":"PromiseとRxJSの違い","description":"PromiseとRxJSの違いを理解し、適切な使い分けを学びます。単一の非同期処理にはPromise、複雑なストリーム処理にはRxJSが適しています。","frontmatter":{"description":"PromiseとRxJSの違いを理解し、適切な使い分けを学びます。単一の非同期処理にはPromise、複雑なストリーム処理にはRxJSが適しています。"},"headers":[],"relativePath":"guide/basics/promise-vs-rxjs.md","filePath":"guide/basics/promise-vs-rxjs.md"}'),n={name:"guide/basics/promise-vs-rxjs.md"};function d(h,a,l,k,p,c){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="promiseとrxjsの違い" tabindex="-1" data-v-620714ce>PromiseとRxJSの違い <a class="header-anchor" href="#promiseとrxjsの違い" aria-label="Permalink to &quot;PromiseとRxJSの違い&quot;" data-v-620714ce>​</a></h1><h2 id="概要" tabindex="-1" data-v-620714ce>概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;" data-v-620714ce>​</a></h2><p data-v-620714ce>JavaScript/TypeScriptにおける非同期処理を扱う主要なツールとして、 <strong data-v-620714ce>Promise</strong>と<strong data-v-620714ce>RxJS（Observable）</strong> があります。両者は似た目的で使用されることがありますが、設計思想とユースケースが大きく異なります。</p><p data-v-620714ce>このページでは、PromiseとRxJSの違いを理解し、どちらを使うべきかを判断するための情報を提供します。</p><h2 id="基本的な違い" tabindex="-1" data-v-620714ce>基本的な違い <a class="header-anchor" href="#基本的な違い" aria-label="Permalink to &quot;基本的な違い&quot;" data-v-620714ce>​</a></h2><table tabindex="0" data-v-620714ce><thead data-v-620714ce><tr data-v-620714ce><th data-v-620714ce>項目</th><th data-v-620714ce>Promise</th><th data-v-620714ce>RxJS (Observable)</th></tr></thead><tbody data-v-620714ce><tr data-v-620714ce><td data-v-620714ce><strong data-v-620714ce>標準化</strong></td><td data-v-620714ce>JavaScript標準（ES6/ES2015）</td><td data-v-620714ce>サードパーティライブラリ</td></tr><tr data-v-620714ce><td data-v-620714ce><strong data-v-620714ce>発行する値</strong></td><td data-v-620714ce>単一の値</td><td data-v-620714ce>0個以上の複数の値</td></tr><tr data-v-620714ce><td data-v-620714ce><strong data-v-620714ce>評価</strong></td><td data-v-620714ce>Eager（作成時に即実行）</td><td data-v-620714ce>Lazy（購読時に実行）</td></tr><tr data-v-620714ce><td data-v-620714ce><strong data-v-620714ce>キャンセル</strong></td><td data-v-620714ce>不可<sup class="footnote-ref" data-v-620714ce><a href="#fn1" id="fnref1" data-v-620714ce>[1]</a></sup></td><td data-v-620714ce>可（<code data-v-620714ce>unsubscribe()</code>）</td></tr><tr data-v-620714ce><td data-v-620714ce><strong data-v-620714ce>再利用</strong></td><td data-v-620714ce>不可（結果は1度だけ）</td><td data-v-620714ce>可（何度でも購読可能）</td></tr><tr data-v-620714ce><td data-v-620714ce><strong data-v-620714ce>学習コスト</strong></td><td data-v-620714ce>低い</td><td data-v-620714ce>高い（オペレーターの理解が必要）</td></tr><tr data-v-620714ce><td data-v-620714ce><strong data-v-620714ce>ユースケース</strong></td><td data-v-620714ce>単一の非同期処理</td><td data-v-620714ce>複雑なストリーム処理</td></tr></tbody></table><h2 id="コード比較-単一の非同期処理" tabindex="-1" data-v-620714ce>コード比較： 単一の非同期処理 <a class="header-anchor" href="#コード比較-単一の非同期処理" aria-label="Permalink to &quot;コード比較： 単一の非同期処理&quot;" data-v-620714ce>​</a></h2><h3 id="promise" tabindex="-1" data-v-620714ce>Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;" data-v-620714ce>​</a></h3><div class="language-ts vp-adaptive-theme" data-v-620714ce><button title="Copy Code" class="copy" data-v-620714ce></button><span class="lang" data-v-620714ce>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-620714ce><code data-v-620714ce><span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// Promiseは作成時に即実行される（Eager）</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;https://jsonplaceholder.typicode.com/posts/1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>)</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>())</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(data))</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(error));</span></span></code></pre></div><p data-v-620714ce>Promiseは<strong data-v-620714ce>定義した瞬間に実行が始まります</strong>（Eager評価）。</p><h3 id="rxjs" tabindex="-1" data-v-620714ce>RxJS <a class="header-anchor" href="#rxjs" aria-label="Permalink to &quot;RxJS&quot;" data-v-620714ce>​</a></h3><div class="language-ts vp-adaptive-theme" data-v-620714ce><button title="Copy Code" class="copy" data-v-620714ce></button><span class="lang" data-v-620714ce>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-620714ce><code data-v-620714ce><span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> { from } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> { switchMap, catchError } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> { of } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// Observableは購読するまで実行されない（Lazy）</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> observable$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;https://jsonplaceholder.typicode.com/posts/1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  switchMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>()), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// response.json()はPromiseを返すのでswitchMapを使用</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  catchError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(error);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  })</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// 購読して初めて実行される</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>observable$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(data));</span></span></code></pre></div><p data-v-620714ce>RxJSは**<code data-v-620714ce>subscribe()</code> が呼ばれるまで実行されません**（Lazy評価）。同じObservableを複数回購読すると独立した実行が行われ、<code data-v-620714ce>unsubscribe()</code> で処理を中断できます。</p><div class="tip custom-block github-alert" data-v-620714ce><p class="custom-block-title" data-v-620714ce>TIP</p><p data-v-620714ce><strong data-v-620714ce>実務での使い分け</strong></p><ul data-v-620714ce><li data-v-620714ce>即座に実行したい単発の処理 → Promise</li><li data-v-620714ce>必要なタイミングで実行したい、または複数回実行したい処理 → RxJS</li></ul></div><h2 id="コード比較-複数の値を扱う場合" tabindex="-1" data-v-620714ce>コード比較： 複数の値を扱う場合 <a class="header-anchor" href="#コード比較-複数の値を扱う場合" aria-label="Permalink to &quot;コード比較： 複数の値を扱う場合&quot;" data-v-620714ce>​</a></h2><p data-v-620714ce>PromiseとRxJSの最も大きな違いの一つが、発行できる値の数です。Promiseは単一の値しか返せませんが、RxJSは複数の値を時系列で発行できます。</p><h3 id="promiseでは不可能" tabindex="-1" data-v-620714ce>Promiseでは不可能 <a class="header-anchor" href="#promiseでは不可能" aria-label="Permalink to &quot;Promiseでは不可能&quot;" data-v-620714ce>​</a></h3><p data-v-620714ce>Promiseは<strong data-v-620714ce>一度しか解決できません</strong>。</p><div class="language-ts vp-adaptive-theme" data-v-620714ce><button title="Copy Code" class="copy" data-v-620714ce></button><span class="lang" data-v-620714ce>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-620714ce><code data-v-620714ce><span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// Promiseは単一の値しか返せない</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// この値は無視される</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// この値も無視される</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>});</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>promise.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(value));</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// 出力: 1（最初の値のみ）</span></span></code></pre></div><p data-v-620714ce>最初の <code data-v-620714ce>resolve()</code> で値が確定すると、それ以降の <code data-v-620714ce>resolve()</code> は無視されます。</p><h3 id="rxjsでは可能" tabindex="-1" data-v-620714ce>RxJSでは可能 <a class="header-anchor" href="#rxjsでは可能" aria-label="Permalink to &quot;RxJSでは可能&quot;" data-v-620714ce>​</a></h3><p data-v-620714ce>Observableは<strong data-v-620714ce>何度でも値を発行できます</strong>。</p><div class="language-ts vp-adaptive-theme" data-v-620714ce><button title="Copy Code" class="copy" data-v-620714ce></button><span class="lang" data-v-620714ce>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-620714ce><code data-v-620714ce><span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> { Observable } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// Observableは複数の値を発行できる</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> observable$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> Observable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>subscriber</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  subscriber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>complete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>();</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>});</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>observable$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(value));</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// 出力: 1, 2, 3</span></span></code></pre></div><p data-v-620714ce><code data-v-620714ce>next()</code> を呼ぶたびに、購読者に値が届きます。すべての値を発行した後は <code data-v-620714ce>complete()</code> で完了を通知します。この特性により、リアルタイム通信、ストリーミングデータ、連続的なイベント処理など、時系列で変化するデータを自然に扱えます。</p><div class="note custom-block github-alert" data-v-620714ce><p class="custom-block-title" data-v-620714ce>NOTE</p><p data-v-620714ce><strong data-v-620714ce>実務での応用例</strong></p><ul data-v-620714ce><li data-v-620714ce>WebSocketのメッセージ受信</li><li data-v-620714ce>キーボード入力の逐次処理</li><li data-v-620714ce>サーバーからのイベントストリーム（SSE）</li><li data-v-620714ce>センサーデータの継続的な監視</li></ul></div><h2 id="キャンセルの比較" tabindex="-1" data-v-620714ce>キャンセルの比較 <a class="header-anchor" href="#キャンセルの比較" aria-label="Permalink to &quot;キャンセルの比較&quot;" data-v-620714ce>​</a></h2><p data-v-620714ce>長時間かかる処理や、不要になった非同期処理をキャンセルできるかどうかは、リソース管理とユーザー体験の観点で重要です。PromiseとRxJSでは、キャンセル機能に大きな違いがあります。</p><h3 id="promise-キャンセル不可" tabindex="-1" data-v-620714ce>Promise（キャンセル不可） <a class="header-anchor" href="#promise-キャンセル不可" aria-label="Permalink to &quot;Promise（キャンセル不可）&quot;" data-v-620714ce>​</a></h3><p data-v-620714ce>Promiseには<strong data-v-620714ce>標準的なキャンセル機能がありません</strong>。</p><div class="language-ts vp-adaptive-theme" data-v-620714ce><button title="Copy Code" class="copy" data-v-620714ce></button><span class="lang" data-v-620714ce>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-620714ce><code data-v-620714ce><span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;完了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>});</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>promise.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(result));</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// この処理をキャンセルする標準的な方法はない</span></span></code></pre></div><p data-v-620714ce>一度実行が始まると完了するまで止められず、メモリリークやパフォーマンス低下の原因になります。</p><div class="warning custom-block github-alert" data-v-620714ce><p class="custom-block-title" data-v-620714ce>WARNING</p><p data-v-620714ce><strong data-v-620714ce>AbortController について</strong><code data-v-620714ce>fetch()</code> などのWeb APIは <code data-v-620714ce>AbortController</code> を使ってキャンセルできますが、これはPromise自体の機能ではなく、個別のAPIが提供する仕組みです。すべての非同期処理で使えるわけではありません。</p></div><h3 id="rxjs-キャンセル可能" tabindex="-1" data-v-620714ce>RxJS（キャンセル可能） <a class="header-anchor" href="#rxjs-キャンセル可能" aria-label="Permalink to &quot;RxJS（キャンセル可能）&quot;" data-v-620714ce>​</a></h3><p data-v-620714ce>RxJSは**<code data-v-620714ce>unsubscribe()</code> でいつでもキャンセルできます**。</p><div class="language-ts vp-adaptive-theme" data-v-620714ce><button title="Copy Code" class="copy" data-v-620714ce></button><span class="lang" data-v-620714ce>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-620714ce><code data-v-620714ce><span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> { timer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> subscription</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> timer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;完了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>)</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// 1秒後にキャンセル</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  subscription.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// キャンセル</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;キャンセルしました&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// 出力: キャンセルしました（「完了」は出力されない）</span></span></code></pre></div><p data-v-620714ce>購読を解除すると進行中の処理が即座に停止し、メモリリークを防げます。</p><div class="tip custom-block github-alert" data-v-620714ce><p class="custom-block-title" data-v-620714ce>TIP</p><p data-v-620714ce><strong data-v-620714ce>実務でのキャンセル活用例</strong></p><ul data-v-620714ce><li data-v-620714ce>ユーザーが画面を離れたときにHTTPリクエストをキャンセル</li><li data-v-620714ce>古い検索クエリの結果を破棄して、最新のクエリだけ処理（<code data-v-620714ce>switchMap</code>）</li><li data-v-620714ce>コンポーネント破棄時に、すべてのObservableを自動的にキャンセル（<code data-v-620714ce>takeUntil</code>パターン）</li></ul></div><h2 id="どちらを選ぶべきか" tabindex="-1" data-v-620714ce>どちらを選ぶべきか <a class="header-anchor" href="#どちらを選ぶべきか" aria-label="Permalink to &quot;どちらを選ぶべきか&quot;" data-v-620714ce>​</a></h2><p data-v-620714ce>PromiseとRxJSのどちらを使うべきかは、処理の性質とプロジェクトの要件によって変わります。以下の基準を参考に、適切なツールを選択しましょう。</p><h3 id="promiseを選ぶべき場合" tabindex="-1" data-v-620714ce>Promiseを選ぶべき場合 <a class="header-anchor" href="#promiseを選ぶべき場合" aria-label="Permalink to &quot;Promiseを選ぶべき場合&quot;" data-v-620714ce>​</a></h3><p data-v-620714ce>以下の条件に当てはまる場合は、Promiseが適しています。</p><table tabindex="0" data-v-620714ce><thead data-v-620714ce><tr data-v-620714ce><th data-v-620714ce>条件</th><th data-v-620714ce>理由</th></tr></thead><tbody data-v-620714ce><tr data-v-620714ce><td data-v-620714ce>単一の非同期処理</td><td data-v-620714ce>APIリクエスト1回、ファイル読み込み1回など</td></tr><tr data-v-620714ce><td data-v-620714ce>シンプルなワークフロー</td><td data-v-620714ce><code data-v-620714ce>Promise.all</code>, <code data-v-620714ce>Promise.race</code>で十分</td></tr><tr data-v-620714ce><td data-v-620714ce>小規模プロジェクト</td><td data-v-620714ce>依存関係を最小限にしたい</td></tr><tr data-v-620714ce><td data-v-620714ce>標準APIのみ使用</td><td data-v-620714ce>外部ライブラリを避けたい</td></tr><tr data-v-620714ce><td data-v-620714ce>初心者向けコード</td><td data-v-620714ce>学習コストを抑えたい</td></tr></tbody></table><h4 id="単一のapiリクエスト" tabindex="-1" data-v-620714ce>単一のAPIリクエスト: <a class="header-anchor" href="#単一のapiリクエスト" aria-label="Permalink to &quot;単一のAPIリクエスト:&quot;" data-v-620714ce>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-620714ce><button title="Copy Code" class="copy" data-v-620714ce></button><span class="lang" data-v-620714ce>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-620714ce><code data-v-620714ce><span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>  email</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>  username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>}</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> getUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>userId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>&gt; {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>\`https://jsonplaceholder.typicode.com/users/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>userId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>response.ok) {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;ユーザーデータの取得に失敗しました&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  }</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>();</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>}</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// 使用例</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>getUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;ユーザー名:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>, user.name);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;メール:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>, user.email);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>});</span></span></code></pre></div><p data-v-620714ce>このコードは、単一のユーザー情報を取得する典型的なパターンです。<code data-v-620714ce>async/await</code> を使うことで、同期的なコードのように読みやすく書けます。エラーハンドリングも <code data-v-620714ce>try/catch</code> で統一でき、シンプルで直感的です。</p><h4 id="複数の非同期処理を並列実行" tabindex="-1" data-v-620714ce>複数の非同期処理を並列実行: <a class="header-anchor" href="#複数の非同期処理を並列実行" aria-label="Permalink to &quot;複数の非同期処理を並列実行:&quot;" data-v-620714ce>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-620714ce><button title="Copy Code" class="copy" data-v-620714ce></button><span class="lang" data-v-620714ce>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-620714ce><code data-v-620714ce><span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> Post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>  userId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>  body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>}</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> loadAllData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>&lt;[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>[], </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>Post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>[]]&gt; {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>users</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>posts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>([</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>    fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;https://jsonplaceholder.typicode.com/users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>()),</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>    fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;https://jsonplaceholder.typicode.com/posts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>())</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  ]);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> [users, posts];</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>}</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// 使用例</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>loadAllData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(([</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>users</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>posts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;ユーザー数:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>, users.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;投稿数:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>, posts.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>});</span></span></code></pre></div><p data-v-620714ce><code data-v-620714ce>Promise.all()</code> を使うことで、複数のAPIリクエストを並列に実行し、すべてが完了するのを待つことができます。これは初期データ読み込みなどで非常に便利です。一つでも失敗すると全体がエラーになる点に注意が必要ですが、そのシンプルさゆえに理解しやすく、メンテナンスも容易です。</p><h3 id="rxjsを選ぶべき場合" tabindex="-1" data-v-620714ce>RxJSを選ぶべき場合 <a class="header-anchor" href="#rxjsを選ぶべき場合" aria-label="Permalink to &quot;RxJSを選ぶべき場合&quot;" data-v-620714ce>​</a></h3><p data-v-620714ce>以下の条件に当てはまる場合は、RxJSが適しています。</p><table tabindex="0" data-v-620714ce><thead data-v-620714ce><tr data-v-620714ce><th data-v-620714ce>条件</th><th data-v-620714ce>理由</th></tr></thead><tbody data-v-620714ce><tr data-v-620714ce><td data-v-620714ce>連続的なイベント処理</td><td data-v-620714ce>マウス移動、キーボード入力、WebSocketなど</td></tr><tr data-v-620714ce><td data-v-620714ce>複雑なストリーム処理</td><td data-v-620714ce>複数のイベントソースの結合や変換</td></tr><tr data-v-620714ce><td data-v-620714ce>キャンセルが必要</td><td data-v-620714ce>リソース管理を細かく制御したい</td></tr><tr data-v-620714ce><td data-v-620714ce>リトライ・タイムアウト</td><td data-v-620714ce>エラー処理を柔軟に行いたい</td></tr><tr data-v-620714ce><td data-v-620714ce>Angularプロジェクト</td><td data-v-620714ce>RxJSがフレームワークに統合されている</td></tr><tr data-v-620714ce><td data-v-620714ce>リアルタイムデータ</td><td data-v-620714ce>データが継続的に更新される</td></tr></tbody></table><h4 id="具体例" tabindex="-1" data-v-620714ce>具体例 <a class="header-anchor" href="#具体例" aria-label="Permalink to &quot;具体例&quot;" data-v-620714ce>​</a></h4><div class="language-ts vp-adaptive-theme" data-v-620714ce><button title="Copy Code" class="copy" data-v-620714ce></button><span class="lang" data-v-620714ce>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-620714ce><code data-v-620714ce><span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> { fromEvent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> { debounceTime, map, distinctUntilChanged, switchMap } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;label&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>label.innerText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;search: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> searchInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>searchInput.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>label.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(searchInput);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(label);</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// リアルタイム検索（オートコンプリート）</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>searchInput) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;検索入力欄が見つかりません&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(searchInput, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> (event.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>).value),</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  debounceTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>),              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// 300ms待ってから処理</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  distinctUntilChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(),         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// 値が変わった時だけ処理</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  switchMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>              // 最新のリクエストのみ実行</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>    fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>\`https://api.github.com/search/users?q=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>query</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>())</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  )</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>results</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;検索結果:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>, results.items); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// GitHub APIはitemsプロパティに結果を格納</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>});</span></span></code></pre></div><p data-v-620714ce>この例は、RxJSの真価が発揮される典型的なケースです。ユーザーの入力を監視し、300msの待機時間を設けて無駄なリクエストを減らし、値が変わったときだけ処理を行い、さらに最新のリクエストだけを有効にする（<code data-v-620714ce>switchMap</code>）ことで、古いリクエストの結果を自動的に破棄します。</p><div class="important custom-block github-alert" data-v-620714ce><p class="custom-block-title" data-v-620714ce>IMPORTANT</p><p data-v-620714ce><strong data-v-620714ce>Promiseだけでは困難な理由</strong></p><ul data-v-620714ce><li data-v-620714ce>debounce（連続入力の制御）を手動実装する必要がある</li><li data-v-620714ce>古いリクエストのキャンセルを自分で管理しなければならない</li><li data-v-620714ce>イベントリスナーのクリーンアップを忘れるとメモリリークが発生する</li><li data-v-620714ce>複数の状態（タイマー、フラグ、リクエスト管理）を同時に追跡する必要がある</li></ul><p data-v-620714ce>RxJSでは、これらがすべて宣言的に、数行で実現できます。</p></div><h2 id="promiseとrxjsの相互運用" tabindex="-1" data-v-620714ce>PromiseとRxJSの相互運用 <a class="header-anchor" href="#promiseとrxjsの相互運用" aria-label="Permalink to &quot;PromiseとRxJSの相互運用&quot;" data-v-620714ce>​</a></h2><p data-v-620714ce>PromiseとRxJSは排他的なものではなく、相互に変換して組み合わせることができます。既存のPromiseベースのコードをRxJSのパイプラインに統合したり、逆にObservableを既存のPromiseベースのコードで使いたい場合に便利です。</p><h3 id="promiseをobservableに変換" tabindex="-1" data-v-620714ce>PromiseをObservableに変換 <a class="header-anchor" href="#promiseをobservableに変換" aria-label="Permalink to &quot;PromiseをObservableに変換&quot;" data-v-620714ce>​</a></h3><p data-v-620714ce>既存のPromiseベースのAPIや関数を、RxJSのパイプラインで使いたい場合は、<code data-v-620714ce>from()</code> を使って変換します。</p><div class="language-ts vp-adaptive-theme" data-v-620714ce><button title="Copy Code" class="copy" data-v-620714ce></button><span class="lang" data-v-620714ce>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-620714ce><code data-v-620714ce><span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> { from } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// Promiseを作成</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;https://jsonplaceholder.typicode.com/posts/1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>)</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>());</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// from()でObservableに変換</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> observable$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(promise);</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>observable$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>({</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;データ:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>, data),</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;エラー:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>, error),</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  complete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;完了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>)</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>});</span></span></code></pre></div><p data-v-620714ce><code data-v-620714ce>from()</code> は、Promiseが解決すると1つの値を発行し、即座に <code data-v-620714ce>complete</code> します。エラーが発生すると <code data-v-620714ce>error</code> 通知が送られます。この変換により、Promise由来のデータに対しても、RxJSのオペレーター（<code data-v-620714ce>map</code>, <code data-v-620714ce>filter</code>, <code data-v-620714ce>retry</code> など）を自由に適用できるようになります。</p><h3 id="observableをpromiseに変換" tabindex="-1" data-v-620714ce>ObservableをPromiseに変換 <a class="header-anchor" href="#observableをpromiseに変換" aria-label="Permalink to &quot;ObservableをPromiseに変換&quot;" data-v-620714ce>​</a></h3><p data-v-620714ce>逆に、ObservableをPromiseに変換したい場合もあります。例えば、async/awaitで書かれた既存コードにRxJSの処理を統合する場合や、単一の値だけが必要な場合に便利です。</p><div class="language-ts vp-adaptive-theme" data-v-620714ce><button title="Copy Code" class="copy" data-v-620714ce></button><span class="lang" data-v-620714ce>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-620714ce><code data-v-620714ce><span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> { of, firstValueFrom, lastValueFrom } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> { delay } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> observable$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>));</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// 最初の値をPromiseとして取得</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> firstValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> firstValueFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(observable$);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(firstValue); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// 1</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// 最後の値をPromiseとして取得</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> lastValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> lastValueFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(observable$);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(lastValue); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// 3</span></span></code></pre></div><div class="warning custom-block github-alert" data-v-620714ce><p class="custom-block-title" data-v-620714ce>WARNING</p><p data-v-620714ce><code data-v-620714ce>toPromise()</code>は非推奨です。代わりに<code data-v-620714ce>firstValueFrom()</code>または<code data-v-620714ce>lastValueFrom()</code>を使用してください。</p></div><div class="tip custom-block github-alert" data-v-620714ce><p class="custom-block-title" data-v-620714ce>TIP</p><p data-v-620714ce><strong data-v-620714ce>使い分けのポイント</strong></p><ul data-v-620714ce><li data-v-620714ce><strong data-v-620714ce><code data-v-620714ce>firstValueFrom()</code></strong>: 最初の値だけが必要な場合（例：ログイン認証の結果）</li><li data-v-620714ce><strong data-v-620714ce><code data-v-620714ce>lastValueFrom()</code></strong>: すべてのデータを処理した後の最終結果が必要な場合（例：集計結果）</li></ul></div><h2 id="実践例-両者を組み合わせる" tabindex="-1" data-v-620714ce>実践例：両者を組み合わせる <a class="header-anchor" href="#実践例-両者を組み合わせる" aria-label="Permalink to &quot;実践例：両者を組み合わせる&quot;" data-v-620714ce>​</a></h2><p data-v-620714ce>実際のアプリケーションでは、PromiseとRxJSを組み合わせて使用することが一般的です。</p><div class="warning custom-block github-alert" data-v-620714ce><p class="custom-block-title" data-v-620714ce>実務での注意事項</p><p data-v-620714ce>PromiseとObservableの混在は、<strong data-v-620714ce>設計の境界を明確にしないとアンチパターンに陥りやすい</strong>です。</p><p data-v-620714ce><strong data-v-620714ce>よくある問題：</strong></p><ul data-v-620714ce><li data-v-620714ce>キャンセル不能になる</li><li data-v-620714ce>エラーハンドリングの分離</li><li data-v-620714ce><code data-v-620714ce>subscribe</code>内での<code data-v-620714ce>await</code>（特に危険）</li><li data-v-620714ce>同じデータを Promise と Observable で並行取得</li></ul><p data-v-620714ce>詳しくは <strong data-v-620714ce><a href="/RxJS-with-TypeScript/guide/anti-patterns/promise-observable-mixing.html" data-v-620714ce>Chapter 10: PromiseとObservableの混在アンチパターン</a></strong> を参照してください。</p></div><div class="language-ts vp-adaptive-theme" data-v-620714ce><button title="Copy Code" class="copy" data-v-620714ce></button><span class="lang" data-v-620714ce>ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-620714ce><code data-v-620714ce><span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> { fromEvent, from } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> { debounceTime, switchMap, catchError } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> { of } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> SearchResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>  items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>&lt;{</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>    login</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>    id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>    avatar_url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  }&gt;;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>  total_count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>}</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// Promise ベースのAPI関数</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> searchAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>SearchResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>&gt; {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>\`https://api.github.com/search/users?q=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>query</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>response.ok) {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;検索に失敗しました&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  }</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>();</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>}</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// RxJSでイベントストリームを管理</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;label&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>label.innerText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;search: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> searchInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>searchInput.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce> &#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>label.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(searchInput);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(label);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>searchInput) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;検索入力欄が見つかりません&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>);</span></span>
<span class="line" data-v-620714ce></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(searchInput, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  debounceTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>),</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  switchMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> (event.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>).value;</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>    // Promise関数をObservableに変換</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>searchAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(query));</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  }),</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>  catchError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(error);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce>    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>({ items: [], total_count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-620714ce>0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-620714ce>// エラー時は空の結果を返す</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  })</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-620714ce>result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-620714ce> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce> {</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;検索結果:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>, result.items);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-620714ce>log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-620714ce>&#39;合計:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>, result.total_count);</span></span>
<span class="line" data-v-620714ce><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-620714ce>});</span></span></code></pre></div><div class="tip custom-block github-alert" data-v-620714ce><p class="custom-block-title" data-v-620714ce>TIP</p><p data-v-620714ce><strong data-v-620714ce>責務の分離による設計</strong></p><ul data-v-620714ce><li data-v-620714ce><strong data-v-620714ce>RxJS</strong>: イベント制御を担当（debounce、switchMapなど）</li><li data-v-620714ce><strong data-v-620714ce>Promise</strong>: HTTPリクエストを担当（async/await）</li><li data-v-620714ce><strong data-v-620714ce><code data-v-620714ce>from()</code></strong>: 両者を橋渡し</li></ul><p data-v-620714ce>各技術を適材適所で使い分けることで、コードの可読性と保守性が向上します。</p></div><h2 id="メリットとデメリット" tabindex="-1" data-v-620714ce>メリットとデメリット <a class="header-anchor" href="#メリットとデメリット" aria-label="Permalink to &quot;メリットとデメリット&quot;" data-v-620714ce>​</a></h2><h3 id="promise-1" tabindex="-1" data-v-620714ce>Promise <a class="header-anchor" href="#promise-1" aria-label="Permalink to &quot;Promise&quot;" data-v-620714ce>​</a></h3><div class="comparison-cards" data-v-620714ce><div class="tip custom-block" data-v-620714ce><p class="custom-block-title" data-v-620714ce>メリット</p><ul data-v-620714ce><li data-v-620714ce>JavaScript標準のため依存関係不要</li><li data-v-620714ce><code data-v-620714ce>async/await</code>により直感的で読みやすいコード</li><li data-v-620714ce>学習コストが低い</li><li data-v-620714ce>単一タスクの処理がシンプル</li></ul></div><div class="danger custom-block" data-v-620714ce><p class="custom-block-title" data-v-620714ce>デメリット</p><ul data-v-620714ce><li data-v-620714ce>複数の値を扱えない</li><li data-v-620714ce>キャンセル機能がない</li><li data-v-620714ce>連続的なストリーム処理には不向き</li><li data-v-620714ce>複雑なイベント処理が困難</li></ul></div></div><h3 id="rxjs-1" tabindex="-1" data-v-620714ce>RxJS <a class="header-anchor" href="#rxjs-1" aria-label="Permalink to &quot;RxJS&quot;" data-v-620714ce>​</a></h3><div class="comparison-cards" data-v-620714ce><div class="tip custom-block" data-v-620714ce><p class="custom-block-title" data-v-620714ce>メリット</p><ul data-v-620714ce><li data-v-620714ce>複数の値を時系列で扱える</li><li data-v-620714ce>豊富なオペレーターで複雑な処理が可能</li><li data-v-620714ce>キャンセル（<code data-v-620714ce>unsubscribe</code>）が簡単</li><li data-v-620714ce>エラー処理やリトライを柔軟に実装可能</li><li data-v-620714ce>宣言的でテストしやすい</li></ul></div><div class="danger custom-block" data-v-620714ce><p class="custom-block-title" data-v-620714ce>デメリット</p><ul data-v-620714ce><li data-v-620714ce>学習コストが高い</li><li data-v-620714ce>ライブラリへの依存が必要</li><li data-v-620714ce>オーバーヘッドがある（小規模プロジェクトでは過剰）</li><li data-v-620714ce>デバッグが難しい場合がある</li></ul></div></div><h2 id="rxjsが特に活躍する分野" tabindex="-1" data-v-620714ce>RxJSが特に活躍する分野 <a class="header-anchor" href="#rxjsが特に活躍する分野" aria-label="Permalink to &quot;RxJSが特に活躍する分野&quot;" data-v-620714ce>​</a></h2><p data-v-620714ce>RxJSは以下のような分野で特に強力です。Promiseだけでは実現が困難な複雑な要件を、エレガントに解決できます。</p><table tabindex="0" data-v-620714ce><thead data-v-620714ce><tr data-v-620714ce><th data-v-620714ce>分野</th><th data-v-620714ce>具体例</th><th data-v-620714ce>Promiseとの比較</th></tr></thead><tbody data-v-620714ce><tr data-v-620714ce><td data-v-620714ce><strong data-v-620714ce>リアルタイム通信</strong></td><td data-v-620714ce>WebSocket、SSE、チャット、株価更新</td><td data-v-620714ce>Promiseは単発の通信のみ。連続的なメッセージ処理には不向き</td></tr><tr data-v-620714ce><td data-v-620714ce><strong data-v-620714ce>ユーザー入力制御</strong></td><td data-v-620714ce>検索オートコンプリート、フォームバリデーション</td><td data-v-620714ce>debounce、distinctUntilChangedなどが標準装備</td></tr><tr data-v-620714ce><td data-v-620714ce><strong data-v-620714ce>複数ソースの結合</strong></td><td data-v-620714ce>検索条件×ソート順×フィルタの組み合わせ</td><td data-v-620714ce>combineLatest、withLatestFromで簡潔に記述可能</td></tr><tr data-v-620714ce><td data-v-620714ce><strong data-v-620714ce>オフライン対応</strong></td><td data-v-620714ce>PWA、ネットワーク状態監視、自動再同期</td><td data-v-620714ce>retry、retryWhenで柔軟なリトライ制御</td></tr><tr data-v-620714ce><td data-v-620714ce><strong data-v-620714ce>ストリーミングAPI</strong></td><td data-v-620714ce>OpenAI、AI応答のトークン逐次出力</td><td data-v-620714ce>連続データをリアルタイムで処理可能</td></tr><tr data-v-620714ce><td data-v-620714ce><strong data-v-620714ce>キャンセル制御</strong></td><td data-v-620714ce>長時間処理の中断、古いリクエストの破棄</td><td data-v-620714ce>unsubscribe()で即座にキャンセル可能</td></tr></tbody></table><div class="note custom-block github-alert" data-v-620714ce><p class="custom-block-title" data-v-620714ce>NOTE</p><p data-v-620714ce>RxJSの活用分野の詳細は、<a href="./what-is-rxjs.html#ユースケース" data-v-620714ce>RxJSとは何か - ユースケース</a>も参照してください。</p></div><h2 id="まとめ" tabindex="-1" data-v-620714ce>まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;" data-v-620714ce>​</a></h2><table tabindex="0" data-v-620714ce><thead data-v-620714ce><tr data-v-620714ce><th data-v-620714ce>目的</th><th data-v-620714ce>推奨</th><th data-v-620714ce>理由</th></tr></thead><tbody data-v-620714ce><tr data-v-620714ce><td data-v-620714ce>単一のHTTPリクエスト</td><td data-v-620714ce>Promise（<code data-v-620714ce>async/await</code>）</td><td data-v-620714ce>シンプルで読みやすく、標準API</td></tr><tr data-v-620714ce><td data-v-620714ce>ユーザー入力イベントの処理</td><td data-v-620714ce>RxJS</td><td data-v-620714ce>debounce、distinctなどの制御が必要</td></tr><tr data-v-620714ce><td data-v-620714ce>リアルタイムデータ（WebSocket）</td><td data-v-620714ce>RxJS</td><td data-v-620714ce>連続的なメッセージを自然に扱える</td></tr><tr data-v-620714ce><td data-v-620714ce>複数の非同期処理の並列実行</td><td data-v-620714ce>Promise（<code data-v-620714ce>Promise.all</code>）</td><td data-v-620714ce>単純な並列実行ならPromiseで十分</td></tr><tr data-v-620714ce><td data-v-620714ce>連続的なイベントストリーム</td><td data-v-620714ce>RxJS</td><td data-v-620714ce>複数の値を時系列で扱える</td></tr><tr data-v-620714ce><td data-v-620714ce>キャンセル可能な処理</td><td data-v-620714ce>RxJS</td><td data-v-620714ce>unsubscribe()で確実にキャンセル</td></tr><tr data-v-620714ce><td data-v-620714ce>シンプルなアプリケーション</td><td data-v-620714ce>Promise</td><td data-v-620714ce>学習コストが低く、依存関係が少ない</td></tr><tr data-v-620714ce><td data-v-620714ce>Angularアプリケーション</td><td data-v-620714ce>RxJS</td><td data-v-620714ce>フレームワークに標準統合されている</td></tr></tbody></table><h3 id="基本方針" tabindex="-1" data-v-620714ce>基本方針 <a class="header-anchor" href="#基本方針" aria-label="Permalink to &quot;基本方針&quot;" data-v-620714ce>​</a></h3><ul data-v-620714ce><li data-v-620714ce><strong data-v-620714ce>シンプルに済むならPromise</strong>を使う</li><li data-v-620714ce><strong data-v-620714ce>複雑なストリーム処理が必要ならRxJS</strong>を使う</li><li data-v-620714ce><strong data-v-620714ce>両方を組み合わせる</strong>のも有効（<code data-v-620714ce>from()</code>で橋渡し）</li></ul><p data-v-620714ce>RxJSは強力ですが、すべての非同期処理にRxJSを使う必要はありません。適切なツールを適切な場面で使い分けることが重要です。</p><hr class="footnotes-sep" data-v-620714ce><section class="footnotes" data-v-620714ce><ol class="footnotes-list" data-v-620714ce><li id="fn1" class="footnote-item" data-v-620714ce><p data-v-620714ce>AbortControllerを使えばPromiseベースの処理（fetchなど）のキャンセルは可能ですが、Promise自体の仕様にキャンセル機能はありません。 <a href="#fnref1" class="footnote-backref" data-v-620714ce>↩︎</a></p></li></ol></section>`,87)]))}const E=s(n,[["render",d],["__scopeId","data-v-620714ce"]]);export{v as __pageData,E as default};
