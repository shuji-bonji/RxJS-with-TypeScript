import{_ as i,c as a,o as s,a2 as e}from"./chunks/framework.BvXV5w7a.js";const k=JSON.parse('{"title":"結合オペレーター（Pipeable Operators）","description":"RxJSの結合オペレーター（Pipeable Operators）を使って複数のObservableを組み合わせる方法を解説します。withLatestFromなどのPipeable形式の演算子の使い分けと活用法を紹介します。","frontmatter":{"description":"RxJSの結合オペレーター（Pipeable Operators）を使って複数のObservableを組み合わせる方法を解説します。withLatestFromなどのPipeable形式の演算子の使い分けと活用法を紹介します。"},"headers":[],"relativePath":"guide/operators/combination/index.md","filePath":"guide/operators/combination/index.md"}'),n={name:"guide/operators/combination/index.md"};function r(h,t,l,p,o,d){return s(),a("div",null,t[0]||(t[0]=[e(`<h1 id="結合オペレーター-pipeable-operators" tabindex="-1">結合オペレーター（Pipeable Operators） <a class="header-anchor" href="#結合オペレーター-pipeable-operators" aria-label="Permalink to &quot;結合オペレーター（Pipeable Operators）&quot;">​</a></h1><p>RxJS の結合（Combination）オペレーターは、複数の Observable を組み合わせて新しいストリームを作り出すための強力なツールです。</p><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>このページでは <strong>Pipeable Operators（パイプライン内で使用する形式）</strong> を扱います。</p><p><strong>Creation Functions（複数のObservableから新しいObservableを作成する形式）</strong> については、 <a href="/RxJS-with-TypeScript/guide/creation-functions/">3章 Creation Functions</a> を参照してください。</p></div><h2 id="creation-functions-vs-pipeable-operators" tabindex="-1">Creation Functions vs Pipeable Operators <a class="header-anchor" href="#creation-functions-vs-pipeable-operators" aria-label="Permalink to &quot;Creation Functions vs Pipeable Operators&quot;">​</a></h2><p>結合に関連する機能は、2つの形式で提供されています。</p><h3 id="creation-functions-3章で解説" tabindex="-1">Creation Functions（3章で解説） <a class="header-anchor" href="#creation-functions-3章で解説" aria-label="Permalink to &quot;Creation Functions（3章で解説）&quot;">​</a></h3><p>複数のObservableを引数として受け取り、新しいObservableを作成。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { concat, merge, combineLatest, zip, race, forkJoin } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creation Function として使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> combined$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obs1$, obs2$, obs3$);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> merged$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(source1$, source2$);</span></span></code></pre></div><p>詳細は <a href="/RxJS-with-TypeScript/guide/creation-functions/">Creation Functions</a> を参照。</p><h3 id="pipeable-operators-このページで解説" tabindex="-1">Pipeable Operators（このページで解説） <a class="header-anchor" href="#pipeable-operators-このページで解説" aria-label="Permalink to &quot;Pipeable Operators（このページで解説）&quot;">​</a></h3><p>既存のObservableに対して <code>.pipe()</code> 内で使用。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { concatWith, mergeWith, combineLatestWith } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Pipeable Operator として使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  concatWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(other$),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="pipeable-operators-一覧" tabindex="-1">Pipeable Operators 一覧 <a class="header-anchor" href="#pipeable-operators-一覧" aria-label="Permalink to &quot;Pipeable Operators 一覧&quot;">​</a></h2><h3 id="◾-このページで扱うオペレーター" tabindex="-1">◾ このページで扱うオペレーター <a class="header-anchor" href="#◾-このページで扱うオペレーター" aria-label="Permalink to &quot;◾ このページで扱うオペレーター&quot;">​</a></h3><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th></tr></thead><tbody><tr><td><a href="./withLatestFrom.html">withLatestFrom</a></td><td>メインObservableの発行に応じて、最新の他ストリームの値を組み合わせます</td></tr><tr><td><a href="./mergeAll.html">mergeAll</a></td><td>Higher-order Observableを並行に平坦化します</td></tr><tr><td><a href="./concatAll.html">concatAll</a></td><td>Higher-order Observableを順番に平坦化します</td></tr><tr><td><a href="./switchAll.html">switchAll</a></td><td>最新のHigher-order Observableに切り替えます</td></tr><tr><td><a href="./exhaustAll.html">exhaustAll</a></td><td>実行中は新しいHigher-order Observableを無視します</td></tr><tr><td><a href="./combineLatestAll.html">combineLatestAll</a></td><td>全ての内部Observableの最新値を組み合わせます</td></tr><tr><td><a href="./zipAll.html">zipAll</a></td><td>各内部Observableの対応する値をペア化します</td></tr></tbody></table><h3 id="◾-creation-functions-として提供されるもの" tabindex="-1">◾ Creation Functions として提供されるもの <a class="header-anchor" href="#◾-creation-functions-として提供されるもの" aria-label="Permalink to &quot;◾ Creation Functions として提供されるもの&quot;">​</a></h3><p>以下は主に Creation Function として使用されます（<a href="/RxJS-with-TypeScript/guide/creation-functions/">3章</a>参照）。</p><table tabindex="0"><thead><tr><th>Function</th><th>説明</th><th>Pipeable版</th></tr></thead><tbody><tr><td><a href="/RxJS-with-TypeScript/guide/creation-functions/concat.html">concat</a></td><td>順番に結合</td><td><code>concatWith</code> (RxJS 7+)</td></tr><tr><td><a href="/RxJS-with-TypeScript/guide/creation-functions/merge.html">merge</a></td><td>並行結合</td><td><code>mergeWith</code> (RxJS 7+)</td></tr><tr><td><a href="/RxJS-with-TypeScript/guide/creation-functions/combineLatest.html">combineLatest</a></td><td>最新値を組み合わせ</td><td><code>combineLatestWith</code> (RxJS 7+)</td></tr><tr><td><a href="/RxJS-with-TypeScript/guide/creation-functions/zip.html">zip</a></td><td>対応する値をペア化</td><td><code>zipWith</code> (RxJS 7+)</td></tr><tr><td><a href="/RxJS-with-TypeScript/guide/creation-functions/race.html">race</a></td><td>最速のストリームを採用</td><td><code>raceWith</code> (RxJS 7+)</td></tr><tr><td><a href="/RxJS-with-TypeScript/guide/creation-functions/forkJoin.html">forkJoin</a></td><td>すべての完了を待つ</td><td>（Pipeable版なし）</td></tr></tbody></table><h2 id="さらに実践的に学びたい方へ" tabindex="-1">さらに実践的に学びたい方へ <a class="header-anchor" href="#さらに実践的に学びたい方へ" aria-label="Permalink to &quot;さらに実践的に学びたい方へ&quot;">​</a></h2><p>結合オペレーターを使ったリアルなシナリオ例は、<br><a href="./practical-use-cases.html">実用的なユースケース</a> にて詳しく紹介しています。</p>`,20)]))}const b=i(n,[["render",r]]);export{k as __pageData,b as default};
