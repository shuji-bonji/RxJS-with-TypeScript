import{_ as s,c as a,o as t,a2 as n}from"./chunks/framework.BvXV5w7a.js";const E=JSON.parse('{"title":"選択・分割系 Creation Functions","description":"複数のObservableから1つを選択したり、1つのObservableを複数に分割するCreation Functionsについて解説します。raceとpartitionの使い分けと実践例を学びます。","frontmatter":{"description":"複数のObservableから1つを選択したり、1つのObservableを複数に分割するCreation Functionsについて解説します。raceとpartitionの使い分けと実践例を学びます。"},"headers":[],"relativePath":"guide/creation-functions/selection/index.md","filePath":"guide/creation-functions/selection/index.md"}'),e={name:"guide/creation-functions/selection/index.md"};function h(l,i,p,k,r,o){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="選択・分割系-creation-functions" tabindex="-1">選択・分割系 Creation Functions <a class="header-anchor" href="#選択・分割系-creation-functions" aria-label="Permalink to &quot;選択・分割系 Creation Functions&quot;">​</a></h1><p>複数のObservableから1つを選択したり、1つのObservableを条件に応じて複数に分割するCreation Functionsです。</p><h2 id="選択・分割系-creation-functions-とは" tabindex="-1">選択・分割系 Creation Functions とは <a class="header-anchor" href="#選択・分割系-creation-functions-とは" aria-label="Permalink to &quot;選択・分割系 Creation Functions とは&quot;">​</a></h2><p>選択・分割系のCreation Functionsは、結合系とは異なり、以下の役割を持ちます。</p><ul><li><strong>選択</strong>: 複数のObservableの中から、特定の条件を満たすものを選ぶ</li><li><strong>分割</strong>: 1つのObservableを条件に応じて複数のObservableに分ける</li></ul><p>これらは「複数を1つにまとめる」結合とは逆方向、または異なる観点での操作を行います。</p><h2 id="主要な選択・分割系-creation-functions" tabindex="-1">主要な選択・分割系 Creation Functions <a class="header-anchor" href="#主要な選択・分割系-creation-functions" aria-label="Permalink to &quot;主要な選択・分割系 Creation Functions&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Function</th><th>説明</th><th>ユースケース</th></tr></thead><tbody><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/selection/race.html">race</a></strong></td><td>最初に発行したものを採用</td><td>複数データソースの競争</td></tr><tr><td><strong><a href="/RxJS-with-TypeScript/guide/creation-functions/selection/partition.html">partition</a></strong></td><td>条件で2つに分割</td><td>成功/失敗の分岐処理</td></tr></tbody></table><h2 id="使い分けの基準" tabindex="-1">使い分けの基準 <a class="header-anchor" href="#使い分けの基準" aria-label="Permalink to &quot;使い分けの基準&quot;">​</a></h2><h3 id="race-最速のobservableを選択" tabindex="-1">race - 最速のObservableを選択 <a class="header-anchor" href="#race-最速のobservableを選択" aria-label="Permalink to &quot;race - 最速のObservableを選択&quot;">​</a></h3><p><code>race</code>は、複数のObservableを同時に購読し、<strong>最初に値を発行したObservable</strong>を採用します。採用されなかったObservableは自動的にunsubscribeされます。</p><p><strong>ユースケース</strong>:</p><ul><li>複数のAPIエンドポイントから最速のレスポンスを採用</li><li>タイムアウト処理（本来の処理 vs タイマー）</li><li>キャッシュと実際のAPI呼び出しの競争</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { race, timer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mapTo } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs/operators&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 複数のデータソースから最速のものを採用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fast$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> timer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Fast API&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> slow$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> timer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Slow API&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">race</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fast$, slow$).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: &#39;Fast API&#39; (1秒後に出力され、slow$はキャンセルされる)</span></span></code></pre></div><h3 id="partition-条件で分割" tabindex="-1">partition - 条件で分割 <a class="header-anchor" href="#partition-条件で分割" aria-label="Permalink to &quot;partition - 条件で分割&quot;">​</a></h3><p><code>partition</code>は、1つのObservableを条件関数に基づいて<strong>2つのObservable</strong>に分割します。返り値は<code>[trueの場合, falseの場合]</code>という配列です。</p><p><strong>ユースケース</strong>:</p><ul><li>成功と失敗の分離</li><li>偶数と奇数の分離</li><li>有効なデータと無効なデータの分離</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { of, partition } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> source$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 偶数と奇数に分割</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">even$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">odd$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> partition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(source$, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">even$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Even:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: Even: 2, Even: 4, Even: 6</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">odd$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Odd:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: Odd: 1, Odd: 3, Odd: 5</span></span></code></pre></div><h2 id="pipeable-operator-との対応関係" tabindex="-1">Pipeable Operator との対応関係 <a class="header-anchor" href="#pipeable-operator-との対応関係" aria-label="Permalink to &quot;Pipeable Operator との対応関係&quot;">​</a></h2><p>選択・分割系Creation Functionsにも、対応するPipeable Operatorが存在します。</p><table tabindex="0"><thead><tr><th>Creation Function</th><th>Pipeable Operator</th></tr></thead><tbody><tr><td><code>race(a$, b$)</code></td><td><code>a$.pipe(raceWith(b$))</code></td></tr><tr><td><code>partition(source$, predicate)</code></td><td>パイプライン内では使えない（Creation Functionのみ）</td></tr></tbody></table><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><code>partition</code>にはPipeable Operator版が存在しません。分割が必要な場合は、Creation Functionとして使用するか、<code>filter</code>を2回使って手動で分割します。</p></div><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>各Creation Functionの詳細な動作と実践例を学ぶには、上記の表からリンクをクリックしてください。</p><p>また、<a href="/RxJS-with-TypeScript/guide/creation-functions/combination/">結合系 Creation Functions</a>や<a href="/RxJS-with-TypeScript/guide/creation-functions/conditional/">条件分岐系 Creation Functions</a>も併せて学習することで、Creation Functionsの全体像を理解できます。</p>`,26)]))}const c=s(e,[["render",h]]);export{E as __pageData,c as default};
