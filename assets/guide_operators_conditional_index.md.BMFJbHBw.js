import{_ as e,c as a,o as r,a2 as o}from"./chunks/framework.BvXV5w7a.js";const u=JSON.parse('{"title":"条件オペレーター","description":"RxJSの条件オペレーターは、ストリーム内の値に対して条件判定を行い、デフォルト値の設定や条件評価を行うための演算子です。","frontmatter":{"description":"RxJSの条件オペレーターは、ストリーム内の値に対して条件判定を行い、デフォルト値の設定や条件評価を行うための演算子です。"},"headers":[],"relativePath":"guide/operators/conditional/index.md","filePath":"guide/operators/conditional/index.md"}'),d={name:"guide/operators/conditional/index.md"};function i(n,t,s,c,l,p){return r(),a("div",null,t[0]||(t[0]=[o('<h1 id="条件オペレーター" tabindex="-1">条件オペレーター <a class="header-anchor" href="#条件オペレーター" aria-label="Permalink to &quot;条件オペレーター&quot;">​</a></h1><p>RxJSの条件オペレーターは、ストリームの値に対して<strong>条件判定や評価</strong>を行うためのものです。 空のストリームへのデフォルト値設定や、すべての値が条件を満たすかの確認など、 実用的なシナリオで活用できます。</p><p>本ページでは、以下の構成でそれぞれの演算子を「基本構文と動作」「典型的な活用例」「実践コード例（UI付き）」の3段階で紹介します。</p><p>それぞれのオペレーターがどのようなユースケースに適しているかを把握し、 組み合わせることで、より堅牢で意図に沿ったリアクティブな処理設計が可能になります。</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><code>iif</code>と<code>defer</code>は<strong>Creation Functions</strong>（Observable作成関数）であり、条件オペレーターではありません。これらについては <a href="/RxJS-with-TypeScript/guide/creation-functions/">Chapter 3: Creation Functions</a> を参照してください。</p></div><h2 id="演算子一覧" tabindex="-1">演算子一覧 <a class="header-anchor" href="#演算子一覧" aria-label="Permalink to &quot;演算子一覧&quot;">​</a></h2><p>以下に、主要な条件オペレーターとその特徴を一覧でまとめます。</p><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th></tr></thead><tbody><tr><td><a href="./defaultIfEmpty.html">defaultIfEmpty</a></td><td>値を発行しなかった場合の代替値</td></tr><tr><td><a href="./every.html">every</a></td><td>条件にすべての値が合致するか評価</td></tr><tr><td><a href="./isEmpty.html">isEmpty</a></td><td>発行される値が存在するかを確認</td></tr></tbody></table><blockquote><p>演算子の<strong>実用的な組み合わせ方</strong>や<strong>ユースケースベースの応用例</strong>については、後半の <a href="./practical-use-cases.html">実践的なユースケース</a> セクションで紹介しています。</p></blockquote><h2 id="他のカテゴリとの連携も意識しよう" tabindex="-1">他のカテゴリとの連携も意識しよう <a class="header-anchor" href="#他のカテゴリとの連携も意識しよう" aria-label="Permalink to &quot;他のカテゴリとの連携も意識しよう&quot;">​</a></h2><p>条件オペレーターは他の変換・結合・ユーティリティ系の演算子と組み合わせてこそ真価を発揮します。<br> たとえば <code>switchMap</code> や <code>catchError</code> と組み合わせて「APIの切り替えとリカバリ処理」を行う構成などはよくあるパターンです。</p><p>より実践的な使用例については、<a href="./practical-use-cases.html">実用的なユースケース</a> にて詳しく解説しています。</p>',12)]))}const f=e(d,[["render",i]]);export{u as __pageData,f as default};
