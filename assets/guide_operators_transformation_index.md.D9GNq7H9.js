import{_ as a,c as e,o as l,a2 as r}from"./chunks/framework.BvXV5w7a.js";const p=JSON.parse('{"title":"変換オペレーター","description":"","frontmatter":{},"headers":[],"relativePath":"guide/operators/transformation/index.md","filePath":"guide/operators/transformation/index.md"}'),i={name:"guide/operators/transformation/index.md"};function h(n,t,f,o,d,s){return l(),e("div",null,t[0]||(t[0]=[r('<h1 id="変換オペレーター" tabindex="-1">変換オペレーター <a class="header-anchor" href="#変換オペレーター" aria-label="Permalink to &quot;変換オペレーター&quot;">​</a></h1><p>変換オペレーターは、RxJSのパイプライン内でデータを変形・加工するために使用されます。<br> 値を新しい形に変換することで、リアクティブなデータフローをより柔軟かつ強力に制御できるようになります。</p><h2 id="🧩-主な変換オペレーター" tabindex="-1">🧩 主な変換オペレーター <a class="header-anchor" href="#🧩-主な変換オペレーター" aria-label="Permalink to &quot;🧩 主な変換オペレーター&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">カテゴリ</th><th style="text-align:left;">オペレーター例</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">単純な値の変換</td><td style="text-align:left;"><a href="./map.html"><code>map</code></a>, <a href="./pluck.html">pluck</a>, <a href="./mapTo.html">mapTo</a></td><td style="text-align:left;">各値を変換または抽出</td></tr><tr><td style="text-align:left;">累積処理</td><td style="text-align:left;"><a href="./scan.html">scan</a></td><td style="text-align:left;">値を蓄積しながら出力</td></tr><tr><td style="text-align:left;">非同期変換</td><td style="text-align:left;"><a href="./mergeMap.html">mergeMap</a>, <a href="./switchMap.html">switchMap</a>, <a href="./concatMap.html">concatMap</a>, <a href="./exhaustMap.html">exhaustMap</a></td><td style="text-align:left;">非同期処理を展開・制御</td></tr><tr><td style="text-align:left;">バッチ処理</td><td style="text-align:left;"><a href="./bufferTime.html">bufferTime</a>, <a href="./bufferCount.html">bufferCount</a>, <a href="./windowTime.html">windowTime</a></td><td style="text-align:left;">一定時間・個数でまとめる</td></tr></tbody></table><h2 id="📖-各オペレーターの詳細" tabindex="-1">📖 各オペレーターの詳細 <a class="header-anchor" href="#📖-各オペレーターの詳細" aria-label="Permalink to &quot;📖 各オペレーターの詳細&quot;">​</a></h2><ul><li><a href="./map.html">map</a> - 各値に変換関数を適用</li><li><a href="./scan.html">scan</a> - 累積的に値を生成</li><li><a href="./pluck.html">pluck</a> - オブジェクトからプロパティを抽出</li><li><a href="./mapTo.html">mapTo</a> - 常に固定値を出力</li><li><a href="./mergeMap.html">mergeMap</a> - 各値をObservableに変換し、並列で結合</li><li><a href="./switchMap.html">switchMap</a> - 最新のObservableに切り替え</li><li><a href="./concatMap.html">concatMap</a> - 各Observableを順番に実行</li><li><a href="./exhaustMap.html">exhaustMap</a> - 実行中は新しい入力を無視</li><li><a href="./bufferTime.html">bufferTime</a> - 一定時間ごとに値をまとめる</li><li><a href="./bufferCount.html">bufferCount</a> - 指定個数ごとにまとめる</li><li><a href="./windowTime.html">windowTime</a> - 一定時間ごとにサブObservableに分割</li></ul><h2 id="💡-実用的な変換パターン" tabindex="-1">💡 実用的な変換パターン <a class="header-anchor" href="#💡-実用的な変換パターン" aria-label="Permalink to &quot;💡 実用的な変換パターン&quot;">​</a></h2><p>現実のアプリケーションでは、変換オペレーターを組み合わせることで<br> 次のような処理が可能になります。</p><ul><li>入力バリデーションとフィードバック</li><li>非同期APIリクエストの最適制御</li><li>データの整形・集約・正規化</li><li>イベントストリームのバッチ処理やグループ化</li></ul><p>👉 詳しくは：<a href="./practical-use-cases.html">実用的な変換パターン</a> を参照してください。</p>',10)]))}const c=a(i,[["render",h]]);export{p as __pageData,c as default};
