import{_ as e,c as a,o as d,a2 as r}from"./chunks/framework.BvXV5w7a.js";const b=JSON.parse('{"title":"ユーティリティオペレーター","description":"ユーティリティオペレーターは、RxJSにおいて副作用の制御や遅延処理、購読の管理などを補助的に担う演算子群です。","frontmatter":{"description":"ユーティリティオペレーターは、RxJSにおいて副作用の制御や遅延処理、購読の管理などを補助的に担う演算子群です。"},"headers":[],"relativePath":"guide/operators/utility/index.md","filePath":"guide/operators/utility/index.md"}'),o={name:"guide/operators/utility/index.md"};function c(h,t,i,l,n,s){return d(),a("div",null,t[0]||(t[0]=[r('<h1 id="ユーティリティオペレーター" tabindex="-1">ユーティリティオペレーター <a class="header-anchor" href="#ユーティリティオペレーター" aria-label="Permalink to &quot;ユーティリティオペレーター&quot;">​</a></h1><p>RxJSのユーティリティオペレーターは、データの変換やフィルタリングといった主目的の処理ではなく、<strong>ストリームの補助処理（副作用、状態制御、UI対応など）を担う演算子群</strong>です。</p><p>本ページでは、演算子を以下のように目的別に分類し、基本的な用途を確認できる一覧を掲載します。<br> 詳細な使い方や実践例については、各ページまたは <a href="./practical-use-cases.html">実用的なユースケース</a> を参照してください。</p><h2 id="📦-演算子一覧-目的別" tabindex="-1">📦 演算子一覧（目的別） <a class="header-anchor" href="#📦-演算子一覧-目的別" aria-label="Permalink to &quot;📦 演算子一覧（目的別）&quot;">​</a></h2><h3 id="◾-サイドエフェクト・状態制御" tabindex="-1">◾ サイドエフェクト・状態制御 <a class="header-anchor" href="#◾-サイドエフェクト・状態制御" aria-label="Permalink to &quot;◾ サイドエフェクト・状態制御&quot;">​</a></h3><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th><th>よく組み合わせる演算子</th></tr></thead><tbody><tr><td><a href="./tap.html">tap</a></td><td>値を変更せず副作用を実行（ログ出力やUI更新など）</td><td><code>map</code>, <code>switchMap</code></td></tr><tr><td><a href="./finalize.html">finalize</a></td><td>ストリーム終了時にクリーンアップ処理を実行</td><td><code>tap</code>, <code>catchError</code></td></tr></tbody></table><h3 id="◾-タイミング・遅延制御" tabindex="-1">◾ タイミング・遅延制御 <a class="header-anchor" href="#◾-タイミング・遅延制御" aria-label="Permalink to &quot;◾ タイミング・遅延制御&quot;">​</a></h3><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th><th>よく組み合わせる演算子</th></tr></thead><tbody><tr><td><a href="./delay.html">delay</a></td><td>各値の発行を指定時間遅延させる</td><td><code>tap</code>, <code>concatMap</code></td></tr><tr><td><a href="./timeout.html">timeout</a></td><td>発行が一定時間を超えるとエラー発生</td><td><code>catchError</code>, <code>retry</code></td></tr><tr><td><a href="./takeUntil.html">takeUntil</a></td><td>指定Observableが通知した時点で購読終了</td><td><code>interval</code>, <code>fromEvent</code></td></tr></tbody></table><h3 id="◾-初期値・繰り返し・配列化など" tabindex="-1">◾ 初期値・繰り返し・配列化など <a class="header-anchor" href="#◾-初期値・繰り返し・配列化など" aria-label="Permalink to &quot;◾ 初期値・繰り返し・配列化など&quot;">​</a></h3><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th><th>よく組み合わせる演算子</th></tr></thead><tbody><tr><td><a href="./startWith.html">startWith</a></td><td>ストリームの最初に初期値を発行</td><td><code>scan</code>, <code>combineLatest</code></td></tr><tr><td><a href="./repeat.html">repeat</a></td><td>完了後にストリーム全体を再購読</td><td><code>tap</code>, <code>delay</code></td></tr><tr><td><a href="./retry.html">retry</a></td><td>エラー時に再試行</td><td><code>catchError</code>, <code>switchMap</code></td></tr><tr><td><a href="./toArray.html">toArray</a></td><td>ストリームの全値を1つの配列で発行（完了時）</td><td><code>concatMap</code>, <code>take</code></td></tr></tbody></table><h2 id="📌-備考" tabindex="-1">📌 備考 <a class="header-anchor" href="#📌-備考" aria-label="Permalink to &quot;📌 備考&quot;">​</a></h2><ul><li><code>retry</code> と <code>repeat</code> の違い： <ul><li><code>retry</code>: <strong>エラーが出た時に再試行</strong></li><li><code>repeat</code>: <strong>正常に完了した時に再試行</strong></li></ul></li><li><code>toArray</code> は完了しない限り値を出力しないため、 <code>take()</code> などと併用するのが一般的です。</li></ul>',12)]))}const m=e(o,[["render",c]]);export{b as __pageData,m as default};
