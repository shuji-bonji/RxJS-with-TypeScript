import{_ as e,c as d,o as a,a2 as o}from"./chunks/framework.BvXV5w7a.js";const b=JSON.parse('{"title":"マルチキャスティングで利用するオペレーター","description":"","frontmatter":{},"headers":[],"relativePath":"guide/operators/multicasting.md","filePath":"guide/operators/multicasting.md"}'),r={name:"guide/operators/multicasting.md"};function c(i,t,l,s,n,h){return a(),d("div",null,t[0]||(t[0]=[o('<h1 id="マルチキャスティングで利用するオペレーター" tabindex="-1">マルチキャスティングで利用するオペレーター <a class="header-anchor" href="#マルチキャスティングで利用するオペレーター" aria-label="Permalink to &quot;マルチキャスティングで利用するオペレーター&quot;">​</a></h1><p>RxJSでは、複数の購読者に対して同じObservableの出力を共有する「マルチキャスティング」を実現するために、いくつかの専用オペレーターが用意されています。</p><p>このページでは、<strong>演算子としての観点</strong>からマルチキャスティングに関連する代表的なオペレーターを簡単に紹介し、<br> その使い分けや注意点について整理します。</p><blockquote><p>❗ マルチキャストの概念や Subject を用いた構造的な説明、具体的なコード例については<br><a href="/RxJS-with-TypeScript/guide/subjects/multicasting.html">3. Subjectとマルチキャスト</a> の章をご参照ください。</p></blockquote><h2 id="主なマルチキャスティング関連オペレーター" tabindex="-1">主なマルチキャスティング関連オペレーター <a class="header-anchor" href="#主なマルチキャスティング関連オペレーター" aria-label="Permalink to &quot;主なマルチキャスティング関連オペレーター&quot;">​</a></h2><table tabindex="0"><thead><tr><th>オペレーター</th><th>特徴</th><th>備考</th></tr></thead><tbody><tr><td><code>share()</code></td><td>最も簡単なマルチキャスト手段。内部で<code>publish().refCount()</code>と同等</td><td>多くのユースケースで十分</td></tr><tr><td><code>shareReplay()</code></td><td>マルチキャストに加え、直近の値を再購読時に提供</td><td>状態の再利用が必要な場合</td></tr><tr><td><code>publish()</code> + <code>refCount()</code></td><td>実行タイミングを制御可能なマルチキャスト構成</td><td>古典的かつ柔軟な構成</td></tr><tr><td><code>multicast()</code></td><td><code>Subject</code>を明示的に渡す低レベルAPI</td><td>カスタムSubjectを使いたい場合に有効</td></tr></tbody></table><h2 id="マルチキャスティングパターンの比較" tabindex="-1">マルチキャスティングパターンの比較 <a class="header-anchor" href="#マルチキャスティングパターンの比較" aria-label="Permalink to &quot;マルチキャスティングパターンの比較&quot;">​</a></h2><table tabindex="0"><thead><tr><th>オペレーター</th><th>特徴</th><th>ユースケース</th></tr></thead><tbody><tr><td><code>share()</code></td><td>基本的なマルチキャスト</td><td>複数コンポーネントでの同時利用</td></tr><tr><td><code>shareReplay(n)</code></td><td>過去n個の値をバッファ</td><td>遅延購読/状態共有</td></tr><tr><td><code>publish() + refCount()</code></td><td>より細かい制御が可能</td><td>高度な制御が必要な場合</td></tr><tr><td><code>multicast(() =&gt; new Subject())</code></td><td>完全なカスタマイズ</td><td>特殊なSubjectタイプが必要な場合</td></tr></tbody></table><h2 id="マルチキャスティング使用時の注意点" tabindex="-1">マルチキャスティング使用時の注意点 <a class="header-anchor" href="#マルチキャスティング使用時の注意点" aria-label="Permalink to &quot;マルチキャスティング使用時の注意点&quot;">​</a></h2><ol><li><strong>タイミングの把握</strong>：購読開始時期によって受け取る値が異なることを理解する</li><li><strong>ライフサイクル管理</strong>：特に<code>refCount</code>を使う場合、購読者がゼロになるとストリームが完了する</li><li><strong>エラー処理</strong>：マルチキャストされたObservableでエラーが発生すると、全購読者に影響する</li><li><strong>メモリ管理</strong>：<code>shareReplay</code>などを使う場合、メモリリークに注意する</li></ol>',10)]))}const p=e(r,[["render",c]]);export{b as __pageData,p as default};
