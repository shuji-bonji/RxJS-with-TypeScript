import{_ as l,c as o,o as i,a2 as a}from"./chunks/framework.BvXV5w7a.js";const m=JSON.parse('{"title":"アンチパターン回避チェックリスト","description":"RxJSコードを書く際に確認すべきアンチパターン回避チェックリスト。15のベストプラクティスを確認し、堅牢で保守性の高いコードを実現しましょう。","frontmatter":{"description":"RxJSコードを書く際に確認すべきアンチパターン回避チェックリスト。15のベストプラクティスを確認し、堅牢で保守性の高いコードを実現しましょう。"},"headers":[],"relativePath":"guide/anti-patterns/checklist.md","filePath":"guide/anti-patterns/checklist.md"}'),t={name:"guide/anti-patterns/checklist.md"};function r(c,e,s,d,n,h){return i(),o("div",null,e[0]||(e[0]=[a('<h1 id="アンチパターン回避チェックリスト" tabindex="-1">アンチパターン回避チェックリスト <a class="header-anchor" href="#アンチパターン回避チェックリスト" aria-label="Permalink to &quot;アンチパターン回避チェックリスト&quot;">​</a></h1><p>このチェックリストを使って、自分のRxJSコードがアンチパターンに該当していないか確認しましょう。各項目をクリックすると、詳しい解説とコード例を確認できます。</p><h2 id="📋-チェック項目" tabindex="-1">📋 チェック項目 <a class="header-anchor" href="#📋-チェック項目" aria-label="Permalink to &quot;📋 チェック項目&quot;">​</a></h2><h3 id="🔴-重大な問題の回避" tabindex="-1">🔴 重大な問題の回避 <a class="header-anchor" href="#🔴-重大な問題の回避" aria-label="Permalink to &quot;🔴 重大な問題の回避&quot;">​</a></h3><ul><li><p>[ ] <strong><a href="./common-mistakes.html#1-subject-の外部公開">Subject は <code>asObservable()</code> で読み取り専用として公開している</a></strong></p><ul><li><code>Subject</code> を直接 export せず、<code>asObservable()</code> で Observable として公開</li><li>状態変更は専用メソッド経由でのみ可能にする</li></ul></li><li><p>[ ] <strong><a href="./common-mistakes.html#2-ネストした-subscribe-コールバック地獄">ネストした <code>subscribe</code> を避け、高階オペレーターを使っている</a></strong></p><ul><li><code>subscribe</code> 内で別の <code>subscribe</code> を呼ばない</li><li><code>switchMap</code>、<code>mergeMap</code>、<code>concatMap</code> などでフラット化</li></ul></li><li><p>[ ] <strong><a href="./common-mistakes.html#3-unsubscribe-忘れ-メモリリーク">無限ストリームは <code>takeUntil</code> や <code>unsubscribe</code> で確実に解除している</a></strong></p><ul><li>イベントリスナーなど無限に続くストリームは必ず購読解除</li><li><code>takeUntil</code> パターンまたは <code>Subscription</code> の管理</li></ul></li><li><p>[ ] <strong><a href="./common-mistakes.html#4-sharereplay-の誤用"><code>shareReplay</code> は <code>bufferSize</code> と <code>refCount</code> を明示している</a></strong></p><ul><li><code>shareReplay({ bufferSize: 1, refCount: true })</code> の形式を使用</li><li>メモリリークを防ぐために参照カウントを有効化</li></ul></li></ul><h3 id="🟡-注意が必要な問題の回避" tabindex="-1">🟡 注意が必要な問題の回避 <a class="header-anchor" href="#🟡-注意が必要な問題の回避" aria-label="Permalink to &quot;🟡 注意が必要な問題の回避&quot;">​</a></h3><ul><li><p>[ ] <strong><a href="./common-mistakes.html#5-map-での副作用"><code>map</code> は純粋関数として使い、副作用は <code>tap</code> に分離している</a></strong></p><ul><li><code>map</code> 内で状態変更やログ出力をしない</li><li>副作用は <code>tap</code> オペレーターで明示的に分離</li></ul></li><li><p>[ ] <strong><a href="./common-mistakes.html#6-cold-hot-observable-の違いの無視">Cold/Hot Observable の違いを理解し、適切に使い分けている</a></strong></p><ul><li>HTTP リクエストなどは <code>shareReplay</code> で Hot に変換</li><li>購読ごとに実行されるべきか、共有すべきかを判断</li></ul></li><li><p>[ ] <strong><a href="./common-mistakes.html#7-promise-と-observable-の不適切な混在">Promise は <code>from</code> で Observable に変換して統一している</a></strong></p><ul><li>Promise と Observable を混在させない</li><li><code>from()</code> で Observable に変換して統一的に処理</li></ul></li><li><p>[ ] <strong><a href="./common-mistakes.html#8-バックプレッシャーの無視">高頻度イベントは <code>debounceTime</code> や <code>throttleTime</code> で制御している</a></strong></p><ul><li>検索入力などは <code>debounceTime</code> で制御</li><li>スクロールイベントなどは <code>throttleTime</code> で制御</li><li><code>distinctUntilChanged</code> で重複を除外</li></ul></li></ul><h3 id="🔵-コード品質の向上" tabindex="-1">🔵 コード品質の向上 <a class="header-anchor" href="#🔵-コード品質の向上" aria-label="Permalink to &quot;🔵 コード品質の向上&quot;">​</a></h3><ul><li><p>[ ] <strong><a href="./common-mistakes.html#9-エラーの握りつぶし">エラーは適切にログ記録し、ユーザーにフィードバックしている</a></strong></p><ul><li><code>catchError</code> でエラーをキャッチし、適切に処理</li><li>ユーザーに分かりやすいエラーメッセージを表示</li><li>必要に応じて <code>retry</code> / <code>retryWhen</code> で再試行</li></ul></li><li><p>[ ] <strong><a href="./common-mistakes.html#10-dom-イベントサブスクリプションのリーク">DOM イベントリスナーは適切に解放している</a></strong></p><ul><li><code>fromEvent</code> の購読は必ず解除</li><li>コンポーネント破棄時に <code>takeUntil</code> で自動解除</li></ul></li><li><p>[ ] <strong><a href="./common-mistakes.html#11-型安全性の欠如-any-の多用"><code>any</code> を避け、型安全性を確保している</a></strong></p><ul><li>インターフェースや型エイリアスを定義</li><li><code>Observable&lt;T&gt;</code> の型パラメータを明示</li><li>TypeScript の型推論を活用</li></ul></li><li><p>[ ] <strong><a href="./common-mistakes.html#12-不適切なオペレーター選択">目的に合った適切なオペレーターを選択している</a></strong></p><ul><li>検索: <code>switchMap</code>（最新のみ）</li><li>並列処理: <code>mergeMap</code></li><li>順次処理: <code>concatMap</code></li><li>連打防止: <code>exhaustMap</code></li></ul></li><li><p>[ ] <strong><a href="./common-mistakes.html#13-過度な複雑化">シンプルな処理は RxJS を使わず、通常の JavaScript で書いている</a></strong></p><ul><li>配列処理などは通常の JavaScript で十分</li><li>RxJS は非同期処理やイベントストリームに使用</li></ul></li><li><p>[ ] <strong><a href="./common-mistakes.html#14-subscribe-内での状態変更"><code>subscribe</code> 内で直接状態変更せず、リアクティブに管理している</a></strong></p><ul><li><code>BehaviorSubject</code> や <code>scan</code> で状態を管理</li><li><code>subscribe</code> は最終的なトリガーとして使用</li></ul></li><li><p>[ ] <strong><a href="./common-mistakes.html#15-テストの欠如">RxJS コードのテストを書いている</a></strong></p><ul><li><code>TestScheduler</code> でマーブルテストを実施</li><li>非同期処理を同期的にテスト可能に</li></ul></li></ul><h2 id="🎯-使い方" tabindex="-1">🎯 使い方 <a class="header-anchor" href="#🎯-使い方" aria-label="Permalink to &quot;🎯 使い方&quot;">​</a></h2><h3 id="_1-コードレビュー時" tabindex="-1">1. コードレビュー時 <a class="header-anchor" href="#_1-コードレビュー時" aria-label="Permalink to &quot;1. コードレビュー時&quot;">​</a></h3><p>新しいコードを書いた後、このチェックリストを使って自己レビューを実施しましょう。</p><h3 id="_2-プルリクエスト時" tabindex="-1">2. プルリクエスト時 <a class="header-anchor" href="#_2-プルリクエスト時" aria-label="Permalink to &quot;2. プルリクエスト時&quot;">​</a></h3><p>プルリクエストのテンプレートにこのチェックリストを含めることで、レビュアーと共通の基準で確認できます。</p><h3 id="_3-定期的な見直し" tabindex="-1">3. 定期的な見直し <a class="header-anchor" href="#_3-定期的な見直し" aria-label="Permalink to &quot;3. 定期的な見直し&quot;">​</a></h3><p>既存のコードベースに対して定期的にこのチェックリストを使い、アンチパターンが混入していないか確認しましょう。</p><h3 id="_4-チーム内での共有" tabindex="-1">4. チーム内での共有 <a class="header-anchor" href="#_4-チーム内での共有" aria-label="Permalink to &quot;4. チーム内での共有&quot;">​</a></h3><p>チームメンバーと共有し、RxJS のベストプラクティスを統一しましょう。</p><h2 id="💡-関連リソース" tabindex="-1">💡 関連リソース <a class="header-anchor" href="#💡-関連リソース" aria-label="Permalink to &quot;💡 関連リソース&quot;">​</a></h2><ul><li><strong><a href="./common-mistakes.html">よくある間違いと対処法</a></strong> - 各アンチパターンの詳細な解説とコード例</li><li><strong><a href="./index.html">アンチパターン集トップ</a></strong> - アンチパターン一覧と学習の進め方</li><li><strong><a href="/RxJS-with-TypeScript/guide/error-handling/strategies.html">エラーハンドリング</a></strong> - エラー処理のベストプラクティス</li><li><strong><a href="/RxJS-with-TypeScript/guide/testing/unit-tests.html">テスト手法</a></strong> - RxJS コードのテスト方法</li></ul><h2 id="✅-チェックリスト活用のコツ" tabindex="-1">✅ チェックリスト活用のコツ <a class="header-anchor" href="#✅-チェックリスト活用のコツ" aria-label="Permalink to &quot;✅ チェックリスト活用のコツ&quot;">​</a></h2><ol><li><p><strong>全項目を一度に完璧にしようとしない</strong></p><ul><li>まずは重大な問題（🔴）から優先的に対処</li><li>段階的に改善していく</li></ul></li><li><p><strong>チーム内で優先度を決める</strong></p><ul><li>プロジェクトの特性に応じて重要度を調整</li><li>カスタマイズしたチェックリストを作成</li></ul></li><li><p><strong>自動化を検討</strong></p><ul><li>ESLint などの静的解析ツールで自動チェック</li><li>CI/CD パイプラインに組み込む</li></ul></li><li><p><strong>定期的に更新</strong></p><ul><li>RxJS のバージョンアップに応じて更新</li><li>チームの経験から得た知見を反映</li></ul></li></ol><hr><p><strong>重要</strong>: このチェックリストは完璧なコードを書くためのものではなく、よくある問題を避けるためのガイドです。プロジェクトの文脈に応じて柔軟に活用してください。</p>',24)]))}const p=l(t,[["render",r]]);export{m as __pageData,p as default};
