import{_ as r,c as e,o as a,a2 as d}from"./chunks/framework.BvXV5w7a.js";const b=JSON.parse('{"title":"RxJSアンチパターン集","description":"RxJSのアンチパターンを理解し、より堅牢で保守性の高いコードを書くための実践的なガイドです。Subjectの誤用、ネストしたsubscribe、subscribe内の条件分岐、メモリリーク、shareReplayの誤用など、よくある16の間違いとその対処法を解説します。","frontmatter":{"description":"RxJSのアンチパターンを理解し、より堅牢で保守性の高いコードを書くための実践的なガイドです。Subjectの誤用、ネストしたsubscribe、subscribe内の条件分岐、メモリリーク、shareReplayの誤用など、よくある16の間違いとその対処法を解説します。"},"headers":[],"relativePath":"guide/anti-patterns/index.md","filePath":"guide/anti-patterns/index.md"}'),o={name:"guide/anti-patterns/index.md"};function s(n,t,i,h,l,m){return a(),e("div",null,t[0]||(t[0]=[d('<h1 id="rxjsアンチパターン集" tabindex="-1">RxJSアンチパターン集 <a class="header-anchor" href="#rxjsアンチパターン集" aria-label="Permalink to &quot;RxJSアンチパターン集&quot;">​</a></h1><p>RxJSは強力なリアクティブプログラミングのライブラリですが、誤った使い方をすると、バグの温床や保守性の低下を招きます。このセクションでは、TypeScriptでRxJSを使う際によくある間違いと、それを避けるためのベストプラクティスを紹介します。</p><h2 id="このセクションの目的" tabindex="-1">このセクションの目的 <a class="header-anchor" href="#このセクションの目的" aria-label="Permalink to &quot;このセクションの目的&quot;">​</a></h2><ul><li><strong>バグを未然に防ぐ</strong>: よくある間違いを事前に理解することで、実装時のトラブルを回避</li><li><strong>保守性を向上させる</strong>: 読みやすく、テストしやすいコードパターンを習得</li><li><strong>パフォーマンスを最適化</strong>: メモリリークや不要な処理を防ぐテクニックを学習</li></ul><h2 id="アンチパターン一覧" tabindex="-1">アンチパターン一覧 <a class="header-anchor" href="#アンチパターン一覧" aria-label="Permalink to &quot;アンチパターン一覧&quot;">​</a></h2><p>このセクションでは、以下の17のアンチパターンを取り上げています。</p><h3 id="🔴-重大な問題" tabindex="-1">🔴 重大な問題 <a class="header-anchor" href="#🔴-重大な問題" aria-label="Permalink to &quot;🔴 重大な問題&quot;">​</a></h3><p>これらのパターンは、アプリケーションに深刻な影響を与える可能性があります。</p><table tabindex="0"><thead><tr><th>パターン</th><th>問題</th><th>影響</th></tr></thead><tbody><tr><td><strong><a href="./common-mistakes.html#1-subject-の外部公開">Subject の外部公開</a></strong></td><td><code>Subject</code> をそのまま公開し、外部から <code>next()</code> を呼べる状態にする</td><td>状態管理の予測不可能性、デバッグ困難</td></tr><tr><td><strong><a href="./common-mistakes.html#2-ネストした-subscribe-コールバック地獄">ネストした subscribe</a></strong></td><td><code>subscribe</code> の中でさらに <code>subscribe</code> を呼ぶ</td><td>コールバック地獄、エラー処理の複雑化</td></tr><tr><td><strong><a href="./flag-management.html">状態管理フラグの乱立</a></strong></td><td>17個のbooleanフラグで状態を管理、命令型思考の残存</td><td>可読性低下、保守困難、バグの温床</td></tr><tr><td><strong><a href="./subscribe-if-hell.html">subscribe内のif文ネスト</a></strong></td><td><code>subscribe</code> 内での複雑な条件分岐（3つ以上のネスト）</td><td>可読性低下、テスト困難、宣言的思想に反する</td></tr><tr><td><strong><a href="./common-mistakes.html#3-unsubscribe-忘れ-メモリリーク">unsubscribe 忘れ</a></strong></td><td>無限ストリームの購読を解除しない</td><td>メモリリーク、リソース浪費</td></tr><tr><td><strong><a href="./common-mistakes.html#4-sharereplay-の誤用">shareReplay の誤用</a></strong></td><td><code>shareReplay</code> の動作を理解せずに使う</td><td>古いデータの参照、メモリリーク</td></tr></tbody></table><h3 id="🟡-注意が必要な問題" tabindex="-1">🟡 注意が必要な問題 <a class="header-anchor" href="#🟡-注意が必要な問題" aria-label="Permalink to &quot;🟡 注意が必要な問題&quot;">​</a></h3><p>これらは特定の状況で問題になる可能性があります。</p><table tabindex="0"><thead><tr><th>パターン</th><th>問題</th><th>影響</th></tr></thead><tbody><tr><td><strong><a href="./common-mistakes.html#5-map-での副作用">map での副作用</a></strong></td><td><code>map</code> オペレーター内で状態を変更する</td><td>予測不可能な動作、テスト困難</td></tr><tr><td><strong><a href="./common-mistakes.html#6-cold-hot-observable-の違いの無視">Cold/Hot の無視</a></strong></td><td>Observable の性質を考慮しない</td><td>重複実行、予期しない動作</td></tr><tr><td><strong><a href="./promise-observable-mixing.html">Promise との混在</a></strong></td><td>Promise と Observable を適切に変換しない</td><td>キャンセル不可、エラーハンドリングの不備</td></tr><tr><td><strong><a href="./common-mistakes.html#8-バックプレッシャーの無視">バックプレッシャー無視</a></strong></td><td>高頻度イベントの制御を怠る</td><td>パフォーマンス低下、UI のフリーズ</td></tr></tbody></table><h3 id="🔵-コード品質に関する問題" tabindex="-1">🔵 コード品質に関する問題 <a class="header-anchor" href="#🔵-コード品質に関する問題" aria-label="Permalink to &quot;🔵 コード品質に関する問題&quot;">​</a></h3><p>これらは直接的なバグではありませんが、コードの品質を下げる要因です。</p><table tabindex="0"><thead><tr><th>パターン</th><th>問題</th><th>影響</th></tr></thead><tbody><tr><td><strong><a href="./common-mistakes.html#9-エラーの握りつぶし">エラーの握りつぶし</a></strong></td><td>エラーを適切に処理しない</td><td>デバッグ困難、ユーザー体験の低下</td></tr><tr><td><strong><a href="./common-mistakes.html#10-dom-イベントサブスクリプションのリーク">DOM イベントリーク</a></strong></td><td>DOM イベントリスナーを解放しない</td><td>メモリリーク、パフォーマンス低下</td></tr><tr><td><strong><a href="./common-mistakes.html#11-型安全性の欠如-any-の多用">型安全性の欠如</a></strong></td><td><code>any</code> を多用する</td><td>実行時エラー、リファクタリング困難</td></tr><tr><td><strong><a href="./common-mistakes.html#12-不適切なオペレーター選択">不適切なオペレーター選択</a></strong></td><td>目的に合わないオペレーターを使う</td><td>非効率、予期しない動作</td></tr><tr><td><strong><a href="./common-mistakes.html#13-過度な複雑化">過度な複雑化</a></strong></td><td>シンプルに書ける処理を複雑にする</td><td>可読性低下、保守困難</td></tr><tr><td><strong><a href="./one-liner-hell.html">ワンライナー地獄</a></strong></td><td>ストリーム定義・変換・購読が混在</td><td>デバッグ困難、テスト困難、可読性低下</td></tr><tr><td><strong><a href="./common-mistakes.html#14-subscribe-内での状態変更">subscribe 内での状態変更</a></strong></td><td><code>subscribe</code> 内で直接状態を変更する</td><td>テスト困難、バグの原因</td></tr><tr><td><strong><a href="./common-mistakes.html#15-テストの欠如">テストの欠如</a></strong></td><td>RxJS コードのテストを書かない</td><td>リグレッション、リファクタリング困難</td></tr></tbody></table><h2 id="学習の進め方" tabindex="-1">学習の進め方 <a class="header-anchor" href="#学習の進め方" aria-label="Permalink to &quot;学習の進め方&quot;">​</a></h2><ol><li><strong><a href="./common-mistakes.html">よくある間違いと対処法</a></strong> で15のアンチパターンを詳しく学習</li><li>各アンチパターンには「悪い例」と「良い例」のコードを掲載</li><li><strong><a href="./checklist.html">アンチパターン回避チェックリスト</a></strong> で自分のコードを見直し</li><li>ベストプラクティスを実践し、チーム内で共有</li></ol><h2 id="関連セクション" tabindex="-1">関連セクション <a class="header-anchor" href="#関連セクション" aria-label="Permalink to &quot;関連セクション&quot;">​</a></h2><p>アンチパターンを学んだ後は、以下のセクションも参照してください。</p><ul><li><strong><a href="/RxJS-with-TypeScript/guide/error-handling/strategies.html">エラーハンドリング</a></strong> - 適切なエラー処理戦略</li><li><strong><a href="/RxJS-with-TypeScript/guide/testing/unit-tests.html">テスト手法</a></strong> - RxJS コードのテスト方法</li><li><strong><a href="/RxJS-with-TypeScript/guide/operators/">オペレーターの理解</a></strong> - 正しいオペレーターの選び方</li></ul><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ol><li>まずは <strong><a href="./common-mistakes.html">よくある間違いと対処法</a></strong> から始めて、実践的なアンチパターンとその解決策を学びましょう。</li><li>学習後は <strong><a href="./checklist.html">アンチパターン回避チェックリスト</a></strong> で実際のコードをレビューしましょう。</li></ol><hr><p><strong>重要</strong>: これらのアンチパターンは、実際のプロジェクトで頻繁に見られるものです。早い段階で理解することで、品質の高いRxJSコードを書けるようになります。</p>',24)]))}const g=r(o,[["render",s]]);export{b as __pageData,g as default};
