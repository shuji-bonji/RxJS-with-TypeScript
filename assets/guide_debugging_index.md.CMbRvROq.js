import{_ as a,c as e,o as l,a2 as t}from"./chunks/framework.BvXV5w7a.js";const p=JSON.parse('{"title":"RxJSのデバッグ手法","description":"RxJSのデバッグ手法について、基本戦略、よくあるデバッグシナリオ、デバッグツール、パフォーマンスデバッグの観点から解説します。","frontmatter":{"description":"RxJSのデバッグ手法について、基本戦略、よくあるデバッグシナリオ、デバッグツール、パフォーマンスデバッグの観点から解説します。"},"headers":[],"relativePath":"guide/debugging/index.md","filePath":"guide/debugging/index.md"}'),r={name:"guide/debugging/index.md"};function o(n,i,s,d,h,u){return l(),e("div",null,i[0]||(i[0]=[t('<h1 id="rxjsのデバッグ手法" tabindex="-1">RxJSのデバッグ手法 <a class="header-anchor" href="#rxjsのデバッグ手法" aria-label="Permalink to &quot;RxJSのデバッグ手法&quot;">​</a></h1><p>RxJSのデバッグは、非同期ストリームの性質上、従来の同期的なデバッグ手法とは異なるアプローチが必要です。</p><p>このページでは、RxJSアプリケーションをデバッグするための実践的な手法とツールについて解説します。</p><h2 id="章の内容" tabindex="-1">章の内容 <a class="header-anchor" href="#章の内容" aria-label="Permalink to &quot;章の内容&quot;">​</a></h2><h3 id="デバッグの基本戦略" tabindex="-1">デバッグの基本戦略 <a class="header-anchor" href="#デバッグの基本戦略" aria-label="Permalink to &quot;デバッグの基本戦略&quot;">​</a></h3><ul><li>tap オペレーターでのログ出力</li><li>開発者ツールでの確認</li><li>RxJS DevTools の活用</li></ul><h3 id="よくあるデバッグシナリオ" tabindex="-1">よくあるデバッグシナリオ <a class="header-anchor" href="#よくあるデバッグシナリオ" aria-label="Permalink to &quot;よくあるデバッグシナリオ&quot;">​</a></h3><ul><li>値が流れてこない</li><li>期待と異なる値が出力される</li><li>購読が完了しない（無限ストリーム）</li><li>メモリリーク（購読解除忘れ）</li><li>エラーが発生しているのに気づかない</li></ul><h3 id="デバッグツール" tabindex="-1">デバッグツール <a class="header-anchor" href="#デバッグツール" aria-label="Permalink to &quot;デバッグツール&quot;">​</a></h3><ul><li>rxjs-spy の使い方</li><li>RxJS DevTools（ブラウザ拡張）</li><li>カスタムデバッグオペレーターの作成</li></ul><h3 id="パフォーマンスデバッグ" tabindex="-1">パフォーマンスデバッグ <a class="header-anchor" href="#パフォーマンスデバッグ" aria-label="Permalink to &quot;パフォーマンスデバッグ&quot;">​</a></h3><ul><li>購読数の確認</li><li>不要な再評価の検出</li><li>メモリ使用量の監視</li></ul><hr><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>この章は現在準備中です。詳細な内容は今後追加される予定です。</p></div><p>当面は、以下の既存の章を参照してください。</p><ul><li><a href="/RxJS-with-TypeScript/guide/error-handling/strategies.html">エラーハンドリング</a> - エラー処理の基本戦略</li><li><a href="/RxJS-with-TypeScript/guide/testing/unit-tests.html">テスト手法</a> - RxJSのテスト手法</li><li><a href="/RxJS-with-TypeScript/guide/anti-patterns/">RxJSアンチパターン集</a> - よくある間違いと対処法</li></ul>',16)]))}const x=a(r,[["render",o]]);export{p as __pageData,x as default};
