import{_ as i,c as a,o as t,a2 as n}from"./chunks/framework.BvXV5w7a.js";const E=JSON.parse('{"title":"ハンズオン学習用の実行環境構築方法","description":"","frontmatter":{},"headers":[],"relativePath":"guide/starter-kid.md","filePath":"guide/starter-kid.md"}'),h={name:"guide/starter-kid.md"};function l(p,s,e,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="ハンズオン学習用の実行環境構築方法" tabindex="-1">ハンズオン学習用の実行環境構築方法 <a class="header-anchor" href="#ハンズオン学習用の実行環境構築方法" aria-label="Permalink to &quot;ハンズオン学習用の実行環境構築方法&quot;">​</a></h1><p>このページでは、RxJSのコードをブラウザではなくローカル環境で即座に試せる開発テンプレート <a href="https://github.com/shuji-bonji/rxjs-with-typescript-starter-kit" target="_blank" rel="noreferrer"><code>RxJS-with-TypeScript-Starter-Kit</code></a> の利用方法を紹介します。</p><h2 id="特徴" tabindex="-1">特徴 <a class="header-anchor" href="#特徴" aria-label="Permalink to &quot;特徴&quot;">​</a></h2><ul><li>Vite + TypeScript + RxJS のシンプルな構成</li><li>ホットリロード対応（<code>npm run dev</code> ですぐ動作確認）</li><li>DOM操作もテストもできるローカル開発環境</li><li>Vitestを使ったテスト駆動開発（TDD）にも対応可能</li></ul><h2 id="利用方法" tabindex="-1">利用方法 <a class="header-anchor" href="#利用方法" aria-label="Permalink to &quot;利用方法&quot;">​</a></h2><p>以下のコマンドでクローン・セットアップできます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/shuji-bonji/rxjs-with-typescript-starter-kit.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rxjs-with-typescript-starter-kit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><p>ブラウザが自動起動し、<code>src/main.ts</code> に記述したコードが実行されます。</p><h2 id="使用例" tabindex="-1">使用例 <a class="header-anchor" href="#使用例" aria-label="Permalink to &quot;使用例&quot;">​</a></h2><p>既存の<code>src/main.ts</code>を以下の様に書き換える。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/main.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { interval } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { take } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs/operators&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  p.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`カウント: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="localhostにアクセス" tabindex="-1">localhostにアクセス <a class="header-anchor" href="#localhostにアクセス" aria-label="Permalink to &quot;localhostにアクセス&quot;">​</a></h3><p>以下のように<code>http://localhost:5174/</code>と表記されるので、こちらにアクセスして結果を確認しましょう。<br><code>console.log()</code>の結果の確認にはディベロッパーツールのコンソールで確認してください。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rxjs-with-typescript-starter-kit@0.0.0 dev</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vite</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5173</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> trying</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> another</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> one...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  VITE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v6.3.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ready</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 107</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ms</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ➜</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Local:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   http://localhost:5174/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ➜</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Network:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> expose</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ➜</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  press</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> h</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> help</span></span></code></pre></div><h2 id="推奨用途" tabindex="-1">推奨用途 <a class="header-anchor" href="#推奨用途" aria-label="Permalink to &quot;推奨用途&quot;">​</a></h2><ul><li>Observable / Subject / Operator の実験</li><li>DOMと組み合わせたリアクティブUIの学習</li><li>marbleテストの導入練習（<code>vitest</code> + <code>TestScheduler</code>）</li><li>自分のコードスニペット保管用のベース環境</li></ul><h2 id="リンク" tabindex="-1">リンク <a class="header-anchor" href="#リンク" aria-label="Permalink to &quot;リンク&quot;">​</a></h2><p>🔗 テンプレートはこちら → <a href="https://github.com/shuji-bonji/rxjs-with-typescript-starter-kit" target="_blank" rel="noreferrer">RxJS-with-TypeScript-Starter-Kit</a><br> 詳しくは<code>README.md</code>を参照してください。</p>`,18)]))}const g=i(h,[["render",l]]);export{E as __pageData,g as default};
