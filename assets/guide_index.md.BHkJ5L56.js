import{_ as e,c as t,o as a,a2 as r}from"./chunks/framework.BvXV5w7a.js";const d=JSON.parse('{"title":"ガイド","description":"TypeScript環境でRxJSを体系的に学ぶための学習ガイドです。Observableの基礎からSubject、各種オペレーター、エラー処理、スケジューラー、テスト手法まで段階的かつ実践的に解説します。各セクションは独立して参照可能です。","frontmatter":{"description":"TypeScript環境でRxJSを体系的に学ぶための学習ガイドです。Observableの基礎からSubject、各種オペレーター、エラー処理、スケジューラー、テスト手法まで段階的かつ実践的に解説します。各セクションは独立して参照可能です。"},"headers":[],"relativePath":"guide/index.md","filePath":"guide/index.md"}'),l={name:"guide/index.md"};function h(c,i,s,o,n,u){return a(),t("div",null,i[0]||(i[0]=[r('<h1 id="ガイド" tabindex="-1">ガイド <a class="header-anchor" href="#ガイド" aria-label="Permalink to &quot;ガイド&quot;">​</a></h1><p>TypeScript環境でRxJSを体系的に学ぶためのガイドです。<br> 以下の各セクションを順に進めることで、RxJSの基礎から応用まで体系的に理解することができます。</p><h2 id="目次" tabindex="-1">目次 <a class="header-anchor" href="#目次" aria-label="Permalink to &quot;目次&quot;">​</a></h2><h3 id="_1-rxjs入門" tabindex="-1">1. RxJS入門 <a class="header-anchor" href="#_1-rxjs入門" aria-label="Permalink to &quot;1. RxJS入門&quot;">​</a></h3><ul><li><a href="/RxJS-with-TypeScript/guide/introduction.html">はじめに</a></li><li><a href="/RxJS-with-TypeScript/guide/starter-kid.html">学習用の実行環境構築</a></li><li><a href="/RxJS-with-TypeScript/guide/basics/what-is-rxjs.html">RxJSとは何か</a></li><li><a href="/RxJS-with-TypeScript/guide/basics/what-is-a-stream.html">ストリームとは？</a></li><li><a href="/RxJS-with-TypeScript/guide/basics/promise-vs-rxjs.html">PromiseとRxJSの違い</a></li></ul><h3 id="_2-observableの基礎" tabindex="-1">2. Observableの基礎 <a class="header-anchor" href="#_2-observableの基礎" aria-label="Permalink to &quot;2. Observableの基礎&quot;">​</a></h3><ul><li><a href="/RxJS-with-TypeScript/guide/observables/what-is-observable.html">Observableとは</a></li><li><a href="/RxJS-with-TypeScript/guide/observables/creation.html">Observableの作成方法</a></li><li><a href="/RxJS-with-TypeScript/guide/observables/events.html">イベントのストリーム化</a></li><li><a href="/RxJS-with-TypeScript/guide/observables/events.html#cannot-used-fromEvent">fromEvent で利用できないイベント</a></li><li><a href="/RxJS-with-TypeScript/guide/observables/events-list.html">イベント一覧</a></li><li><a href="/RxJS-with-TypeScript/guide/observables/observable-lifecycle.html">Observableのライフサイクル</a></li><li><a href="/RxJS-with-TypeScript/guide/observables/cold-and-hot-observables.html">コールドObservableとホットObservable</a></li></ul><h3 id="_3-creation-functions" tabindex="-1">3. Creation Functions <a class="header-anchor" href="#_3-creation-functions" aria-label="Permalink to &quot;3. Creation Functions&quot;">​</a></h3><ul><li><a href="/RxJS-with-TypeScript/guide/creation-functions/">Creation Functionsとは</a></li><li><a href="/RxJS-with-TypeScript/guide/creation-functions/concat.html">concat - 順次結合</a></li><li><a href="/RxJS-with-TypeScript/guide/creation-functions/merge.html">merge - 並行結合</a></li><li><a href="/RxJS-with-TypeScript/guide/creation-functions/combineLatest.html">combineLatest - 最新値の組み合わせ</a></li><li><a href="/RxJS-with-TypeScript/guide/creation-functions/zip.html">zip - 対応する値のペア化</a></li><li><a href="/RxJS-with-TypeScript/guide/creation-functions/race.html">race - 最速のストリームを採用</a></li><li><a href="/RxJS-with-TypeScript/guide/creation-functions/forkJoin.html">forkJoin - すべての完了を待つ</a></li><li><a href="/RxJS-with-TypeScript/guide/creation-functions/partition.html">partition - 条件で2つに分割</a></li><li><a href="/RxJS-with-TypeScript/guide/creation-functions/iif.html">iif - 条件による分岐</a></li><li><a href="/RxJS-with-TypeScript/guide/creation-functions/defer.html">defer - 遅延生成</a></li></ul><h3 id="_4-オペレーターの理解" tabindex="-1">4. オペレーターの理解 <a class="header-anchor" href="#_4-オペレーターの理解" aria-label="Permalink to &quot;4. オペレーターの理解&quot;">​</a></h3><ul><li><a href="/RxJS-with-TypeScript/guide/operators/">オペレーターの概要</a></li><li><a href="/RxJS-with-TypeScript/guide/operators/pipeline.html">パイプラインの概念</a></li><li><a href="/RxJS-with-TypeScript/guide/operators/transformation/">変換オペレーター</a> - map, scan, mergeMap, switchMap, buffer系、window系など</li><li><a href="/RxJS-with-TypeScript/guide/operators/filtering/">フィルタリングオペレーター</a> - filter, take, debounceTime, throttleTime, distinctなど</li><li><a href="/RxJS-with-TypeScript/guide/operators/combination/">結合オペレーター</a> - concatWith, mergeWith, withLatestFrom, *Allオペレーターなど</li><li><a href="/RxJS-with-TypeScript/guide/operators/utility/">ユーティリティオペレーター</a> - tap, delay, retry, finalize, takeUntilなど</li><li><a href="/RxJS-with-TypeScript/guide/operators/conditional/">条件オペレーター</a> - defaultIfEmpty, every, isEmptyなど</li><li><a href="/RxJS-with-TypeScript/guide/operators/multicasting/">マルチキャスティング</a> - share, shareReplayなど</li></ul><h3 id="_5-subjectとマルチキャスト" tabindex="-1">5. Subjectとマルチキャスト <a class="header-anchor" href="#_5-subjectとマルチキャスト" aria-label="Permalink to &quot;5. Subjectとマルチキャスト&quot;">​</a></h3><ul><li><a href="/RxJS-with-TypeScript/guide/subjects/what-is-subject.html">Subjectとは</a></li><li><a href="/RxJS-with-TypeScript/guide/subjects/types-of-subject.html">Subjectの種類</a></li><li><a href="/RxJS-with-TypeScript/guide/subjects/multicasting.html">Multicastingの仕組み</a></li><li><a href="/RxJS-with-TypeScript/guide/subjects/use-cases.html">Subjectのユースケース</a></li></ul><h3 id="_6-エラーハンドリング" tabindex="-1">6. エラーハンドリング <a class="header-anchor" href="#_6-エラーハンドリング" aria-label="Permalink to &quot;6. エラーハンドリング&quot;">​</a></h3><ul><li><a href="/RxJS-with-TypeScript/guide/error-handling/strategies.html">エラー処理戦略</a></li><li><a href="/RxJS-with-TypeScript/guide/error-handling/retry-catch.html">retry と catchError</a></li><li><a href="/RxJS-with-TypeScript/guide/error-handling/finalize.html">finalize と complete</a></li></ul><h3 id="_7-スケジューラーの活用" tabindex="-1">7. スケジューラーの活用 <a class="header-anchor" href="#_7-スケジューラーの活用" aria-label="Permalink to &quot;7. スケジューラーの活用&quot;">​</a></h3><ul><li><a href="/RxJS-with-TypeScript/guide/schedulers/async-control.html">非同期処理の制御</a></li><li><a href="/RxJS-with-TypeScript/guide/schedulers/types.html">スケジューラーの種類と使い分け</a></li><li><a href="/RxJS-with-TypeScript/guide/schedulers/task-and-scheduler-basics.html">補足:タスクとスケジューラーの基礎知識</a></li></ul><h3 id="_8-rxjsのデバッグ手法" tabindex="-1">8. RxJSのデバッグ手法 <a class="header-anchor" href="#_8-rxjsのデバッグ手法" aria-label="Permalink to &quot;8. RxJSのデバッグ手法&quot;">​</a></h3><ul><li><a href="/RxJS-with-TypeScript/guide/debugging/">デバッグ手法の概要</a></li></ul><h3 id="_9-テスト手法" tabindex="-1">9. テスト手法 <a class="header-anchor" href="#_9-テスト手法" aria-label="Permalink to &quot;9. テスト手法&quot;">​</a></h3><ul><li><a href="/RxJS-with-TypeScript/guide/testing/unit-tests.html">RxJSのユニットテスト</a></li><li><a href="/RxJS-with-TypeScript/guide/testing/test-scheduler.html">TestSchedulerの活用</a></li><li><a href="/RxJS-with-TypeScript/guide/testing/marble-testing.html">マーブルテスト</a></li></ul><h3 id="_10-rxjsアンチパターン集" tabindex="-1">10. RxJSアンチパターン集 <a class="header-anchor" href="#_10-rxjsアンチパターン集" aria-label="Permalink to &quot;10. RxJSアンチパターン集&quot;">​</a></h3><ul><li><a href="/RxJS-with-TypeScript/guide/anti-patterns/">アンチパターンとは</a></li><li><a href="/RxJS-with-TypeScript/guide/anti-patterns/common-mistakes.html">よくある間違いと対処法</a></li><li><a href="/RxJS-with-TypeScript/guide/anti-patterns/promise-observable-mixing.html">PromiseとObservableの混在</a></li><li><a href="/RxJS-with-TypeScript/guide/anti-patterns/one-liner-hell.html">ワンライナー地獄と段階分離構文</a></li><li><a href="/RxJS-with-TypeScript/guide/anti-patterns/checklist.html">アンチパターン回避チェックリスト</a></li></ul><h3 id="_11-rxjs困難点克服" tabindex="-1">11. RxJS困難点克服 <a class="header-anchor" href="#_11-rxjs困難点克服" aria-label="Permalink to &quot;11. RxJS困難点克服&quot;">​</a></h3><ul><li><a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/">なぜRxJSは難しいのか</a></li><li><a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/conceptual-understanding.html">概念理解の壁</a></li><li><a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/lifecycle-management.html">ライフサイクル管理の壁</a></li><li><a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/operator-selection.html">オペレーター選択の迷い</a></li><li><a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/timing-and-order.html">タイミングと順序の理解</a></li><li><a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/state-and-sharing.html">状態管理の難しさ</a></li><li><a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/stream-combination.html">複数ストリーム組み合わせ</a></li><li><a href="/RxJS-with-TypeScript/guide/overcoming-difficulties/debugging-guide.html">デバッグの壁</a></li></ul><hr><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>このガイドは、段階的かつ体系的にRxJSの理解を深めるために構成されています。 必要に応じて各セクションを自由に参照してください。</p></div>',27)]))}const S=e(l,[["render",h]]);export{d as __pageData,S as default};
