import{_ as o,C as i,c,o as e,a2 as a,b as l,w as d,a as E,G as h,a3 as n}from"./chunks/framework.BvXV5w7a.js";const _=JSON.parse('{"title":"ユーティリティオペレーター","description":"","frontmatter":{},"headers":[],"relativePath":"guide/operators/utility/index.md","filePath":"guide/operators/utility/index.md"}'),s={name:"guide/operators/utility/index.md"};function A(m,t,B,b,p,u){const r=i("Mermaid");return e(),c("div",null,[t[1]||(t[1]=a('<h1 id="ユーティリティオペレーター" tabindex="-1">ユーティリティオペレーター <a class="header-anchor" href="#ユーティリティオペレーター" aria-label="Permalink to &quot;ユーティリティオペレーター&quot;">​</a></h1><p>RxJSのユーティリティオペレーターは、データの変換やフィルタリングといった主目的の処理ではなく、<strong>ストリームの補助処理（副作用、状態制御、UI対応など）を担う演算子群</strong>です。</p><p>本ページでは、演算子を以下のように目的別に分類し、基本的な用途を確認できる一覧を掲載します。<br> 詳細な使い方や実践例については、各ページまたは <a href="./practical-use-cases.html">実用的なユースケース</a> を参照してください。</p><h2 id="📦-演算子一覧-目的別" tabindex="-1">📦 演算子一覧（目的別） <a class="header-anchor" href="#📦-演算子一覧-目的別" aria-label="Permalink to &quot;📦 演算子一覧（目的別）&quot;">​</a></h2><h3 id="◾-サイドエフェクト・状態制御" tabindex="-1">◾ サイドエフェクト・状態制御 <a class="header-anchor" href="#◾-サイドエフェクト・状態制御" aria-label="Permalink to &quot;◾ サイドエフェクト・状態制御&quot;">​</a></h3><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th><th>よく組み合わせる演算子</th></tr></thead><tbody><tr><td><a href="./tap.html">tap</a></td><td>値を変更せず副作用を実行（ログ出力やUI更新など）</td><td><code>map</code>, <code>switchMap</code></td></tr><tr><td><a href="./finalize.html">finalize</a></td><td>ストリーム終了時にクリーンアップ処理を実行</td><td><code>tap</code>, <code>catchError</code></td></tr></tbody></table><h3 id="◾-タイミング・遅延制御" tabindex="-1">◾ タイミング・遅延制御 <a class="header-anchor" href="#◾-タイミング・遅延制御" aria-label="Permalink to &quot;◾ タイミング・遅延制御&quot;">​</a></h3><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th><th>よく組み合わせる演算子</th></tr></thead><tbody><tr><td><a href="./delay.html">delay</a></td><td>各値の発行を指定時間遅延させる</td><td><code>tap</code>, <code>concatMap</code></td></tr><tr><td><a href="./timeout.html">timeout</a></td><td>発行が一定時間を超えるとエラー発生</td><td><code>catchError</code>, <code>retry</code></td></tr><tr><td><a href="./takeUntil.html">takeUntil</a></td><td>指定Observableが通知した時点で購読終了</td><td><code>interval</code>, <code>fromEvent</code></td></tr></tbody></table><h3 id="◾-初期値・繰り返し・配列化など" tabindex="-1">◾ 初期値・繰り返し・配列化など <a class="header-anchor" href="#◾-初期値・繰り返し・配列化など" aria-label="Permalink to &quot;◾ 初期値・繰り返し・配列化など&quot;">​</a></h3><table tabindex="0"><thead><tr><th>オペレーター</th><th>説明</th><th>よく組み合わせる演算子</th></tr></thead><tbody><tr><td><a href="./startWith.html">startWith</a></td><td>ストリームの最初に初期値を発行</td><td><code>scan</code>, <code>combineLatest</code></td></tr><tr><td><a href="./repeat.html">repeat</a></td><td>完了後にストリーム全体を再購読</td><td><code>tap</code>, <code>delay</code></td></tr><tr><td><a href="./retry.html">retry</a></td><td>エラー時に再試行</td><td><code>catchError</code>, <code>switchMap</code></td></tr><tr><td><a href="./toArray.html">toArray</a></td><td>ストリームの全値を1つの配列で発行（完了時）</td><td><code>concatMap</code>, <code>take</code></td></tr></tbody></table><h2 id="🧭-オペレーターの分類図-mermaidによる視覚化" tabindex="-1">🧭 オペレーターの分類図（Mermaidによる視覚化） <a class="header-anchor" href="#🧭-オペレーターの分類図-mermaidによる視覚化" aria-label="Permalink to &quot;🧭 オペレーターの分類図（Mermaidによる視覚化）&quot;">​</a></h2>',11)),(e(),l(n,null,{default:d(()=>[h(r,{id:"mermaid-174",class:"mermaid",graph:"flowchart%20TD%0A%20%20UO%5B%E3%83%A6%E3%83%BC%E3%83%86%E3%82%A3%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%BF%E3%83%BC%5D%20--%3E%20SE%5B%E5%89%AF%E4%BD%9C%E7%94%A8%E7%B3%BB%5D%0A%20%20UO%20--%3E%20TM%5B%E3%82%BF%E3%82%A4%E3%83%9F%E3%83%B3%E3%82%B0%E7%B3%BB%5D%0A%20%20UO%20--%3E%20CT%5B%E5%88%9D%E6%9C%9F%E5%80%A4%E3%83%BB%E5%88%B6%E5%BE%A1%E7%B3%BB%5D%0A%0A%20%20SE%20--%3E%20tap%5Btap%3Cbr%3E%E5%89%AF%E4%BD%9C%E7%94%A8%E5%AE%9F%E8%A1%8C%5D%0A%20%20SE%20--%3E%20finalize%5Bfinalize%3Cbr%3E%E7%B5%82%E4%BA%86%E6%99%82%E5%87%A6%E7%90%86%5D%0A%0A%20%20TM%20--%3E%20delay%5Bdelay%3Cbr%3E%E9%81%85%E5%BB%B6%5D%0A%20%20TM%20--%3E%20timeout%5Btimeout%3Cbr%3E%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%5D%0A%0A%20%20CT%20--%3E%20startWith%5BstartWith%3Cbr%3E%E5%88%9D%E6%9C%9F%E5%80%A4%5D%0A%20%20CT%20--%3E%20repeat%5Brepeat%3Cbr%3E%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97%5D%0A%20%20CT%20--%3E%20retry%5Bretry%3Cbr%3E%E5%86%8D%E8%A9%A6%E8%A1%8C%5D%0A%20%20CT%20--%3E%20toArray%5BtoArray%3Cbr%3E%E9%85%8D%E5%88%97%E5%8C%96%5D%0A"})]),fallback:d(()=>t[0]||(t[0]=[E(" Loading... ")])),_:1})),t[2]||(t[2]=a('<blockquote><p>上図では、用途ごとに分類されたユーティリティオペレーターの全体像を視覚的に把握できます。</p></blockquote><h2 id="📌-備考" tabindex="-1">📌 備考 <a class="header-anchor" href="#📌-備考" aria-label="Permalink to &quot;📌 備考&quot;">​</a></h2><ul><li><code>retry</code> と <code>repeat</code> の違い： <ul><li><code>retry</code>: <strong>エラーが出た時に再試行</strong></li><li><code>repeat</code>: <strong>正常に完了した時に再試行</strong></li></ul></li><li><code>toArray</code> は完了しない限り値を出力しないため、 <code>take()</code> などと併用するのが一般的です。</li></ul>',3))])}const C=o(s,[["render",A]]);export{_ as __pageData,C as default};
