import{_ as i,c as a,o as t,a2 as n}from"./chunks/framework.BvXV5w7a.js";const o=JSON.parse('{"title":"takeUntil","description":"","frontmatter":{},"headers":[],"relativePath":"guide/operators/utility/takeUntil.md","filePath":"guide/operators/utility/takeUntil.md"}'),l={name:"guide/operators/utility/takeUntil.md"};function e(h,s,k,p,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="takeuntil" tabindex="-1">takeUntil <a class="header-anchor" href="#takeuntil" aria-label="Permalink to &quot;takeUntil&quot;">​</a></h1><p><code>takeUntil</code> は、<strong>指定した Observable（通知トリガー）が最初の値を発行するまで、元の Observable を購読し続ける</strong> オペレーターです。通知トリガーが発行されたタイミングで、元の Observable の購読は解除されます。</p><h2 id="🔁-基本構文" tabindex="-1">🔁 基本構文 <a class="header-anchor" href="#🔁-基本構文" aria-label="Permalink to &quot;🔁 基本構文&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  takeUntil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(notifier$)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>source$</code>: 元の Observable（購読対象）</li><li><code>notifier$</code>: 停止を知らせる Observable（この Observable が最初の値を出すと購読が止まる）</li></ul><p><a href="https://rxjs.dev/api/index/function/takeUntil" target="_blank" rel="noreferrer">🌐 RxJS公式ドキュメント - takeUntil</a></p><h2 id="🧪-使用例-ボタンクリックで購読停止" tabindex="-1">🧪 使用例：ボタンクリックで購読停止 <a class="header-anchor" href="#🧪-使用例-ボタンクリックで購読停止" aria-label="Permalink to &quot;🧪 使用例：ボタンクリックで購読停止&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { interval, fromEvent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { takeUntil } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rxjs/operators&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stopButton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stopButton.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;stop&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stopButton)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stop$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fromEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stopButton, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> source$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1秒ごとに数値を発行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source$</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takeUntil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stop$))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`値: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p>📌 <code>stopButton</code> がクリックされると、その瞬間に <code>source$</code> の購読が停止されます。</p><h2 id="✅-よくあるユースケース" tabindex="-1">✅ よくあるユースケース <a class="header-anchor" href="#✅-よくあるユースケース" aria-label="Permalink to &quot;✅ よくあるユースケース&quot;">​</a></h2><ul><li>キャンセルボタンで HTTP リクエストやポーリング処理を停止したいとき</li><li>コンポーネントのライフサイクルに応じて購読を解除したいとき</li><li>ページ遷移やアンマウントで非同期処理を打ち切りたいとき</li></ul><h2 id="🔗-関連オペレーター" tabindex="-1">🔗 関連オペレーター <a class="header-anchor" href="#🔗-関連オペレーター" aria-label="Permalink to &quot;🔗 関連オペレーター&quot;">​</a></h2><ul><li><code>take</code>: 一定回数まで値を受け取る</li><li><code>first</code>: 最初の1件だけを取得して終了</li><li><code>skipUntil</code>: 特定の Observable が値を出すまでは無視する</li></ul>`,13)]))}const c=i(l,[["render",e]]);export{o as __pageData,c as default};
